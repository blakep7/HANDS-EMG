
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c4c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007424  08009e00  08009e00  0000ae00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011224  08011224  00013aec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011224  08011224  00012224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801122c  0801122c  00013aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801122c  0801122c  0001222c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011230  08011230  00012230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000aec  20000000  08011234  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a28  20000b00  08011d20  00013b00  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20001528  08011d20  00014528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013aec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d91  00000000  00000000  00013b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037b6  00000000  00000000  0002a8ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0002e068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eaa  00000000  00000000  0002f3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d87e  00000000  00000000  00030252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aa5f  00000000  00000000  0005dad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c4c2  00000000  00000000  0007852f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  001849f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060b8  00000000  00000000  00184a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  0018ab30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000b00 	.word	0x20000b00
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009de4 	.word	0x08009de4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000b04 	.word	0x20000b04
 80001ec:	08009de4 	.word	0x08009de4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b988 	b.w	8000ef0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	468e      	mov	lr, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	4688      	mov	r8, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d962      	bls.n	8000cd4 <__udivmoddi4+0xdc>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	b14e      	cbz	r6, 8000c28 <__udivmoddi4+0x30>
 8000c14:	f1c6 0320 	rsb	r3, r6, #32
 8000c18:	fa01 f806 	lsl.w	r8, r1, r6
 8000c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c20:	40b7      	lsls	r7, r6
 8000c22:	ea43 0808 	orr.w	r8, r3, r8
 8000c26:	40b4      	lsls	r4, r6
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c34:	0c23      	lsrs	r3, r4, #16
 8000c36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c4c:	f080 80ea 	bcs.w	8000e24 <__udivmoddi4+0x22c>
 8000c50:	429a      	cmp	r2, r3
 8000c52:	f240 80e7 	bls.w	8000e24 <__udivmoddi4+0x22c>
 8000c56:	3902      	subs	r1, #2
 8000c58:	443b      	add	r3, r7
 8000c5a:	1a9a      	subs	r2, r3, r2
 8000c5c:	b2a3      	uxth	r3, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6e:	459c      	cmp	ip, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c78:	f080 80d6 	bcs.w	8000e28 <__udivmoddi4+0x230>
 8000c7c:	459c      	cmp	ip, r3
 8000c7e:	f240 80d3 	bls.w	8000e28 <__udivmoddi4+0x230>
 8000c82:	443b      	add	r3, r7
 8000c84:	3802      	subs	r0, #2
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	eba3 030c 	sub.w	r3, r3, ip
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40f3      	lsrs	r3, r6
 8000c94:	2200      	movs	r2, #0
 8000c96:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xb6>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb0>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d146      	bne.n	8000d44 <__udivmoddi4+0x14c>
 8000cb6:	4573      	cmp	r3, lr
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xc8>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 8105 	bhi.w	8000eca <__udivmoddi4+0x2d2>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	4690      	mov	r8, r2
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e5      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cce:	e9c5 4800 	strd	r4, r8, [r5]
 8000cd2:	e7e2      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f000 8090 	beq.w	8000dfa <__udivmoddi4+0x202>
 8000cda:	fab2 f682 	clz	r6, r2
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	f040 80a4 	bne.w	8000e2c <__udivmoddi4+0x234>
 8000ce4:	1a8a      	subs	r2, r1, r2
 8000ce6:	0c03      	lsrs	r3, r0, #16
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	b280      	uxth	r0, r0
 8000cee:	b2bc      	uxth	r4, r7
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cf6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x11e>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x11c>
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	f200 80e0 	bhi.w	8000ed4 <__udivmoddi4+0x2dc>
 8000d14:	46c4      	mov	ip, r8
 8000d16:	1a9b      	subs	r3, r3, r2
 8000d18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d24:	fb02 f404 	mul.w	r4, r2, r4
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x144>
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x142>
 8000d34:	429c      	cmp	r4, r3
 8000d36:	f200 80ca 	bhi.w	8000ece <__udivmoddi4+0x2d6>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	1b1b      	subs	r3, r3, r4
 8000d3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d44:	f1c1 0620 	rsb	r6, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	fa0e f401 	lsl.w	r4, lr, r1
 8000d54:	fa20 f306 	lsr.w	r3, r0, r6
 8000d58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	fa1f fc87 	uxth.w	ip, r7
 8000d6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x1a0>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d8a:	f080 809c 	bcs.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f240 8099 	bls.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d94:	3802      	subs	r0, #2
 8000d96:	443c      	add	r4, r7
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	fa1f fe83 	uxth.w	lr, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db0:	45a4      	cmp	ip, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1ce>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dba:	f080 8082 	bcs.w	8000ec2 <__udivmoddi4+0x2ca>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d97f      	bls.n	8000ec2 <__udivmoddi4+0x2ca>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dca:	eba4 040c 	sub.w	r4, r4, ip
 8000dce:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	4673      	mov	r3, lr
 8000dd6:	46e1      	mov	r9, ip
 8000dd8:	d362      	bcc.n	8000ea0 <__udivmoddi4+0x2a8>
 8000dda:	d05f      	beq.n	8000e9c <__udivmoddi4+0x2a4>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x1fe>
 8000dde:	ebb8 0203 	subs.w	r2, r8, r3
 8000de2:	eb64 0409 	sbc.w	r4, r4, r9
 8000de6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dea:	fa22 f301 	lsr.w	r3, r2, r1
 8000dee:	431e      	orrs	r6, r3
 8000df0:	40cc      	lsrs	r4, r1
 8000df2:	e9c5 6400 	strd	r6, r4, [r5]
 8000df6:	2100      	movs	r1, #0
 8000df8:	e74f      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000dfa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dfe:	0c01      	lsrs	r1, r0, #16
 8000e00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e04:	b280      	uxth	r0, r0
 8000e06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	463c      	mov	r4, r7
 8000e10:	46b8      	mov	r8, r7
 8000e12:	46be      	mov	lr, r7
 8000e14:	2620      	movs	r6, #32
 8000e16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e1a:	eba2 0208 	sub.w	r2, r2, r8
 8000e1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e22:	e766      	b.n	8000cf2 <__udivmoddi4+0xfa>
 8000e24:	4601      	mov	r1, r0
 8000e26:	e718      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e72c      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000e2c:	f1c6 0220 	rsb	r2, r6, #32
 8000e30:	fa2e f302 	lsr.w	r3, lr, r2
 8000e34:	40b7      	lsls	r7, r6
 8000e36:	40b1      	lsls	r1, r6
 8000e38:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e40:	430a      	orrs	r2, r1
 8000e42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e46:	b2bc      	uxth	r4, r7
 8000e48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb08 f904 	mul.w	r9, r8, r4
 8000e56:	40b0      	lsls	r0, r6
 8000e58:	4589      	cmp	r9, r1
 8000e5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e5e:	b280      	uxth	r0, r0
 8000e60:	d93e      	bls.n	8000ee0 <__udivmoddi4+0x2e8>
 8000e62:	1879      	adds	r1, r7, r1
 8000e64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e68:	d201      	bcs.n	8000e6e <__udivmoddi4+0x276>
 8000e6a:	4589      	cmp	r9, r1
 8000e6c:	d81f      	bhi.n	8000eae <__udivmoddi4+0x2b6>
 8000e6e:	eba1 0109 	sub.w	r1, r1, r9
 8000e72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e76:	fb09 f804 	mul.w	r8, r9, r4
 8000e7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e84:	4542      	cmp	r2, r8
 8000e86:	d229      	bcs.n	8000edc <__udivmoddi4+0x2e4>
 8000e88:	18ba      	adds	r2, r7, r2
 8000e8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e8e:	d2c4      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e90:	4542      	cmp	r2, r8
 8000e92:	d2c2      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e94:	f1a9 0102 	sub.w	r1, r9, #2
 8000e98:	443a      	add	r2, r7
 8000e9a:	e7be      	b.n	8000e1a <__udivmoddi4+0x222>
 8000e9c:	45f0      	cmp	r8, lr
 8000e9e:	d29d      	bcs.n	8000ddc <__udivmoddi4+0x1e4>
 8000ea0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ea4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	46e1      	mov	r9, ip
 8000eac:	e796      	b.n	8000ddc <__udivmoddi4+0x1e4>
 8000eae:	eba7 0909 	sub.w	r9, r7, r9
 8000eb2:	4449      	add	r1, r9
 8000eb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ebc:	fb09 f804 	mul.w	r8, r9, r4
 8000ec0:	e7db      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ec2:	4673      	mov	r3, lr
 8000ec4:	e77f      	b.n	8000dc6 <__udivmoddi4+0x1ce>
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	e766      	b.n	8000d98 <__udivmoddi4+0x1a0>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e6fd      	b.n	8000cca <__udivmoddi4+0xd2>
 8000ece:	443b      	add	r3, r7
 8000ed0:	3a02      	subs	r2, #2
 8000ed2:	e733      	b.n	8000d3c <__udivmoddi4+0x144>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	443b      	add	r3, r7
 8000eda:	e71c      	b.n	8000d16 <__udivmoddi4+0x11e>
 8000edc:	4649      	mov	r1, r9
 8000ede:	e79c      	b.n	8000e1a <__udivmoddi4+0x222>
 8000ee0:	eba1 0109 	sub.w	r1, r1, r9
 8000ee4:	46c4      	mov	ip, r8
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fb09 f804 	mul.w	r8, r9, r4
 8000eee:	e7c4      	b.n	8000e7a <__udivmoddi4+0x282>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <convert_adc_data>:
#include <feature_extraction.h>

#define FRAME_SIZE 400

//convert 24bit ADC (stored in int32_t) to int16_t
void convert_adc_data(const int32_t *adc_raw, int16_t *adc_processed) {
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < FRAME_SIZE; i++) {
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	e00e      	b.n	8000f22 <convert_adc_data+0x2e>
        adc_processed[i] = (int16_t)(adc_raw[i] >> 8);  // Truncate 24-bit to 16-bit
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	1219      	asrs	r1, r3, #8
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	b20a      	sxth	r2, r1
 8000f1a:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < FRAME_SIZE; i++) {
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000f28:	dbec      	blt.n	8000f04 <convert_adc_data+0x10>
    }
}
 8000f2a:	bf00      	nop
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <calculate_features>:

// feature extraction
void calculate_features(const int16_t *data, int16_t *features) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b09a      	sub	sp, #104	@ 0x68
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
    float iemg = 0.0f, mav = 0.0f, ssi = 0.0f, rms = 0.0f;
 8000f42:	f04f 0300 	mov.w	r3, #0
 8000f46:	667b      	str	r3, [r7, #100]	@ 0x64
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
    float variance = 0.0f, myop = 0.0f, wl = 0.0f, damv = 0.0f;
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
 8000f60:	f04f 0300 	mov.w	r3, #0
 8000f64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	653b      	str	r3, [r7, #80]	@ 0x50
    float m2 = 0.0f, dvarv = 0.0f, dasdv = 0.0f, wamp = 0.0f;
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	647b      	str	r3, [r7, #68]	@ 0x44
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	643b      	str	r3, [r7, #64]	@ 0x40

    float mean = 0.0f;
 8000f8a:	f04f 0300 	mov.w	r3, #0
 8000f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float prev_sample = (float)data[0];
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f9e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38


    for (int i = 0; i < FRAME_SIZE; i++) {
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fa6:	e012      	b.n	8000fce <calculate_features+0x96>
        mean += (float)data[i];
 8000fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb4:	ee07 3a90 	vmov	s15, r3
 8000fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbc:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    for (int i = 0; i < FRAME_SIZE; i++) {
 8000fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fca:	3301      	adds	r3, #1
 8000fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fd0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000fd4:	dbe8      	blt.n	8000fa8 <calculate_features+0x70>
    }
    mean /= FRAME_SIZE;
 8000fd6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000fda:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8001068 <calculate_features+0x130>
 8000fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c


    float sum_sq_diff = 0.0f;
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	633b      	str	r3, [r7, #48]	@ 0x30
    for (int i = 0; i < FRAME_SIZE; i++) {
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ff0:	e01c      	b.n	800102c <calculate_features+0xf4>
        float diff = (float)data[i] - mean;
 8000ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffe:	ee07 3a90 	vmov	s15, r3
 8001002:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001006:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800100a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100e:	edc7 7a02 	vstr	s15, [r7, #8]
        sum_sq_diff += diff * diff;
 8001012:	edd7 7a02 	vldr	s15, [r7, #8]
 8001016:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800101a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800101e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001022:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    for (int i = 0; i < FRAME_SIZE; i++) {
 8001026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001028:	3301      	adds	r3, #1
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800102c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800102e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001032:	dbde      	blt.n	8000ff2 <calculate_features+0xba>
    }
    float std_dev = sqrtf(sum_sq_diff / FRAME_SIZE);
 8001034:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001038:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001068 <calculate_features+0x130>
 800103c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001040:	eeb0 0a47 	vmov.f32	s0, s14
 8001044:	f008 fd94 	bl	8009b70 <sqrtf>
 8001048:	ed87 0a07 	vstr	s0, [r7, #28]
    float threshold = 0.3f * std_dev;
 800104c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001050:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8001064 <calculate_features+0x12c>
 8001054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001058:	edc7 7a06 	vstr	s15, [r7, #24]

    for (int i = 0; i < FRAME_SIZE; i++) {
 800105c:	2300      	movs	r3, #0
 800105e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001060:	e09e      	b.n	80011a0 <calculate_features+0x268>
 8001062:	bf00      	nop
 8001064:	3e99999a 	.word	0x3e99999a
 8001068:	43c80000 	.word	0x43c80000
 800106c:	42c80000 	.word	0x42c80000
 8001070:	43c78000 	.word	0x43c78000
        float sample = (float)data[i];
 8001074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001080:	ee07 3a90 	vmov	s15, r3
 8001084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001088:	edc7 7a04 	vstr	s15, [r7, #16]

        iemg += fabsf(sample);
 800108c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001090:	eef0 7ae7 	vabs.f32	s15, s15
 8001094:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800109c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
        mav += fabsf(sample);
 80010a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80010a4:	eef0 7ae7 	vabs.f32	s15, s15
 80010a8:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80010ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b0:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
        ssi += sample * sample;
 80010b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80010b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010bc:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80010c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c4:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
        wl += fabsf(sample - prev_sample);
 80010c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80010cc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80010d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d4:	eef0 7ae7 	vabs.f32	s15, s15
 80010d8:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80010dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
        m2 += sample * sample;
 80010e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80010e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010ec:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80010f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

        if (fabsf(sample) > threshold) {
 80010f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80010fc:	eef0 7ae7 	vabs.f32	s15, s15
 8001100:	ed97 7a06 	vldr	s14, [r7, #24]
 8001104:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110c:	d507      	bpl.n	800111e <calculate_features+0x1e6>
            myop += 1.0f;
 800110e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001112:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001116:	ee77 7a87 	vadd.f32	s15, s15, s14
 800111a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
        }

        if (i > 0) {
 800111e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001120:	2b00      	cmp	r3, #0
 8001122:	dd38      	ble.n	8001196 <calculate_features+0x25e>
            float diff = sample - prev_sample;
 8001124:	ed97 7a04 	vldr	s14, [r7, #16]
 8001128:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800112c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001130:	edc7 7a03 	vstr	s15, [r7, #12]
            damv += fabsf(diff);
 8001134:	edd7 7a03 	vldr	s15, [r7, #12]
 8001138:	eef0 7ae7 	vabs.f32	s15, s15
 800113c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001144:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
            dvarv += diff * diff;
 8001148:	edd7 7a03 	vldr	s15, [r7, #12]
 800114c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001150:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001158:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
            dasdv += diff * diff;
 800115c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001160:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001164:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001168:	ee77 7a27 	vadd.f32	s15, s14, s15
 800116c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
            if (fabsf(diff) > threshold) {
 8001170:	edd7 7a03 	vldr	s15, [r7, #12]
 8001174:	eef0 7ae7 	vabs.f32	s15, s15
 8001178:	ed97 7a06 	vldr	s14, [r7, #24]
 800117c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001184:	d507      	bpl.n	8001196 <calculate_features+0x25e>
                wamp += 1.0f;
 8001186:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800118a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800118e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001192:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
            }
        }

        prev_sample = sample;
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (int i = 0; i < FRAME_SIZE; i++) {
 800119a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800119c:	3301      	adds	r3, #1
 800119e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80011a6:	f6ff af65 	blt.w	8001074 <calculate_features+0x13c>
    }

    mav /= FRAME_SIZE;
 80011aa:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80011ae:	ed5f 6a52 	vldr	s13, [pc, #-328]	@ 8001068 <calculate_features+0x130>
 80011b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b6:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    rms = sqrtf(ssi / FRAME_SIZE);
 80011ba:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80011be:	ed5f 6a56 	vldr	s13, [pc, #-344]	@ 8001068 <calculate_features+0x130>
 80011c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011c6:	eeb0 0a47 	vmov.f32	s0, s14
 80011ca:	f008 fcd1 	bl	8009b70 <sqrtf>
 80011ce:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    variance = sum_sq_diff / FRAME_SIZE;
 80011d2:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80011d6:	ed5f 6a5c 	vldr	s13, [pc, #-368]	@ 8001068 <calculate_features+0x130>
 80011da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011de:	edc7 7a08 	vstr	s15, [r7, #32]
    myop = (myop / FRAME_SIZE) * 100.0f;
 80011e2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80011e6:	ed5f 6a60 	vldr	s13, [pc, #-384]	@ 8001068 <calculate_features+0x130>
 80011ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ee:	ed1f 7a61 	vldr	s14, [pc, #-388]	@ 800106c <calculate_features+0x134>
 80011f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f6:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    damv /= (FRAME_SIZE - 1);
 80011fa:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80011fe:	ed5f 6a64 	vldr	s13, [pc, #-400]	@ 8001070 <calculate_features+0x138>
 8001202:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001206:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    dvarv /= (FRAME_SIZE - 1);
 800120a:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800120e:	ed5f 6a68 	vldr	s13, [pc, #-416]	@ 8001070 <calculate_features+0x138>
 8001212:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001216:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    dasdv = sqrtf(dvarv);
 800121a:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 800121e:	f008 fca7 	bl	8009b70 <sqrtf>
 8001222:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44

    // in16_t scaling for tflite cmopatibility
    float scale_factor = 32767.0f;
 8001226:	4b56      	ldr	r3, [pc, #344]	@ (8001380 <calculate_features+0x448>)
 8001228:	617b      	str	r3, [r7, #20]
    features[0] = (int16_t)(iemg / scale_factor);
 800122a:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 800122e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800123a:	ee17 3a90 	vmov	r3, s15
 800123e:	b21a      	sxth	r2, r3
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	801a      	strh	r2, [r3, #0]
    features[1] = (int16_t)(mav * scale_factor);
 8001244:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001248:	edd7 7a05 	vldr	s15, [r7, #20]
 800124c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	3302      	adds	r3, #2
 8001254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001258:	ee17 2a90 	vmov	r2, s15
 800125c:	b212      	sxth	r2, r2
 800125e:	801a      	strh	r2, [r3, #0]
    features[2] = (int16_t)(ssi / scale_factor);
 8001260:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8001264:	ed97 7a05 	vldr	s14, [r7, #20]
 8001268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	3304      	adds	r3, #4
 8001270:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001274:	ee17 2a90 	vmov	r2, s15
 8001278:	b212      	sxth	r2, r2
 800127a:	801a      	strh	r2, [r3, #0]
    features[3] = (int16_t)(rms * scale_factor);
 800127c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001280:	edd7 7a05 	vldr	s15, [r7, #20]
 8001284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	3306      	adds	r3, #6
 800128c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001290:	ee17 2a90 	vmov	r2, s15
 8001294:	b212      	sxth	r2, r2
 8001296:	801a      	strh	r2, [r3, #0]
    features[4] = (int16_t)(variance * scale_factor);
 8001298:	ed97 7a08 	vldr	s14, [r7, #32]
 800129c:	edd7 7a05 	vldr	s15, [r7, #20]
 80012a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	3308      	adds	r3, #8
 80012a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ac:	ee17 2a90 	vmov	r2, s15
 80012b0:	b212      	sxth	r2, r2
 80012b2:	801a      	strh	r2, [r3, #0]
    features[5] = (int16_t)(myop * scale_factor);
 80012b4:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80012b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	330a      	adds	r3, #10
 80012c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c8:	ee17 2a90 	vmov	r2, s15
 80012cc:	b212      	sxth	r2, r2
 80012ce:	801a      	strh	r2, [r3, #0]
    features[6] = (int16_t)(wl / scale_factor);
 80012d0:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80012d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80012d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	330c      	adds	r3, #12
 80012e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e4:	ee17 2a90 	vmov	r2, s15
 80012e8:	b212      	sxth	r2, r2
 80012ea:	801a      	strh	r2, [r3, #0]
    features[7] = (int16_t)(damv * scale_factor);
 80012ec:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80012f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	330e      	adds	r3, #14
 80012fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001300:	ee17 2a90 	vmov	r2, s15
 8001304:	b212      	sxth	r2, r2
 8001306:	801a      	strh	r2, [r3, #0]
    features[8] = (int16_t)(m2 / scale_factor);
 8001308:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 800130c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	3310      	adds	r3, #16
 8001318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800131c:	ee17 2a90 	vmov	r2, s15
 8001320:	b212      	sxth	r2, r2
 8001322:	801a      	strh	r2, [r3, #0]
    features[9] = (int16_t)(dvarv * scale_factor);
 8001324:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001328:	edd7 7a05 	vldr	s15, [r7, #20]
 800132c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	3312      	adds	r3, #18
 8001334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001338:	ee17 2a90 	vmov	r2, s15
 800133c:	b212      	sxth	r2, r2
 800133e:	801a      	strh	r2, [r3, #0]
    features[10] = (int16_t)(dasdv * scale_factor);
 8001340:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001344:	edd7 7a05 	vldr	s15, [r7, #20]
 8001348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	3314      	adds	r3, #20
 8001350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001354:	ee17 2a90 	vmov	r2, s15
 8001358:	b212      	sxth	r2, r2
 800135a:	801a      	strh	r2, [r3, #0]
    features[11] = (int16_t)(wamp * scale_factor);
 800135c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001360:	edd7 7a05 	vldr	s15, [r7, #20]
 8001364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	3316      	adds	r3, #22
 800136c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001370:	ee17 2a90 	vmov	r2, s15
 8001374:	b212      	sxth	r2, r2
 8001376:	801a      	strh	r2, [r3, #0]
}
 8001378:	bf00      	nop
 800137a:	3768      	adds	r7, #104	@ 0x68
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	46fffe00 	.word	0x46fffe00

08001384 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <MX_GPIO_Init+0x44>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	4a0e      	ldr	r2, [pc, #56]	@ (80013c8 <MX_GPIO_Init+0x44>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <MX_GPIO_Init+0x44>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013a2:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <MX_GPIO_Init+0x44>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	4a08      	ldr	r2, [pc, #32]	@ (80013c8 <MX_GPIO_Init+0x44>)
 80013a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <MX_GPIO_Init+0x44>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80013ba:	f001 f9e3 	bl	8002784 <HAL_PWREx_EnableVddIO2>

}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000

080013cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001444 <MX_I2C1_Init+0x78>)
 80013d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001448 <MX_I2C1_Init+0x7c>)
 80013da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013dc:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e2:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e8:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013ee:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013f4:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001400:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <MX_I2C1_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001406:	480e      	ldr	r0, [pc, #56]	@ (8001440 <MX_I2C1_Init+0x74>)
 8001408:	f000 fee2 	bl	80021d0 <HAL_I2C_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001412:	f000 f902 	bl	800161a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001416:	2100      	movs	r1, #0
 8001418:	4809      	ldr	r0, [pc, #36]	@ (8001440 <MX_I2C1_Init+0x74>)
 800141a:	f000 ff74 	bl	8002306 <HAL_I2CEx_ConfigAnalogFilter>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001424:	f000 f8f9 	bl	800161a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001428:	2100      	movs	r1, #0
 800142a:	4805      	ldr	r0, [pc, #20]	@ (8001440 <MX_I2C1_Init+0x74>)
 800142c:	f000 ffb6 	bl	800239c <HAL_I2CEx_ConfigDigitalFilter>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001436:	f000 f8f0 	bl	800161a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000b1c 	.word	0x20000b1c
 8001444:	40005400 	.word	0x40005400
 8001448:	10d19ce4 	.word	0x10d19ce4

0800144c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b0ac      	sub	sp, #176	@ 0xb0
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	228c      	movs	r2, #140	@ 0x8c
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f006 fd6d 	bl	8007f4c <memset>
  if(i2cHandle->Instance==I2C1)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a22      	ldr	r2, [pc, #136]	@ (8001500 <HAL_I2C_MspInit+0xb4>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d13d      	bne.n	80014f8 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800147c:	2340      	movs	r3, #64	@ 0x40
 800147e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001480:	2300      	movs	r3, #0
 8001482:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	4618      	mov	r0, r3
 800148a:	f001 ffc9 	bl	8003420 <HAL_RCCEx_PeriphCLKConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001494:	f000 f8c1 	bl	800161a <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001498:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <HAL_I2C_MspInit+0xb8>)
 800149a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149c:	4a19      	ldr	r2, [pc, #100]	@ (8001504 <HAL_I2C_MspInit+0xb8>)
 800149e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a4:	4b17      	ldr	r3, [pc, #92]	@ (8001504 <HAL_I2C_MspInit+0xb8>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80014b0:	f001 f968 	bl	8002784 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80014b4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80014b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014bc:	2312      	movs	r3, #18
 80014be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ce:	2304      	movs	r3, #4
 80014d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014d8:	4619      	mov	r1, r3
 80014da:	480b      	ldr	r0, [pc, #44]	@ (8001508 <HAL_I2C_MspInit+0xbc>)
 80014dc:	f000 fce6 	bl	8001eac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014e0:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <HAL_I2C_MspInit+0xb8>)
 80014e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e4:	4a07      	ldr	r2, [pc, #28]	@ (8001504 <HAL_I2C_MspInit+0xb8>)
 80014e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <HAL_I2C_MspInit+0xb8>)
 80014ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014f8:	bf00      	nop
 80014fa:	37b0      	adds	r7, #176	@ 0xb0
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40005400 	.word	0x40005400
 8001504:	40021000 	.word	0x40021000
 8001508:	48001800 	.word	0x48001800

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	f6ad 1d78 	subw	sp, sp, #2424	@ 0x978
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int16_t adc_processed[400];
	    int16_t features[12];

	    const int32_t adc_raw[400] = {0x23A966, 0x23A966, 0x23A966, 0x23A965, 0x23A964,
 8001514:	f607 1378 	addw	r3, r7, #2424	@ 0x978
 8001518:	f6a3 1378 	subw	r3, r3, #2424	@ 0x978
 800151c:	4a14      	ldr	r2, [pc, #80]	@ (8001570 <main+0x64>)
 800151e:	4618      	mov	r0, r3
 8001520:	4611      	mov	r1, r2
 8001522:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8001526:	461a      	mov	r2, r3
 8001528:	f006 fd9f 	bl	800806a <memcpy>
				0x23A964, 0x23A962, 0x23A962, 0x23A963, 0x23A964, 0x23A965, 0x23A966, 0x23A963,
				0x23A95F, 0x23A95E, 0x23A95E, 0x23A95E, 0x23A95E, 0x23A95E, 0x23A960, 0x23A962,
				0x23A964, 0x23A965, 0x23A966};


	    convert_adc_data(adc_raw, adc_processed);
 800152c:	f507 62cb 	add.w	r2, r7, #1624	@ 0x658
 8001530:	463b      	mov	r3, r7
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fcdd 	bl	8000ef4 <convert_adc_data>


	    calculate_features(adc_processed, features);
 800153a:	f507 62c8 	add.w	r2, r7, #1600	@ 0x640
 800153e:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fcf7 	bl	8000f38 <calculate_features>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800154a:	f000 fb29 	bl	8001ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800154e:	f000 f811 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001552:	f7ff ff17 	bl	8001384 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001556:	f7ff ff39 	bl	80013cc <MX_I2C1_Init>
  MX_SPI1_Init();
 800155a:	f000 f865 	bl	8001628 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800155e:	f000 f9bf 	bl	80018e0 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001562:	f000 fa4b 	bl	80019fc <MX_USB_OTG_FS_PCD_Init>
  MX_X_CUBE_AI_Init();
 8001566:	f003 fd5d 	bl	8005024 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 800156a:	f003 fd69 	bl	8005040 <MX_X_CUBE_AI_Process>
 800156e:	e7fc      	b.n	800156a <main+0x5e>
 8001570:	08009e00 	.word	0x08009e00

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b096      	sub	sp, #88	@ 0x58
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	2244      	movs	r2, #68	@ 0x44
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f006 fce2 	bl	8007f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	463b      	mov	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001596:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800159a:	f001 f88d 	bl	80026b8 <HAL_PWREx_ControlVoltageScaling>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015a4:	f000 f839 	bl	800161a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80015a8:	2322      	movs	r3, #34	@ 0x22
 80015aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80015b2:	2301      	movs	r3, #1
 80015b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b6:	2340      	movs	r3, #64	@ 0x40
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ba:	2302      	movs	r3, #2
 80015bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015be:	2302      	movs	r3, #2
 80015c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015c2:	2301      	movs	r3, #1
 80015c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015c6:	230a      	movs	r3, #10
 80015c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ca:	2302      	movs	r3, #2
 80015cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015ce:	2302      	movs	r3, #2
 80015d0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015d2:	2302      	movs	r3, #2
 80015d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4618      	mov	r0, r3
 80015dc:	f001 f8e2 	bl	80027a4 <HAL_RCC_OscConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x76>
  {
    Error_Handler();
 80015e6:	f000 f818 	bl	800161a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ea:	230f      	movs	r3, #15
 80015ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ee:	2303      	movs	r3, #3
 80015f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015fe:	463b      	mov	r3, r7
 8001600:	2104      	movs	r1, #4
 8001602:	4618      	mov	r0, r3
 8001604:	f001 fce8 	bl	8002fd8 <HAL_RCC_ClockConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800160e:	f000 f804 	bl	800161a <Error_Handler>
  }
}
 8001612:	bf00      	nop
 8001614:	3758      	adds	r7, #88	@ 0x58
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800161e:	b672      	cpsid	i
}
 8001620:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001622:	bf00      	nop
 8001624:	e7fd      	b.n	8001622 <Error_Handler+0x8>
	...

08001628 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800162c:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <MX_SPI1_Init+0x74>)
 800162e:	4a1c      	ldr	r2, [pc, #112]	@ (80016a0 <MX_SPI1_Init+0x78>)
 8001630:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001632:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <MX_SPI1_Init+0x74>)
 8001634:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001638:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800163a:	4b18      	ldr	r3, [pc, #96]	@ (800169c <MX_SPI1_Init+0x74>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001640:	4b16      	ldr	r3, [pc, #88]	@ (800169c <MX_SPI1_Init+0x74>)
 8001642:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001646:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001648:	4b14      	ldr	r3, [pc, #80]	@ (800169c <MX_SPI1_Init+0x74>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800164e:	4b13      	ldr	r3, [pc, #76]	@ (800169c <MX_SPI1_Init+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001654:	4b11      	ldr	r3, [pc, #68]	@ (800169c <MX_SPI1_Init+0x74>)
 8001656:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800165a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800165c:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <MX_SPI1_Init+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001662:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <MX_SPI1_Init+0x74>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001668:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <MX_SPI1_Init+0x74>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800166e:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <MX_SPI1_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001674:	4b09      	ldr	r3, [pc, #36]	@ (800169c <MX_SPI1_Init+0x74>)
 8001676:	2207      	movs	r2, #7
 8001678:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800167a:	4b08      	ldr	r3, [pc, #32]	@ (800169c <MX_SPI1_Init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <MX_SPI1_Init+0x74>)
 8001682:	2208      	movs	r2, #8
 8001684:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	@ (800169c <MX_SPI1_Init+0x74>)
 8001688:	f002 fb94 	bl	8003db4 <HAL_SPI_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001692:	f7ff ffc2 	bl	800161a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000b70 	.word	0x20000b70
 80016a0:	40013000 	.word	0x40013000

080016a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	@ 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a17      	ldr	r2, [pc, #92]	@ (8001720 <HAL_SPI_MspInit+0x7c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d128      	bne.n	8001718 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016c6:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <HAL_SPI_MspInit+0x80>)
 80016c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ca:	4a16      	ldr	r2, [pc, #88]	@ (8001724 <HAL_SPI_MspInit+0x80>)
 80016cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80016d2:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <HAL_SPI_MspInit+0x80>)
 80016d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <HAL_SPI_MspInit+0x80>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e2:	4a10      	ldr	r2, [pc, #64]	@ (8001724 <HAL_SPI_MspInit+0x80>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <HAL_SPI_MspInit+0x80>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80016f6:	23c2      	movs	r3, #194	@ 0xc2
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001706:	2305      	movs	r3, #5
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001714:	f000 fbca 	bl	8001eac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001718:	bf00      	nop
 800171a:	3728      	adds	r7, #40	@ 0x28
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40013000 	.word	0x40013000
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <HAL_MspInit+0x44>)
 8001730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001732:	4a0e      	ldr	r2, [pc, #56]	@ (800176c <HAL_MspInit+0x44>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6613      	str	r3, [r2, #96]	@ 0x60
 800173a:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <HAL_MspInit+0x44>)
 800173c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <HAL_MspInit+0x44>)
 8001748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174a:	4a08      	ldr	r2, [pc, #32]	@ (800176c <HAL_MspInit+0x44>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001750:	6593      	str	r3, [r2, #88]	@ 0x58
 8001752:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_MspInit+0x44>)
 8001754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <NMI_Handler+0x4>

08001778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <HardFault_Handler+0x4>

08001780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <MemManage_Handler+0x4>

08001788 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <BusFault_Handler+0x4>

08001790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <UsageFault_Handler+0x4>

08001798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c6:	f000 fa47 	bl	8001c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_close>:
#include <unistd.h>
#include "cmsis_gcc.h"

#include <cmsis_gcc.h>

int _close(int file) {
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
    return -1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <_fstat>:

int _fstat(int file, struct stat *st) {
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017f6:	605a      	str	r2, [r3, #4]
    return 0;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_isatty>:

int _isatty(int file) {
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
    return 1;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
    return 0;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <_read>:

int _read(int file, char *ptr, int len) {
 8001836:	b480      	push	{r7}
 8001838:	b085      	sub	sp, #20
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
    return 0;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001858:	4a14      	ldr	r2, [pc, #80]	@ (80018ac <_sbrk+0x5c>)
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <_sbrk+0x60>)
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001864:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	@ (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001880:	f006 fbc6 	bl	8008010 <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4a05      	ldr	r2, [pc, #20]	@ (80018b4 <_sbrk+0x64>)
 80018a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20040000 	.word	0x20040000
 80018b0:	00000800 	.word	0x00000800
 80018b4:	20000bd4 	.word	0x20000bd4
 80018b8:	20001528 	.word	0x20001528

080018bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018c0:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <SystemInit+0x20>)
 80018c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c6:	4a05      	ldr	r2, [pc, #20]	@ (80018dc <SystemInit+0x20>)
 80018c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018e4:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <MX_USART1_UART_Init+0x58>)
 80018e6:	4a15      	ldr	r2, [pc, #84]	@ (800193c <MX_USART1_UART_Init+0x5c>)
 80018e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018ea:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <MX_USART1_UART_Init+0x58>)
 80018ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018f2:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <MX_USART1_UART_Init+0x58>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <MX_USART1_UART_Init+0x58>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <MX_USART1_UART_Init+0x58>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001904:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <MX_USART1_UART_Init+0x58>)
 8001906:	220c      	movs	r2, #12
 8001908:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190a:	4b0b      	ldr	r3, [pc, #44]	@ (8001938 <MX_USART1_UART_Init+0x58>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001910:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <MX_USART1_UART_Init+0x58>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001916:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <MX_USART1_UART_Init+0x58>)
 8001918:	2200      	movs	r2, #0
 800191a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800191c:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <MX_USART1_UART_Init+0x58>)
 800191e:	2200      	movs	r2, #0
 8001920:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	@ (8001938 <MX_USART1_UART_Init+0x58>)
 8001924:	f002 fae9 	bl	8003efa <HAL_UART_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800192e:	f7ff fe74 	bl	800161a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000bd8 	.word	0x20000bd8
 800193c:	40013800 	.word	0x40013800

08001940 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b0ac      	sub	sp, #176	@ 0xb0
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	228c      	movs	r2, #140	@ 0x8c
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f006 faf3 	bl	8007f4c <memset>
  if(uartHandle->Instance==USART1)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a22      	ldr	r2, [pc, #136]	@ (80019f4 <HAL_UART_MspInit+0xb4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d13c      	bne.n	80019ea <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001970:	2301      	movs	r3, #1
 8001972:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001974:	2300      	movs	r3, #0
 8001976:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001978:	f107 0310 	add.w	r3, r7, #16
 800197c:	4618      	mov	r0, r3
 800197e:	f001 fd4f 	bl	8003420 <HAL_RCCEx_PeriphCLKConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001988:	f7ff fe47 	bl	800161a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800198c:	4b1a      	ldr	r3, [pc, #104]	@ (80019f8 <HAL_UART_MspInit+0xb8>)
 800198e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001990:	4a19      	ldr	r2, [pc, #100]	@ (80019f8 <HAL_UART_MspInit+0xb8>)
 8001992:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001996:	6613      	str	r3, [r2, #96]	@ 0x60
 8001998:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <HAL_UART_MspInit+0xb8>)
 800199a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a4:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <HAL_UART_MspInit+0xb8>)
 80019a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a8:	4a13      	ldr	r2, [pc, #76]	@ (80019f8 <HAL_UART_MspInit+0xb8>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019b0:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <HAL_UART_MspInit+0xb8>)
 80019b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019bc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019d6:	2307      	movs	r3, #7
 80019d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019e0:	4619      	mov	r1, r3
 80019e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019e6:	f000 fa61 	bl	8001eac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80019ea:	bf00      	nop
 80019ec:	37b0      	adds	r7, #176	@ 0xb0
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40013800 	.word	0x40013800
 80019f8:	40021000 	.word	0x40021000

080019fc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a00:	4b14      	ldr	r3, [pc, #80]	@ (8001a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a02:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001a06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001a08:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a0a:	2206      	movs	r2, #6
 8001a0c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a0e:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a10:	2202      	movs	r2, #2
 8001a12:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a16:	2202      	movs	r2, #2
 8001a18:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a32:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a3e:	4805      	ldr	r0, [pc, #20]	@ (8001a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a40:	f000 fcf8 	bl	8002434 <HAL_PCD_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001a4a:	f7ff fde6 	bl	800161a <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000c60 	.word	0x20000c60

08001a58 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b0ae      	sub	sp, #184	@ 0xb8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a70:	f107 0318 	add.w	r3, r7, #24
 8001a74:	228c      	movs	r2, #140	@ 0x8c
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f006 fa67 	bl	8007f4c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a86:	d15b      	bne.n	8001b40 <HAL_PCD_MspInit+0xe8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001a88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a94:	f107 0318 	add.w	r3, r7, #24
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f001 fcc1 	bl	8003420 <HAL_RCCEx_PeriphCLKConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001aa4:	f7ff fdb9 	bl	800161a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa8:	4b27      	ldr	r3, [pc, #156]	@ (8001b48 <HAL_PCD_MspInit+0xf0>)
 8001aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aac:	4a26      	ldr	r2, [pc, #152]	@ (8001b48 <HAL_PCD_MspInit+0xf0>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ab4:	4b24      	ldr	r3, [pc, #144]	@ (8001b48 <HAL_PCD_MspInit+0xf0>)
 8001ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ac0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001ac4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ada:	230a      	movs	r3, #10
 8001adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aea:	f000 f9df 	bl	8001eac <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001aee:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <HAL_PCD_MspInit+0xf0>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af2:	4a15      	ldr	r2, [pc, #84]	@ (8001b48 <HAL_PCD_MspInit+0xf0>)
 8001af4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001afa:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <HAL_PCD_MspInit+0xf0>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b06:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <HAL_PCD_MspInit+0xf0>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d114      	bne.n	8001b3c <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	4b0d      	ldr	r3, [pc, #52]	@ (8001b48 <HAL_PCD_MspInit+0xf0>)
 8001b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b16:	4a0c      	ldr	r2, [pc, #48]	@ (8001b48 <HAL_PCD_MspInit+0xf0>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <HAL_PCD_MspInit+0xf0>)
 8001b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001b2a:	f000 fe1b 	bl	8002764 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <HAL_PCD_MspInit+0xf0>)
 8001b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b32:	4a05      	ldr	r2, [pc, #20]	@ (8001b48 <HAL_PCD_MspInit+0xf0>)
 8001b34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b38:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001b3a:	e001      	b.n	8001b40 <HAL_PCD_MspInit+0xe8>
      HAL_PWREx_EnableVddUSB();
 8001b3c:	f000 fe12 	bl	8002764 <HAL_PWREx_EnableVddUSB>
}
 8001b40:	bf00      	nop
 8001b42:	37b8      	adds	r7, #184	@ 0xb8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000

08001b4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b50:	f7ff feb4 	bl	80018bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b54:	480c      	ldr	r0, [pc, #48]	@ (8001b88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b56:	490d      	ldr	r1, [pc, #52]	@ (8001b8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b58:	4a0d      	ldr	r2, [pc, #52]	@ (8001b90 <LoopForever+0xe>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b5c:	e002      	b.n	8001b64 <LoopCopyDataInit>

08001b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b62:	3304      	adds	r3, #4

08001b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b68:	d3f9      	bcc.n	8001b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b98 <LoopForever+0x16>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b70:	e001      	b.n	8001b76 <LoopFillZerobss>

08001b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b74:	3204      	adds	r2, #4

08001b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b78:	d3fb      	bcc.n	8001b72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f006 fa4f 	bl	800801c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b7e:	f7ff fcc5 	bl	800150c <main>

08001b82 <LoopForever>:

LoopForever:
    b LoopForever
 8001b82:	e7fe      	b.n	8001b82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b84:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	20000aec 	.word	0x20000aec
  ldr r2, =_sidata
 8001b90:	08011234 	.word	0x08011234
  ldr r2, =_sbss
 8001b94:	20000b00 	.word	0x20000b00
  ldr r4, =_ebss
 8001b98:	20001528 	.word	0x20001528

08001b9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC1_2_IRQHandler>
	...

08001ba0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001baa:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <HAL_Init+0x3c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a0b      	ldr	r2, [pc, #44]	@ (8001bdc <HAL_Init+0x3c>)
 8001bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bb4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb6:	2003      	movs	r0, #3
 8001bb8:	f000 f944 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bbc:	200f      	movs	r0, #15
 8001bbe:	f000 f80f 	bl	8001be0 <HAL_InitTick>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	71fb      	strb	r3, [r7, #7]
 8001bcc:	e001      	b.n	8001bd2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bce:	f7ff fdab 	bl	8001728 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40022000 	.word	0x40022000

08001be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bec:	4b17      	ldr	r3, [pc, #92]	@ (8001c4c <HAL_InitTick+0x6c>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d023      	beq.n	8001c3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bf4:	4b16      	ldr	r3, [pc, #88]	@ (8001c50 <HAL_InitTick+0x70>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b14      	ldr	r3, [pc, #80]	@ (8001c4c <HAL_InitTick+0x6c>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f941 	bl	8001e92 <HAL_SYSTICK_Config>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10f      	bne.n	8001c36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d809      	bhi.n	8001c30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f000 f919 	bl	8001e5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c28:	4a0a      	ldr	r2, [pc, #40]	@ (8001c54 <HAL_InitTick+0x74>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e007      	b.n	8001c40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	73fb      	strb	r3, [r7, #15]
 8001c34:	e004      	b.n	8001c40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	73fb      	strb	r3, [r7, #15]
 8001c3a:	e001      	b.n	8001c40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000008 	.word	0x20000008
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000004 	.word	0x20000004

08001c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <HAL_IncTick+0x20>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <HAL_IncTick+0x24>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	4a04      	ldr	r2, [pc, #16]	@ (8001c7c <HAL_IncTick+0x24>)
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000008 	.word	0x20000008
 8001c7c:	20001144 	.word	0x20001144

08001c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return uwTick;
 8001c84:	4b03      	ldr	r3, [pc, #12]	@ (8001c94 <HAL_GetTick+0x14>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20001144 	.word	0x20001144

08001c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff ffee 	bl	8001c80 <HAL_GetTick>
 8001ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d005      	beq.n	8001cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cdc <HAL_Delay+0x44>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cbe:	bf00      	nop
 8001cc0:	f7ff ffde 	bl	8001c80 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d8f7      	bhi.n	8001cc0 <HAL_Delay+0x28>
  {
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000008 	.word	0x20000008

08001ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d12:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	60d3      	str	r3, [r2, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	@ (8001d40 <__NVIC_GetPriorityGrouping+0x18>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 0307 	and.w	r3, r3, #7
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	db0a      	blt.n	8001d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	490c      	ldr	r1, [pc, #48]	@ (8001d90 <__NVIC_SetPriority+0x4c>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d6c:	e00a      	b.n	8001d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4908      	ldr	r1, [pc, #32]	@ (8001d94 <__NVIC_SetPriority+0x50>)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	3b04      	subs	r3, #4
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	440b      	add	r3, r1
 8001d82:	761a      	strb	r2, [r3, #24]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000e100 	.word	0xe000e100
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	@ 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f1c3 0307 	rsb	r3, r3, #7
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	bf28      	it	cs
 8001db6:	2304      	movcs	r3, #4
 8001db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d902      	bls.n	8001dc8 <NVIC_EncodePriority+0x30>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3b03      	subs	r3, #3
 8001dc6:	e000      	b.n	8001dca <NVIC_EncodePriority+0x32>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	401a      	ands	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	43d9      	mvns	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	4313      	orrs	r3, r2
         );
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3724      	adds	r7, #36	@ 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e16:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	f7ff ff8e 	bl	8001d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff47 	bl	8001ce0 <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff5c 	bl	8001d28 <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff8e 	bl	8001d98 <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5d 	bl	8001d44 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffb0 	bl	8001e00 <SysTick_Config>
 8001ea0:	4603      	mov	r3, r0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eba:	e166      	b.n	800218a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8158 	beq.w	8002184 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d005      	beq.n	8001eec <HAL_GPIO_Init+0x40>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d130      	bne.n	8001f4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f22:	2201      	movs	r2, #1
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	091b      	lsrs	r3, r3, #4
 8001f38:	f003 0201 	and.w	r2, r3, #1
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d017      	beq.n	8001f8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	2203      	movs	r2, #3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d123      	bne.n	8001fde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	08da      	lsrs	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3208      	adds	r2, #8
 8001f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	220f      	movs	r2, #15
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	08da      	lsrs	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3208      	adds	r2, #8
 8001fd8:	6939      	ldr	r1, [r7, #16]
 8001fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0203 	and.w	r2, r3, #3
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80b2 	beq.w	8002184 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002020:	4b61      	ldr	r3, [pc, #388]	@ (80021a8 <HAL_GPIO_Init+0x2fc>)
 8002022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002024:	4a60      	ldr	r2, [pc, #384]	@ (80021a8 <HAL_GPIO_Init+0x2fc>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6613      	str	r3, [r2, #96]	@ 0x60
 800202c:	4b5e      	ldr	r3, [pc, #376]	@ (80021a8 <HAL_GPIO_Init+0x2fc>)
 800202e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002038:	4a5c      	ldr	r2, [pc, #368]	@ (80021ac <HAL_GPIO_Init+0x300>)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	3302      	adds	r3, #2
 8002040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	220f      	movs	r2, #15
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002062:	d02b      	beq.n	80020bc <HAL_GPIO_Init+0x210>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a52      	ldr	r2, [pc, #328]	@ (80021b0 <HAL_GPIO_Init+0x304>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d025      	beq.n	80020b8 <HAL_GPIO_Init+0x20c>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a51      	ldr	r2, [pc, #324]	@ (80021b4 <HAL_GPIO_Init+0x308>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d01f      	beq.n	80020b4 <HAL_GPIO_Init+0x208>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a50      	ldr	r2, [pc, #320]	@ (80021b8 <HAL_GPIO_Init+0x30c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d019      	beq.n	80020b0 <HAL_GPIO_Init+0x204>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a4f      	ldr	r2, [pc, #316]	@ (80021bc <HAL_GPIO_Init+0x310>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d013      	beq.n	80020ac <HAL_GPIO_Init+0x200>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a4e      	ldr	r2, [pc, #312]	@ (80021c0 <HAL_GPIO_Init+0x314>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00d      	beq.n	80020a8 <HAL_GPIO_Init+0x1fc>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a4d      	ldr	r2, [pc, #308]	@ (80021c4 <HAL_GPIO_Init+0x318>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d007      	beq.n	80020a4 <HAL_GPIO_Init+0x1f8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a4c      	ldr	r2, [pc, #304]	@ (80021c8 <HAL_GPIO_Init+0x31c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <HAL_GPIO_Init+0x1f4>
 800209c:	2307      	movs	r3, #7
 800209e:	e00e      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020a0:	2308      	movs	r3, #8
 80020a2:	e00c      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020a4:	2306      	movs	r3, #6
 80020a6:	e00a      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020a8:	2305      	movs	r3, #5
 80020aa:	e008      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020ac:	2304      	movs	r3, #4
 80020ae:	e006      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020b0:	2303      	movs	r3, #3
 80020b2:	e004      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e002      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <HAL_GPIO_Init+0x212>
 80020bc:	2300      	movs	r3, #0
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	f002 0203 	and.w	r2, r2, #3
 80020c4:	0092      	lsls	r2, r2, #2
 80020c6:	4093      	lsls	r3, r2
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020ce:	4937      	ldr	r1, [pc, #220]	@ (80021ac <HAL_GPIO_Init+0x300>)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	3302      	adds	r3, #2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020dc:	4b3b      	ldr	r3, [pc, #236]	@ (80021cc <HAL_GPIO_Init+0x320>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002100:	4a32      	ldr	r2, [pc, #200]	@ (80021cc <HAL_GPIO_Init+0x320>)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002106:	4b31      	ldr	r3, [pc, #196]	@ (80021cc <HAL_GPIO_Init+0x320>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	43db      	mvns	r3, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4013      	ands	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800212a:	4a28      	ldr	r2, [pc, #160]	@ (80021cc <HAL_GPIO_Init+0x320>)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002130:	4b26      	ldr	r3, [pc, #152]	@ (80021cc <HAL_GPIO_Init+0x320>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	43db      	mvns	r3, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002154:	4a1d      	ldr	r2, [pc, #116]	@ (80021cc <HAL_GPIO_Init+0x320>)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800215a:	4b1c      	ldr	r3, [pc, #112]	@ (80021cc <HAL_GPIO_Init+0x320>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	43db      	mvns	r3, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800217e:	4a13      	ldr	r2, [pc, #76]	@ (80021cc <HAL_GPIO_Init+0x320>)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	3301      	adds	r3, #1
 8002188:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	f47f ae91 	bne.w	8001ebc <HAL_GPIO_Init+0x10>
  }
}
 800219a:	bf00      	nop
 800219c:	bf00      	nop
 800219e:	371c      	adds	r7, #28
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40010000 	.word	0x40010000
 80021b0:	48000400 	.word	0x48000400
 80021b4:	48000800 	.word	0x48000800
 80021b8:	48000c00 	.word	0x48000c00
 80021bc:	48001000 	.word	0x48001000
 80021c0:	48001400 	.word	0x48001400
 80021c4:	48001800 	.word	0x48001800
 80021c8:	48001c00 	.word	0x48001c00
 80021cc:	40010400 	.word	0x40010400

080021d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e08d      	b.n	80022fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d106      	bne.n	80021fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff f928 	bl	800144c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2224      	movs	r2, #36	@ 0x24
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0201 	bic.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002220:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002230:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d107      	bne.n	800224a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	e006      	b.n	8002258 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002256:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d108      	bne.n	8002272 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	e007      	b.n	8002282 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002280:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002290:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002294:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691a      	ldr	r2, [r3, #16]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69d9      	ldr	r1, [r3, #28]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1a      	ldr	r2, [r3, #32]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0201 	orr.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2220      	movs	r2, #32
 80022ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b20      	cmp	r3, #32
 800231a:	d138      	bne.n	800238e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002326:	2302      	movs	r3, #2
 8002328:	e032      	b.n	8002390 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2224      	movs	r2, #36	@ 0x24
 8002336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0201 	bic.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002358:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6819      	ldr	r1, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 0201 	orr.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	e000      	b.n	8002390 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800238e:	2302      	movs	r3, #2
  }
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d139      	bne.n	8002426 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023bc:	2302      	movs	r3, #2
 80023be:	e033      	b.n	8002428 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2224      	movs	r2, #36	@ 0x24
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	021b      	lsls	r3, r3, #8
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0201 	orr.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2220      	movs	r2, #32
 8002416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	e000      	b.n	8002428 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002426:	2302      	movs	r3, #2
  }
}
 8002428:	4618      	mov	r0, r3
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af02      	add	r7, sp, #8
 800243a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e101      	b.n	800264a <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d106      	bne.n	8002460 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff fafc 	bl	8001a58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2203      	movs	r2, #3
 8002464:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f002 fa90 	bl	8004998 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7c1a      	ldrb	r2, [r3, #16]
 8002480:	f88d 2000 	strb.w	r2, [sp]
 8002484:	3304      	adds	r3, #4
 8002486:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002488:	f002 fa59 	bl	800493e <USB_CoreInit>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2202      	movs	r2, #2
 8002496:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0d5      	b.n	800264a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2100      	movs	r1, #0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f002 fa88 	bl	80049ba <USB_SetCurrentMode>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0c6      	b.n	800264a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
 80024c0:	e04a      	b.n	8002558 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024c2:	7bfa      	ldrb	r2, [r7, #15]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	3315      	adds	r3, #21
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	3314      	adds	r3, #20
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024ea:	7bfa      	ldrb	r2, [r7, #15]
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	b298      	uxth	r0, r3
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	4613      	mov	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4413      	add	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	440b      	add	r3, r1
 80024fc:	332e      	adds	r3, #46	@ 0x2e
 80024fe:	4602      	mov	r2, r0
 8002500:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002502:	7bfa      	ldrb	r2, [r7, #15]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	3318      	adds	r3, #24
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002516:	7bfa      	ldrb	r2, [r7, #15]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	331c      	adds	r3, #28
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	3320      	adds	r3, #32
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	3324      	adds	r3, #36	@ 0x24
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	3301      	adds	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	791b      	ldrb	r3, [r3, #4]
 800255c:	7bfa      	ldrb	r2, [r7, #15]
 800255e:	429a      	cmp	r2, r3
 8002560:	d3af      	bcc.n	80024c2 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002562:	2300      	movs	r3, #0
 8002564:	73fb      	strb	r3, [r7, #15]
 8002566:	e044      	b.n	80025f2 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002568:	7bfa      	ldrb	r2, [r7, #15]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4413      	add	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002590:	7bfa      	ldrb	r2, [r7, #15]
 8002592:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002594:	7bfa      	ldrb	r2, [r7, #15]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4413      	add	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025c0:	7bfa      	ldrb	r2, [r7, #15]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	3301      	adds	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	791b      	ldrb	r3, [r3, #4]
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d3b5      	bcc.n	8002568 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	7c1a      	ldrb	r2, [r3, #16]
 8002604:	f88d 2000 	strb.w	r2, [sp]
 8002608:	3304      	adds	r3, #4
 800260a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800260c:	f002 fa22 	bl	8004a54 <USB_DevInit>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2202      	movs	r2, #2
 800261a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e013      	b.n	800264a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7b1b      	ldrb	r3, [r3, #12]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d102      	bne.n	800263e <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f80a 	bl	8002652 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f002 fbc7 	bl	8004dd6 <USB_DevDisconnect>

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002652:	b480      	push	{r7}
 8002654:	b085      	sub	sp, #20
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002684:	f043 0303 	orr.w	r3, r3, #3
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
	...

0800269c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026a0:	4b04      	ldr	r3, [pc, #16]	@ (80026b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40007000 	.word	0x40007000

080026b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026c6:	d130      	bne.n	800272a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026c8:	4b23      	ldr	r3, [pc, #140]	@ (8002758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026d4:	d038      	beq.n	8002748 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026d6:	4b20      	ldr	r3, [pc, #128]	@ (8002758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026de:	4a1e      	ldr	r2, [pc, #120]	@ (8002758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026e6:	4b1d      	ldr	r3, [pc, #116]	@ (800275c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2232      	movs	r2, #50	@ 0x32
 80026ec:	fb02 f303 	mul.w	r3, r2, r3
 80026f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002760 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0c9b      	lsrs	r3, r3, #18
 80026f8:	3301      	adds	r3, #1
 80026fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026fc:	e002      	b.n	8002704 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	3b01      	subs	r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002704:	4b14      	ldr	r3, [pc, #80]	@ (8002758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800270c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002710:	d102      	bne.n	8002718 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f2      	bne.n	80026fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002718:	4b0f      	ldr	r3, [pc, #60]	@ (8002758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002720:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002724:	d110      	bne.n	8002748 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e00f      	b.n	800274a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800272a:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002736:	d007      	beq.n	8002748 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002738:	4b07      	ldr	r3, [pc, #28]	@ (8002758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002740:	4a05      	ldr	r2, [pc, #20]	@ (8002758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002742:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002746:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40007000 	.word	0x40007000
 800275c:	20000000 	.word	0x20000000
 8002760:	431bde83 	.word	0x431bde83

08002764 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002768:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <HAL_PWREx_EnableVddUSB+0x1c>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4a04      	ldr	r2, [pc, #16]	@ (8002780 <HAL_PWREx_EnableVddUSB+0x1c>)
 800276e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002772:	6053      	str	r3, [r2, #4]
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40007000 	.word	0x40007000

08002784 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002788:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a04      	ldr	r2, [pc, #16]	@ (80027a0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800278e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002792:	6053      	str	r3, [r2, #4]
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40007000 	.word	0x40007000

080027a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d102      	bne.n	80027b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f000 bc08 	b.w	8002fc8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b8:	4b96      	ldr	r3, [pc, #600]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027c2:	4b94      	ldr	r3, [pc, #592]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80e4 	beq.w	80029a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d007      	beq.n	80027f0 <HAL_RCC_OscConfig+0x4c>
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	f040 808b 	bne.w	80028fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	f040 8087 	bne.w	80028fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027f0:	4b88      	ldr	r3, [pc, #544]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_OscConfig+0x64>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e3df      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1a      	ldr	r2, [r3, #32]
 800280c:	4b81      	ldr	r3, [pc, #516]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d004      	beq.n	8002822 <HAL_RCC_OscConfig+0x7e>
 8002818:	4b7e      	ldr	r3, [pc, #504]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002820:	e005      	b.n	800282e <HAL_RCC_OscConfig+0x8a>
 8002822:	4b7c      	ldr	r3, [pc, #496]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800282e:	4293      	cmp	r3, r2
 8002830:	d223      	bcs.n	800287a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fd92 	bl	8003360 <RCC_SetFlashLatencyFromMSIRange>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e3c0      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002846:	4b73      	ldr	r3, [pc, #460]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a72      	ldr	r2, [pc, #456]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 800284c:	f043 0308 	orr.w	r3, r3, #8
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	4b70      	ldr	r3, [pc, #448]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	496d      	ldr	r1, [pc, #436]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002860:	4313      	orrs	r3, r2
 8002862:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002864:	4b6b      	ldr	r3, [pc, #428]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	4968      	ldr	r1, [pc, #416]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
 8002878:	e025      	b.n	80028c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800287a:	4b66      	ldr	r3, [pc, #408]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a65      	ldr	r2, [pc, #404]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002880:	f043 0308 	orr.w	r3, r3, #8
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b63      	ldr	r3, [pc, #396]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	4960      	ldr	r1, [pc, #384]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002898:	4b5e      	ldr	r3, [pc, #376]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	021b      	lsls	r3, r3, #8
 80028a6:	495b      	ldr	r1, [pc, #364]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fd52 	bl	8003360 <RCC_SetFlashLatencyFromMSIRange>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e380      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028c6:	f000 fc87 	bl	80031d8 <HAL_RCC_GetSysClockFreq>
 80028ca:	4602      	mov	r2, r0
 80028cc:	4b51      	ldr	r3, [pc, #324]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	4950      	ldr	r1, [pc, #320]	@ (8002a18 <HAL_RCC_OscConfig+0x274>)
 80028d8:	5ccb      	ldrb	r3, [r1, r3]
 80028da:	f003 031f 	and.w	r3, r3, #31
 80028de:	fa22 f303 	lsr.w	r3, r2, r3
 80028e2:	4a4e      	ldr	r2, [pc, #312]	@ (8002a1c <HAL_RCC_OscConfig+0x278>)
 80028e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002a20 <HAL_RCC_OscConfig+0x27c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff f978 	bl	8001be0 <HAL_InitTick>
 80028f0:	4603      	mov	r3, r0
 80028f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d052      	beq.n	80029a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	e364      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d032      	beq.n	800296c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002906:	4b43      	ldr	r3, [pc, #268]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a42      	ldr	r2, [pc, #264]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002912:	f7ff f9b5 	bl	8001c80 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800291a:	f7ff f9b1 	bl	8001c80 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e34d      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800292c:	4b39      	ldr	r3, [pc, #228]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002938:	4b36      	ldr	r3, [pc, #216]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a35      	ldr	r2, [pc, #212]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 800293e:	f043 0308 	orr.w	r3, r3, #8
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	4b33      	ldr	r3, [pc, #204]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	4930      	ldr	r1, [pc, #192]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002952:	4313      	orrs	r3, r2
 8002954:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002956:	4b2f      	ldr	r3, [pc, #188]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	021b      	lsls	r3, r3, #8
 8002964:	492b      	ldr	r1, [pc, #172]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002966:	4313      	orrs	r3, r2
 8002968:	604b      	str	r3, [r1, #4]
 800296a:	e01a      	b.n	80029a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800296c:	4b29      	ldr	r3, [pc, #164]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a28      	ldr	r2, [pc, #160]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002972:	f023 0301 	bic.w	r3, r3, #1
 8002976:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002978:	f7ff f982 	bl	8001c80 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002980:	f7ff f97e 	bl	8001c80 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e31a      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002992:	4b20      	ldr	r3, [pc, #128]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x1dc>
 800299e:	e000      	b.n	80029a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d073      	beq.n	8002a96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_OscConfig+0x21c>
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2b0c      	cmp	r3, #12
 80029b8:	d10e      	bne.n	80029d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d10b      	bne.n	80029d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	4b14      	ldr	r3, [pc, #80]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d063      	beq.n	8002a94 <HAL_RCC_OscConfig+0x2f0>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d15f      	bne.n	8002a94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e2f7      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029e0:	d106      	bne.n	80029f0 <HAL_RCC_OscConfig+0x24c>
 80029e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e025      	b.n	8002a3c <HAL_RCC_OscConfig+0x298>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029f8:	d114      	bne.n	8002a24 <HAL_RCC_OscConfig+0x280>
 80029fa:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a05      	ldr	r2, [pc, #20]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002a00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b03      	ldr	r3, [pc, #12]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a02      	ldr	r2, [pc, #8]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e013      	b.n	8002a3c <HAL_RCC_OscConfig+0x298>
 8002a14:	40021000 	.word	0x40021000
 8002a18:	0800a560 	.word	0x0800a560
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	20000004 	.word	0x20000004
 8002a24:	4ba0      	ldr	r3, [pc, #640]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a9f      	ldr	r2, [pc, #636]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b9d      	ldr	r3, [pc, #628]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a9c      	ldr	r2, [pc, #624]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002a36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7ff f91c 	bl	8001c80 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7ff f918 	bl	8001c80 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	@ 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e2b4      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a5e:	4b92      	ldr	r3, [pc, #584]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x2a8>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7ff f908 	bl	8001c80 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a74:	f7ff f904 	bl	8001c80 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	@ 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e2a0      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a86:	4b88      	ldr	r3, [pc, #544]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x2d0>
 8002a92:	e000      	b.n	8002a96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d060      	beq.n	8002b64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x310>
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	2b0c      	cmp	r3, #12
 8002aac:	d119      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d116      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ab4:	4b7c      	ldr	r3, [pc, #496]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_OscConfig+0x328>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e27d      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002acc:	4b76      	ldr	r3, [pc, #472]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	061b      	lsls	r3, r3, #24
 8002ada:	4973      	ldr	r1, [pc, #460]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ae0:	e040      	b.n	8002b64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d023      	beq.n	8002b32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aea:	4b6f      	ldr	r3, [pc, #444]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a6e      	ldr	r2, [pc, #440]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af6:	f7ff f8c3 	bl	8001c80 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002afe:	f7ff f8bf 	bl	8001c80 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e25b      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b10:	4b65      	ldr	r3, [pc, #404]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1c:	4b62      	ldr	r3, [pc, #392]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	061b      	lsls	r3, r3, #24
 8002b2a:	495f      	ldr	r1, [pc, #380]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
 8002b30:	e018      	b.n	8002b64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b32:	4b5d      	ldr	r3, [pc, #372]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a5c      	ldr	r2, [pc, #368]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3e:	f7ff f89f 	bl	8001c80 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b46:	f7ff f89b 	bl	8001c80 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e237      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b58:	4b53      	ldr	r3, [pc, #332]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f0      	bne.n	8002b46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d03c      	beq.n	8002bea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01c      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b78:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b7e:	4a4a      	ldr	r2, [pc, #296]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7ff f87a 	bl	8001c80 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b90:	f7ff f876 	bl	8001c80 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e212      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ba2:	4b41      	ldr	r3, [pc, #260]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0ef      	beq.n	8002b90 <HAL_RCC_OscConfig+0x3ec>
 8002bb0:	e01b      	b.n	8002bea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bb8:	4a3b      	ldr	r2, [pc, #236]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc2:	f7ff f85d 	bl	8001c80 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bca:	f7ff f859 	bl	8001c80 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e1f5      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bdc:	4b32      	ldr	r3, [pc, #200]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1ef      	bne.n	8002bca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80a6 	beq.w	8002d44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10d      	bne.n	8002c24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c08:	4b27      	ldr	r3, [pc, #156]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0c:	4a26      	ldr	r2, [pc, #152]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c12:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c14:	4b24      	ldr	r3, [pc, #144]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c20:	2301      	movs	r3, #1
 8002c22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c24:	4b21      	ldr	r3, [pc, #132]	@ (8002cac <HAL_RCC_OscConfig+0x508>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d118      	bne.n	8002c62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c30:	4b1e      	ldr	r3, [pc, #120]	@ (8002cac <HAL_RCC_OscConfig+0x508>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1d      	ldr	r2, [pc, #116]	@ (8002cac <HAL_RCC_OscConfig+0x508>)
 8002c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3c:	f7ff f820 	bl	8001c80 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c44:	f7ff f81c 	bl	8001c80 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e1b8      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c56:	4b15      	ldr	r3, [pc, #84]	@ (8002cac <HAL_RCC_OscConfig+0x508>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d108      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4d8>
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c7a:	e029      	b.n	8002cd0 <HAL_RCC_OscConfig+0x52c>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d115      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x50c>
 8002c84:	4b08      	ldr	r3, [pc, #32]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8a:	4a07      	ldr	r2, [pc, #28]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c94:	4b04      	ldr	r3, [pc, #16]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9a:	4a03      	ldr	r2, [pc, #12]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ca4:	e014      	b.n	8002cd0 <HAL_RCC_OscConfig+0x52c>
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40007000 	.word	0x40007000
 8002cb0:	4b9d      	ldr	r3, [pc, #628]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb6:	4a9c      	ldr	r2, [pc, #624]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cc0:	4b99      	ldr	r3, [pc, #612]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc6:	4a98      	ldr	r2, [pc, #608]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d016      	beq.n	8002d06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7fe ffd2 	bl	8001c80 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce0:	f7fe ffce 	bl	8001c80 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e168      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf6:	4b8c      	ldr	r3, [pc, #560]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0ed      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x53c>
 8002d04:	e015      	b.n	8002d32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d06:	f7fe ffbb 	bl	8001c80 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fe ffb7 	bl	8001c80 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e151      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d24:	4b80      	ldr	r3, [pc, #512]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1ed      	bne.n	8002d0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d32:	7ffb      	ldrb	r3, [r7, #31]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d105      	bne.n	8002d44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d38:	4b7b      	ldr	r3, [pc, #492]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3c:	4a7a      	ldr	r2, [pc, #488]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002d3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d42:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d03c      	beq.n	8002dca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01c      	beq.n	8002d92 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d58:	4b73      	ldr	r3, [pc, #460]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d5e:	4a72      	ldr	r2, [pc, #456]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d68:	f7fe ff8a 	bl	8001c80 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d70:	f7fe ff86 	bl	8001c80 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e122      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d82:	4b69      	ldr	r3, [pc, #420]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002d84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0ef      	beq.n	8002d70 <HAL_RCC_OscConfig+0x5cc>
 8002d90:	e01b      	b.n	8002dca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d92:	4b65      	ldr	r3, [pc, #404]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d98:	4a63      	ldr	r2, [pc, #396]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da2:	f7fe ff6d 	bl	8001c80 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002daa:	f7fe ff69 	bl	8001c80 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e105      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dbc:	4b5a      	ldr	r3, [pc, #360]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1ef      	bne.n	8002daa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 80f9 	beq.w	8002fc6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	f040 80cf 	bne.w	8002f7c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dde:	4b52      	ldr	r3, [pc, #328]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f003 0203 	and.w	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d12c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d123      	bne.n	8002e4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e0e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d11b      	bne.n	8002e4c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d113      	bne.n	8002e4c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e2e:	085b      	lsrs	r3, r3, #1
 8002e30:	3b01      	subs	r3, #1
 8002e32:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d109      	bne.n	8002e4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	085b      	lsrs	r3, r3, #1
 8002e44:	3b01      	subs	r3, #1
 8002e46:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d071      	beq.n	8002f30 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	2b0c      	cmp	r3, #12
 8002e50:	d068      	beq.n	8002f24 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e52:	4b35      	ldr	r3, [pc, #212]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d105      	bne.n	8002e6a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e5e:	4b32      	ldr	r3, [pc, #200]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e0ac      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e6e:	4b2e      	ldr	r3, [pc, #184]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a2d      	ldr	r2, [pc, #180]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002e74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e78:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e7a:	f7fe ff01 	bl	8001c80 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e82:	f7fe fefd 	bl	8001c80 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e099      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e94:	4b24      	ldr	r3, [pc, #144]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f0      	bne.n	8002e82 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea0:	4b21      	ldr	r3, [pc, #132]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	4b21      	ldr	r3, [pc, #132]	@ (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002eb0:	3a01      	subs	r2, #1
 8002eb2:	0112      	lsls	r2, r2, #4
 8002eb4:	4311      	orrs	r1, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002eba:	0212      	lsls	r2, r2, #8
 8002ebc:	4311      	orrs	r1, r2
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ec2:	0852      	lsrs	r2, r2, #1
 8002ec4:	3a01      	subs	r2, #1
 8002ec6:	0552      	lsls	r2, r2, #21
 8002ec8:	4311      	orrs	r1, r2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ece:	0852      	lsrs	r2, r2, #1
 8002ed0:	3a01      	subs	r2, #1
 8002ed2:	0652      	lsls	r2, r2, #25
 8002ed4:	4311      	orrs	r1, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002eda:	06d2      	lsls	r2, r2, #27
 8002edc:	430a      	orrs	r2, r1
 8002ede:	4912      	ldr	r1, [pc, #72]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ee4:	4b10      	ldr	r3, [pc, #64]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a0f      	ldr	r2, [pc, #60]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002eea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4a0c      	ldr	r2, [pc, #48]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002efa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002efc:	f7fe fec0 	bl	8001c80 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f04:	f7fe febc 	bl	8001c80 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e058      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f16:	4b04      	ldr	r3, [pc, #16]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f22:	e050      	b.n	8002fc6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e04f      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f30:	4b27      	ldr	r3, [pc, #156]	@ (8002fd0 <HAL_RCC_OscConfig+0x82c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d144      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f3c:	4b24      	ldr	r3, [pc, #144]	@ (8002fd0 <HAL_RCC_OscConfig+0x82c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a23      	ldr	r2, [pc, #140]	@ (8002fd0 <HAL_RCC_OscConfig+0x82c>)
 8002f42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f48:	4b21      	ldr	r3, [pc, #132]	@ (8002fd0 <HAL_RCC_OscConfig+0x82c>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	4a20      	ldr	r2, [pc, #128]	@ (8002fd0 <HAL_RCC_OscConfig+0x82c>)
 8002f4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f54:	f7fe fe94 	bl	8001c80 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7fe fe90 	bl	8001c80 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e02c      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6e:	4b18      	ldr	r3, [pc, #96]	@ (8002fd0 <HAL_RCC_OscConfig+0x82c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x7b8>
 8002f7a:	e024      	b.n	8002fc6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	2b0c      	cmp	r3, #12
 8002f80:	d01f      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f82:	4b13      	ldr	r3, [pc, #76]	@ (8002fd0 <HAL_RCC_OscConfig+0x82c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a12      	ldr	r2, [pc, #72]	@ (8002fd0 <HAL_RCC_OscConfig+0x82c>)
 8002f88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8e:	f7fe fe77 	bl	8001c80 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f96:	f7fe fe73 	bl	8001c80 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e00f      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa8:	4b09      	ldr	r3, [pc, #36]	@ (8002fd0 <HAL_RCC_OscConfig+0x82c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fb4:	4b06      	ldr	r3, [pc, #24]	@ (8002fd0 <HAL_RCC_OscConfig+0x82c>)
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	4905      	ldr	r1, [pc, #20]	@ (8002fd0 <HAL_RCC_OscConfig+0x82c>)
 8002fba:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <HAL_RCC_OscConfig+0x830>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60cb      	str	r3, [r1, #12]
 8002fc0:	e001      	b.n	8002fc6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3720      	adds	r7, #32
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	feeefffc 	.word	0xfeeefffc

08002fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0e7      	b.n	80031bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fec:	4b75      	ldr	r3, [pc, #468]	@ (80031c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d910      	bls.n	800301c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffa:	4b72      	ldr	r3, [pc, #456]	@ (80031c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 0207 	bic.w	r2, r3, #7
 8003002:	4970      	ldr	r1, [pc, #448]	@ (80031c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b6e      	ldr	r3, [pc, #440]	@ (80031c4 <HAL_RCC_ClockConfig+0x1ec>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0cf      	b.n	80031bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d010      	beq.n	800304a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	4b66      	ldr	r3, [pc, #408]	@ (80031c8 <HAL_RCC_ClockConfig+0x1f0>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003034:	429a      	cmp	r2, r3
 8003036:	d908      	bls.n	800304a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003038:	4b63      	ldr	r3, [pc, #396]	@ (80031c8 <HAL_RCC_ClockConfig+0x1f0>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	4960      	ldr	r1, [pc, #384]	@ (80031c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003046:	4313      	orrs	r3, r2
 8003048:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d04c      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b03      	cmp	r3, #3
 800305c:	d107      	bne.n	800306e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305e:	4b5a      	ldr	r3, [pc, #360]	@ (80031c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d121      	bne.n	80030ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e0a6      	b.n	80031bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d107      	bne.n	8003086 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003076:	4b54      	ldr	r3, [pc, #336]	@ (80031c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d115      	bne.n	80030ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e09a      	b.n	80031bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d107      	bne.n	800309e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800308e:	4b4e      	ldr	r3, [pc, #312]	@ (80031c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e08e      	b.n	80031bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800309e:	4b4a      	ldr	r3, [pc, #296]	@ (80031c8 <HAL_RCC_ClockConfig+0x1f0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e086      	b.n	80031bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030ae:	4b46      	ldr	r3, [pc, #280]	@ (80031c8 <HAL_RCC_ClockConfig+0x1f0>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f023 0203 	bic.w	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4943      	ldr	r1, [pc, #268]	@ (80031c8 <HAL_RCC_ClockConfig+0x1f0>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c0:	f7fe fdde 	bl	8001c80 <HAL_GetTick>
 80030c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c6:	e00a      	b.n	80030de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c8:	f7fe fdda 	bl	8001c80 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e06e      	b.n	80031bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	4b3a      	ldr	r3, [pc, #232]	@ (80031c8 <HAL_RCC_ClockConfig+0x1f0>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 020c 	and.w	r2, r3, #12
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d1eb      	bne.n	80030c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d010      	beq.n	800311e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	4b31      	ldr	r3, [pc, #196]	@ (80031c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003108:	429a      	cmp	r2, r3
 800310a:	d208      	bcs.n	800311e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800310c:	4b2e      	ldr	r3, [pc, #184]	@ (80031c8 <HAL_RCC_ClockConfig+0x1f0>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	492b      	ldr	r1, [pc, #172]	@ (80031c8 <HAL_RCC_ClockConfig+0x1f0>)
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800311e:	4b29      	ldr	r3, [pc, #164]	@ (80031c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d210      	bcs.n	800314e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312c:	4b25      	ldr	r3, [pc, #148]	@ (80031c4 <HAL_RCC_ClockConfig+0x1ec>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f023 0207 	bic.w	r2, r3, #7
 8003134:	4923      	ldr	r1, [pc, #140]	@ (80031c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	4313      	orrs	r3, r2
 800313a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313c:	4b21      	ldr	r3, [pc, #132]	@ (80031c4 <HAL_RCC_ClockConfig+0x1ec>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d001      	beq.n	800314e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e036      	b.n	80031bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b00      	cmp	r3, #0
 8003158:	d008      	beq.n	800316c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800315a:	4b1b      	ldr	r3, [pc, #108]	@ (80031c8 <HAL_RCC_ClockConfig+0x1f0>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	4918      	ldr	r1, [pc, #96]	@ (80031c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003168:	4313      	orrs	r3, r2
 800316a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d009      	beq.n	800318c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003178:	4b13      	ldr	r3, [pc, #76]	@ (80031c8 <HAL_RCC_ClockConfig+0x1f0>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4910      	ldr	r1, [pc, #64]	@ (80031c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003188:	4313      	orrs	r3, r2
 800318a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800318c:	f000 f824 	bl	80031d8 <HAL_RCC_GetSysClockFreq>
 8003190:	4602      	mov	r2, r0
 8003192:	4b0d      	ldr	r3, [pc, #52]	@ (80031c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	490b      	ldr	r1, [pc, #44]	@ (80031cc <HAL_RCC_ClockConfig+0x1f4>)
 800319e:	5ccb      	ldrb	r3, [r1, r3]
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	fa22 f303 	lsr.w	r3, r2, r3
 80031a8:	4a09      	ldr	r2, [pc, #36]	@ (80031d0 <HAL_RCC_ClockConfig+0x1f8>)
 80031aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031ac:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <HAL_RCC_ClockConfig+0x1fc>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fe fd15 	bl	8001be0 <HAL_InitTick>
 80031b6:	4603      	mov	r3, r0
 80031b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80031ba:	7afb      	ldrb	r3, [r7, #11]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40022000 	.word	0x40022000
 80031c8:	40021000 	.word	0x40021000
 80031cc:	0800a560 	.word	0x0800a560
 80031d0:	20000000 	.word	0x20000000
 80031d4:	20000004 	.word	0x20000004

080031d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	b089      	sub	sp, #36	@ 0x24
 80031dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	2300      	movs	r3, #0
 80031e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031e6:	4b3e      	ldr	r3, [pc, #248]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031f0:	4b3b      	ldr	r3, [pc, #236]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0x34>
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	2b0c      	cmp	r3, #12
 8003204:	d121      	bne.n	800324a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d11e      	bne.n	800324a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800320c:	4b34      	ldr	r3, [pc, #208]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d107      	bne.n	8003228 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003218:	4b31      	ldr	r3, [pc, #196]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800321a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800321e:	0a1b      	lsrs	r3, r3, #8
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	e005      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003228:	4b2d      	ldr	r3, [pc, #180]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	091b      	lsrs	r3, r3, #4
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003234:	4a2b      	ldr	r2, [pc, #172]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800323c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10d      	bne.n	8003260 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003248:	e00a      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	2b04      	cmp	r3, #4
 800324e:	d102      	bne.n	8003256 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003250:	4b25      	ldr	r3, [pc, #148]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003252:	61bb      	str	r3, [r7, #24]
 8003254:	e004      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	2b08      	cmp	r3, #8
 800325a:	d101      	bne.n	8003260 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800325c:	4b23      	ldr	r3, [pc, #140]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x114>)
 800325e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	2b0c      	cmp	r3, #12
 8003264:	d134      	bne.n	80032d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003266:	4b1e      	ldr	r3, [pc, #120]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d003      	beq.n	800327e <HAL_RCC_GetSysClockFreq+0xa6>
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b03      	cmp	r3, #3
 800327a:	d003      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0xac>
 800327c:	e005      	b.n	800328a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800327e:	4b1a      	ldr	r3, [pc, #104]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003280:	617b      	str	r3, [r7, #20]
      break;
 8003282:	e005      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003284:	4b19      	ldr	r3, [pc, #100]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x114>)
 8003286:	617b      	str	r3, [r7, #20]
      break;
 8003288:	e002      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	617b      	str	r3, [r7, #20]
      break;
 800328e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003290:	4b13      	ldr	r3, [pc, #76]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	3301      	adds	r3, #1
 800329c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800329e:	4b10      	ldr	r3, [pc, #64]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	0a1b      	lsrs	r3, r3, #8
 80032a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	fb03 f202 	mul.w	r2, r3, r2
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032b6:	4b0a      	ldr	r3, [pc, #40]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	0e5b      	lsrs	r3, r3, #25
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	3301      	adds	r3, #1
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032d0:	69bb      	ldr	r3, [r7, #24]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3724      	adds	r7, #36	@ 0x24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	0800a578 	.word	0x0800a578
 80032e8:	00f42400 	.word	0x00f42400
 80032ec:	007a1200 	.word	0x007a1200

080032f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f4:	4b03      	ldr	r3, [pc, #12]	@ (8003304 <HAL_RCC_GetHCLKFreq+0x14>)
 80032f6:	681b      	ldr	r3, [r3, #0]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20000000 	.word	0x20000000

08003308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800330c:	f7ff fff0 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003310:	4602      	mov	r2, r0
 8003312:	4b06      	ldr	r3, [pc, #24]	@ (800332c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	0a1b      	lsrs	r3, r3, #8
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	4904      	ldr	r1, [pc, #16]	@ (8003330 <HAL_RCC_GetPCLK1Freq+0x28>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003328:	4618      	mov	r0, r3
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40021000 	.word	0x40021000
 8003330:	0800a570 	.word	0x0800a570

08003334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003338:	f7ff ffda 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 800333c:	4602      	mov	r2, r0
 800333e:	4b06      	ldr	r3, [pc, #24]	@ (8003358 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	0adb      	lsrs	r3, r3, #11
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	4904      	ldr	r1, [pc, #16]	@ (800335c <HAL_RCC_GetPCLK2Freq+0x28>)
 800334a:	5ccb      	ldrb	r3, [r1, r3]
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003354:	4618      	mov	r0, r3
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40021000 	.word	0x40021000
 800335c:	0800a570 	.word	0x0800a570

08003360 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003368:	2300      	movs	r3, #0
 800336a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800336c:	4b2a      	ldr	r3, [pc, #168]	@ (8003418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800336e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003378:	f7ff f990 	bl	800269c <HAL_PWREx_GetVoltageRange>
 800337c:	6178      	str	r0, [r7, #20]
 800337e:	e014      	b.n	80033aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003380:	4b25      	ldr	r3, [pc, #148]	@ (8003418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003384:	4a24      	ldr	r2, [pc, #144]	@ (8003418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003386:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800338a:	6593      	str	r3, [r2, #88]	@ 0x58
 800338c:	4b22      	ldr	r3, [pc, #136]	@ (8003418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800338e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003398:	f7ff f980 	bl	800269c <HAL_PWREx_GetVoltageRange>
 800339c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800339e:	4b1e      	ldr	r3, [pc, #120]	@ (8003418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033b0:	d10b      	bne.n	80033ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b80      	cmp	r3, #128	@ 0x80
 80033b6:	d919      	bls.n	80033ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80033bc:	d902      	bls.n	80033c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033be:	2302      	movs	r3, #2
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	e013      	b.n	80033ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033c4:	2301      	movs	r3, #1
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	e010      	b.n	80033ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b80      	cmp	r3, #128	@ 0x80
 80033ce:	d902      	bls.n	80033d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033d0:	2303      	movs	r3, #3
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	e00a      	b.n	80033ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b80      	cmp	r3, #128	@ 0x80
 80033da:	d102      	bne.n	80033e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033dc:	2302      	movs	r3, #2
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	e004      	b.n	80033ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b70      	cmp	r3, #112	@ 0x70
 80033e6:	d101      	bne.n	80033ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033e8:	2301      	movs	r3, #1
 80033ea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033ec:	4b0b      	ldr	r3, [pc, #44]	@ (800341c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f023 0207 	bic.w	r2, r3, #7
 80033f4:	4909      	ldr	r1, [pc, #36]	@ (800341c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033fc:	4b07      	ldr	r3, [pc, #28]	@ (800341c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	429a      	cmp	r2, r3
 8003408:	d001      	beq.n	800340e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40021000 	.word	0x40021000
 800341c:	40022000 	.word	0x40022000

08003420 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003428:	2300      	movs	r3, #0
 800342a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800342c:	2300      	movs	r3, #0
 800342e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003438:	2b00      	cmp	r3, #0
 800343a:	d041      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003440:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003444:	d02a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003446:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800344a:	d824      	bhi.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800344c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003450:	d008      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003452:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003456:	d81e      	bhi.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800345c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003460:	d010      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003462:	e018      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003464:	4b86      	ldr	r3, [pc, #536]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4a85      	ldr	r2, [pc, #532]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800346e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003470:	e015      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3304      	adds	r3, #4
 8003476:	2100      	movs	r1, #0
 8003478:	4618      	mov	r0, r3
 800347a:	f000 facd 	bl	8003a18 <RCCEx_PLLSAI1_Config>
 800347e:	4603      	mov	r3, r0
 8003480:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003482:	e00c      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3320      	adds	r3, #32
 8003488:	2100      	movs	r1, #0
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fbb6 	bl	8003bfc <RCCEx_PLLSAI2_Config>
 8003490:	4603      	mov	r3, r0
 8003492:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003494:	e003      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	74fb      	strb	r3, [r7, #19]
      break;
 800349a:	e000      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800349c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800349e:	7cfb      	ldrb	r3, [r7, #19]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10b      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034a4:	4b76      	ldr	r3, [pc, #472]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034b2:	4973      	ldr	r1, [pc, #460]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034ba:	e001      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034bc:	7cfb      	ldrb	r3, [r7, #19]
 80034be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d041      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034d4:	d02a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80034d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034da:	d824      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034e0:	d008      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80034e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034e6:	d81e      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80034ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034f0:	d010      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034f2:	e018      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034f4:	4b62      	ldr	r3, [pc, #392]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4a61      	ldr	r2, [pc, #388]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003500:	e015      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3304      	adds	r3, #4
 8003506:	2100      	movs	r1, #0
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fa85 	bl	8003a18 <RCCEx_PLLSAI1_Config>
 800350e:	4603      	mov	r3, r0
 8003510:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003512:	e00c      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3320      	adds	r3, #32
 8003518:	2100      	movs	r1, #0
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fb6e 	bl	8003bfc <RCCEx_PLLSAI2_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003524:	e003      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	74fb      	strb	r3, [r7, #19]
      break;
 800352a:	e000      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800352c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800352e:	7cfb      	ldrb	r3, [r7, #19]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10b      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003534:	4b52      	ldr	r3, [pc, #328]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800353a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003542:	494f      	ldr	r1, [pc, #316]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800354a:	e001      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80a0 	beq.w	800369e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355e:	2300      	movs	r3, #0
 8003560:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003562:	4b47      	ldr	r3, [pc, #284]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003572:	2300      	movs	r3, #0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00d      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003578:	4b41      	ldr	r3, [pc, #260]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357c:	4a40      	ldr	r2, [pc, #256]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003582:	6593      	str	r3, [r2, #88]	@ 0x58
 8003584:	4b3e      	ldr	r3, [pc, #248]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003590:	2301      	movs	r3, #1
 8003592:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003594:	4b3b      	ldr	r3, [pc, #236]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a3a      	ldr	r2, [pc, #232]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800359a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800359e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035a0:	f7fe fb6e 	bl	8001c80 <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035a6:	e009      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a8:	f7fe fb6a 	bl	8001c80 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d902      	bls.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	74fb      	strb	r3, [r7, #19]
        break;
 80035ba:	e005      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035bc:	4b31      	ldr	r3, [pc, #196]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0ef      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80035c8:	7cfb      	ldrb	r3, [r7, #19]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d15c      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01f      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d019      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035ec:	4b24      	ldr	r3, [pc, #144]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035f8:	4b21      	ldr	r3, [pc, #132]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fe:	4a20      	ldr	r2, [pc, #128]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003608:	4b1d      	ldr	r3, [pc, #116]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360e:	4a1c      	ldr	r2, [pc, #112]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003618:	4a19      	ldr	r2, [pc, #100]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d016      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362a:	f7fe fb29 	bl	8001c80 <HAL_GetTick>
 800362e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003630:	e00b      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003632:	f7fe fb25 	bl	8001c80 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003640:	4293      	cmp	r3, r2
 8003642:	d902      	bls.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	74fb      	strb	r3, [r7, #19]
            break;
 8003648:	e006      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800364a:	4b0d      	ldr	r3, [pc, #52]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0ec      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003658:	7cfb      	ldrb	r3, [r7, #19]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10c      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800365e:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003664:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366e:	4904      	ldr	r1, [pc, #16]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003676:	e009      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	74bb      	strb	r3, [r7, #18]
 800367c:	e006      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800367e:	bf00      	nop
 8003680:	40021000 	.word	0x40021000
 8003684:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003688:	7cfb      	ldrb	r3, [r7, #19]
 800368a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800368c:	7c7b      	ldrb	r3, [r7, #17]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d105      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003692:	4ba6      	ldr	r3, [pc, #664]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003696:	4aa5      	ldr	r2, [pc, #660]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003698:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800369c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036aa:	4ba0      	ldr	r3, [pc, #640]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b0:	f023 0203 	bic.w	r2, r3, #3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b8:	499c      	ldr	r1, [pc, #624]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036cc:	4b97      	ldr	r3, [pc, #604]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d2:	f023 020c 	bic.w	r2, r3, #12
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036da:	4994      	ldr	r1, [pc, #592]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036ee:	4b8f      	ldr	r3, [pc, #572]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	498b      	ldr	r1, [pc, #556]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003710:	4b86      	ldr	r3, [pc, #536]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003716:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371e:	4983      	ldr	r1, [pc, #524]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003732:	4b7e      	ldr	r3, [pc, #504]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003738:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003740:	497a      	ldr	r1, [pc, #488]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003754:	4b75      	ldr	r3, [pc, #468]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003762:	4972      	ldr	r1, [pc, #456]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003776:	4b6d      	ldr	r3, [pc, #436]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003784:	4969      	ldr	r1, [pc, #420]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003798:	4b64      	ldr	r3, [pc, #400]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800379e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037a6:	4961      	ldr	r1, [pc, #388]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037ba:	4b5c      	ldr	r3, [pc, #368]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c8:	4958      	ldr	r1, [pc, #352]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037dc:	4b53      	ldr	r3, [pc, #332]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ea:	4950      	ldr	r1, [pc, #320]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037fe:	4b4b      	ldr	r3, [pc, #300]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003804:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380c:	4947      	ldr	r1, [pc, #284]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003820:	4b42      	ldr	r3, [pc, #264]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003822:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003826:	f023 0203 	bic.w	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382e:	493f      	ldr	r1, [pc, #252]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d028      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003842:	4b3a      	ldr	r3, [pc, #232]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003848:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003850:	4936      	ldr	r1, [pc, #216]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003860:	d106      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003862:	4b32      	ldr	r3, [pc, #200]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	4a31      	ldr	r2, [pc, #196]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003868:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800386c:	60d3      	str	r3, [r2, #12]
 800386e:	e011      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003874:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003878:	d10c      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3304      	adds	r3, #4
 800387e:	2101      	movs	r1, #1
 8003880:	4618      	mov	r0, r3
 8003882:	f000 f8c9 	bl	8003a18 <RCCEx_PLLSAI1_Config>
 8003886:	4603      	mov	r3, r0
 8003888:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800388a:	7cfb      	ldrb	r3, [r7, #19]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003890:	7cfb      	ldrb	r3, [r7, #19]
 8003892:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d028      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038a0:	4b22      	ldr	r3, [pc, #136]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ae:	491f      	ldr	r1, [pc, #124]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038be:	d106      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038c0:	4b1a      	ldr	r3, [pc, #104]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	4a19      	ldr	r2, [pc, #100]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038ca:	60d3      	str	r3, [r2, #12]
 80038cc:	e011      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038d6:	d10c      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3304      	adds	r3, #4
 80038dc:	2101      	movs	r1, #1
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 f89a 	bl	8003a18 <RCCEx_PLLSAI1_Config>
 80038e4:	4603      	mov	r3, r0
 80038e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038e8:	7cfb      	ldrb	r3, [r7, #19]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80038ee:	7cfb      	ldrb	r3, [r7, #19]
 80038f0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d02a      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038fe:	4b0b      	ldr	r3, [pc, #44]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003904:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800390c:	4907      	ldr	r1, [pc, #28]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003918:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800391c:	d108      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800391e:	4b03      	ldr	r3, [pc, #12]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	4a02      	ldr	r2, [pc, #8]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003924:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003928:	60d3      	str	r3, [r2, #12]
 800392a:	e013      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800392c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003934:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003938:	d10c      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3304      	adds	r3, #4
 800393e:	2101      	movs	r1, #1
 8003940:	4618      	mov	r0, r3
 8003942:	f000 f869 	bl	8003a18 <RCCEx_PLLSAI1_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800394a:	7cfb      	ldrb	r3, [r7, #19]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d02f      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003960:	4b2c      	ldr	r3, [pc, #176]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003966:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800396e:	4929      	ldr	r1, [pc, #164]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800397a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800397e:	d10d      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3304      	adds	r3, #4
 8003984:	2102      	movs	r1, #2
 8003986:	4618      	mov	r0, r3
 8003988:	f000 f846 	bl	8003a18 <RCCEx_PLLSAI1_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003990:	7cfb      	ldrb	r3, [r7, #19]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d014      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003996:	7cfb      	ldrb	r3, [r7, #19]
 8003998:	74bb      	strb	r3, [r7, #18]
 800399a:	e011      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039a4:	d10c      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3320      	adds	r3, #32
 80039aa:	2102      	movs	r1, #2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 f925 	bl	8003bfc <RCCEx_PLLSAI2_Config>
 80039b2:	4603      	mov	r3, r0
 80039b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039b6:	7cfb      	ldrb	r3, [r7, #19]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80039bc:	7cfb      	ldrb	r3, [r7, #19]
 80039be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00b      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039cc:	4b11      	ldr	r3, [pc, #68]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039dc:	490d      	ldr	r1, [pc, #52]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00b      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039f0:	4b08      	ldr	r3, [pc, #32]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a00:	4904      	ldr	r1, [pc, #16]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a08:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000

08003a18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a26:	4b74      	ldr	r3, [pc, #464]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d018      	beq.n	8003a64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a32:	4b71      	ldr	r3, [pc, #452]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f003 0203 	and.w	r2, r3, #3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d10d      	bne.n	8003a5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
       ||
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a4a:	4b6b      	ldr	r3, [pc, #428]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	091b      	lsrs	r3, r3, #4
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
       ||
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d047      	beq.n	8003aee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
 8003a62:	e044      	b.n	8003aee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d018      	beq.n	8003a9e <RCCEx_PLLSAI1_Config+0x86>
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d825      	bhi.n	8003abc <RCCEx_PLLSAI1_Config+0xa4>
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d002      	beq.n	8003a7a <RCCEx_PLLSAI1_Config+0x62>
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d009      	beq.n	8003a8c <RCCEx_PLLSAI1_Config+0x74>
 8003a78:	e020      	b.n	8003abc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a7a:	4b5f      	ldr	r3, [pc, #380]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d11d      	bne.n	8003ac2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a8a:	e01a      	b.n	8003ac2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a8c:	4b5a      	ldr	r3, [pc, #360]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d116      	bne.n	8003ac6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9c:	e013      	b.n	8003ac6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a9e:	4b56      	ldr	r3, [pc, #344]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10f      	bne.n	8003aca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aaa:	4b53      	ldr	r3, [pc, #332]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003aba:	e006      	b.n	8003aca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac0:	e004      	b.n	8003acc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e002      	b.n	8003acc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e000      	b.n	8003acc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aca:	bf00      	nop
    }

    if(status == HAL_OK)
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10d      	bne.n	8003aee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ad2:	4b49      	ldr	r3, [pc, #292]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6819      	ldr	r1, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	4943      	ldr	r1, [pc, #268]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d17c      	bne.n	8003bee <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003af4:	4b40      	ldr	r3, [pc, #256]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a3f      	ldr	r2, [pc, #252]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003afa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b00:	f7fe f8be 	bl	8001c80 <HAL_GetTick>
 8003b04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b06:	e009      	b.n	8003b1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b08:	f7fe f8ba 	bl	8001c80 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d902      	bls.n	8003b1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	73fb      	strb	r3, [r7, #15]
        break;
 8003b1a:	e005      	b.n	8003b28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b1c:	4b36      	ldr	r3, [pc, #216]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1ef      	bne.n	8003b08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d15f      	bne.n	8003bee <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d110      	bne.n	8003b56 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b34:	4b30      	ldr	r3, [pc, #192]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003b3c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6892      	ldr	r2, [r2, #8]
 8003b44:	0211      	lsls	r1, r2, #8
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68d2      	ldr	r2, [r2, #12]
 8003b4a:	06d2      	lsls	r2, r2, #27
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	492a      	ldr	r1, [pc, #168]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	610b      	str	r3, [r1, #16]
 8003b54:	e027      	b.n	8003ba6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d112      	bne.n	8003b82 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b5c:	4b26      	ldr	r3, [pc, #152]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003b64:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6892      	ldr	r2, [r2, #8]
 8003b6c:	0211      	lsls	r1, r2, #8
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6912      	ldr	r2, [r2, #16]
 8003b72:	0852      	lsrs	r2, r2, #1
 8003b74:	3a01      	subs	r2, #1
 8003b76:	0552      	lsls	r2, r2, #21
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	491f      	ldr	r1, [pc, #124]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	610b      	str	r3, [r1, #16]
 8003b80:	e011      	b.n	8003ba6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b82:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b8a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6892      	ldr	r2, [r2, #8]
 8003b92:	0211      	lsls	r1, r2, #8
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6952      	ldr	r2, [r2, #20]
 8003b98:	0852      	lsrs	r2, r2, #1
 8003b9a:	3a01      	subs	r2, #1
 8003b9c:	0652      	lsls	r2, r2, #25
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	4915      	ldr	r1, [pc, #84]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ba6:	4b14      	ldr	r3, [pc, #80]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a13      	ldr	r2, [pc, #76]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003bb0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb2:	f7fe f865 	bl	8001c80 <HAL_GetTick>
 8003bb6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bb8:	e009      	b.n	8003bce <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bba:	f7fe f861 	bl	8001c80 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d902      	bls.n	8003bce <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	73fb      	strb	r3, [r7, #15]
          break;
 8003bcc:	e005      	b.n	8003bda <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bce:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0ef      	beq.n	8003bba <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d106      	bne.n	8003bee <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003be0:	4b05      	ldr	r3, [pc, #20]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	4903      	ldr	r1, [pc, #12]	@ (8003bf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40021000 	.word	0x40021000

08003bfc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c0a:	4b69      	ldr	r3, [pc, #420]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d018      	beq.n	8003c48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c16:	4b66      	ldr	r3, [pc, #408]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0203 	and.w	r2, r3, #3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d10d      	bne.n	8003c42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
       ||
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c2e:	4b60      	ldr	r3, [pc, #384]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	091b      	lsrs	r3, r3, #4
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
       ||
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d047      	beq.n	8003cd2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
 8003c46:	e044      	b.n	8003cd2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d018      	beq.n	8003c82 <RCCEx_PLLSAI2_Config+0x86>
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d825      	bhi.n	8003ca0 <RCCEx_PLLSAI2_Config+0xa4>
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d002      	beq.n	8003c5e <RCCEx_PLLSAI2_Config+0x62>
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d009      	beq.n	8003c70 <RCCEx_PLLSAI2_Config+0x74>
 8003c5c:	e020      	b.n	8003ca0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c5e:	4b54      	ldr	r3, [pc, #336]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d11d      	bne.n	8003ca6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c6e:	e01a      	b.n	8003ca6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c70:	4b4f      	ldr	r3, [pc, #316]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d116      	bne.n	8003caa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c80:	e013      	b.n	8003caa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c82:	4b4b      	ldr	r3, [pc, #300]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10f      	bne.n	8003cae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c8e:	4b48      	ldr	r3, [pc, #288]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c9e:	e006      	b.n	8003cae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca4:	e004      	b.n	8003cb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ca6:	bf00      	nop
 8003ca8:	e002      	b.n	8003cb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003caa:	bf00      	nop
 8003cac:	e000      	b.n	8003cb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cae:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10d      	bne.n	8003cd2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6819      	ldr	r1, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	4938      	ldr	r1, [pc, #224]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d166      	bne.n	8003da6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003cd8:	4b35      	ldr	r3, [pc, #212]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a34      	ldr	r2, [pc, #208]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003cde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ce2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce4:	f7fd ffcc 	bl	8001c80 <HAL_GetTick>
 8003ce8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cea:	e009      	b.n	8003d00 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cec:	f7fd ffc8 	bl	8001c80 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d902      	bls.n	8003d00 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	73fb      	strb	r3, [r7, #15]
        break;
 8003cfe:	e005      	b.n	8003d0c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d00:	4b2b      	ldr	r3, [pc, #172]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1ef      	bne.n	8003cec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d149      	bne.n	8003da6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d110      	bne.n	8003d3a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d18:	4b25      	ldr	r3, [pc, #148]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003d20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6892      	ldr	r2, [r2, #8]
 8003d28:	0211      	lsls	r1, r2, #8
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	68d2      	ldr	r2, [r2, #12]
 8003d2e:	06d2      	lsls	r2, r2, #27
 8003d30:	430a      	orrs	r2, r1
 8003d32:	491f      	ldr	r1, [pc, #124]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	614b      	str	r3, [r1, #20]
 8003d38:	e011      	b.n	8003d5e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003d42:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6892      	ldr	r2, [r2, #8]
 8003d4a:	0211      	lsls	r1, r2, #8
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6912      	ldr	r2, [r2, #16]
 8003d50:	0852      	lsrs	r2, r2, #1
 8003d52:	3a01      	subs	r2, #1
 8003d54:	0652      	lsls	r2, r2, #25
 8003d56:	430a      	orrs	r2, r1
 8003d58:	4915      	ldr	r1, [pc, #84]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d5e:	4b14      	ldr	r3, [pc, #80]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a13      	ldr	r2, [pc, #76]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d68:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6a:	f7fd ff89 	bl	8001c80 <HAL_GetTick>
 8003d6e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d70:	e009      	b.n	8003d86 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d72:	f7fd ff85 	bl	8001c80 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d902      	bls.n	8003d86 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	73fb      	strb	r3, [r7, #15]
          break;
 8003d84:	e005      	b.n	8003d92 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d86:	4b0a      	ldr	r3, [pc, #40]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0ef      	beq.n	8003d72 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d106      	bne.n	8003da6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d98:	4b05      	ldr	r3, [pc, #20]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	4903      	ldr	r1, [pc, #12]	@ (8003db0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40021000 	.word	0x40021000

08003db4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e095      	b.n	8003ef2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d108      	bne.n	8003de0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dd6:	d009      	beq.n	8003dec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	61da      	str	r2, [r3, #28]
 8003dde:	e005      	b.n	8003dec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fd fc4c 	bl	80016a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e2c:	d902      	bls.n	8003e34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	e002      	b.n	8003e3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003e42:	d007      	beq.n	8003e54 <HAL_SPI_Init+0xa0>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e4c:	d002      	beq.n	8003e54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e96:	ea42 0103 	orr.w	r1, r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	0c1b      	lsrs	r3, r3, #16
 8003eb0:	f003 0204 	and.w	r2, r3, #4
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003ed0:	ea42 0103 	orr.w	r1, r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e040      	b.n	8003f8e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d106      	bne.n	8003f22 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7fd fd0f 	bl	8001940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2224      	movs	r2, #36	@ 0x24
 8003f26:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0201 	bic.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fae1 	bl	8004508 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f826 	bl	8003f98 <UART_SetConfig>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e01b      	b.n	8003f8e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f64:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f74:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0201 	orr.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fb60 	bl	800464c <UART_CheckIdleState>
 8003f8c:	4603      	mov	r3, r0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f9c:	b08a      	sub	sp, #40	@ 0x28
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4ba4      	ldr	r3, [pc, #656]	@ (8004258 <UART_SetConfig+0x2c0>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a99      	ldr	r2, [pc, #612]	@ (800425c <UART_SetConfig+0x2c4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d004      	beq.n	8004004 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004000:	4313      	orrs	r3, r2
 8004002:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004014:	430a      	orrs	r2, r1
 8004016:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a90      	ldr	r2, [pc, #576]	@ (8004260 <UART_SetConfig+0x2c8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d126      	bne.n	8004070 <UART_SetConfig+0xd8>
 8004022:	4b90      	ldr	r3, [pc, #576]	@ (8004264 <UART_SetConfig+0x2cc>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	2b03      	cmp	r3, #3
 800402e:	d81b      	bhi.n	8004068 <UART_SetConfig+0xd0>
 8004030:	a201      	add	r2, pc, #4	@ (adr r2, 8004038 <UART_SetConfig+0xa0>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	08004049 	.word	0x08004049
 800403c:	08004059 	.word	0x08004059
 8004040:	08004051 	.word	0x08004051
 8004044:	08004061 	.word	0x08004061
 8004048:	2301      	movs	r3, #1
 800404a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800404e:	e116      	b.n	800427e <UART_SetConfig+0x2e6>
 8004050:	2302      	movs	r3, #2
 8004052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004056:	e112      	b.n	800427e <UART_SetConfig+0x2e6>
 8004058:	2304      	movs	r3, #4
 800405a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800405e:	e10e      	b.n	800427e <UART_SetConfig+0x2e6>
 8004060:	2308      	movs	r3, #8
 8004062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004066:	e10a      	b.n	800427e <UART_SetConfig+0x2e6>
 8004068:	2310      	movs	r3, #16
 800406a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800406e:	e106      	b.n	800427e <UART_SetConfig+0x2e6>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a7c      	ldr	r2, [pc, #496]	@ (8004268 <UART_SetConfig+0x2d0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d138      	bne.n	80040ec <UART_SetConfig+0x154>
 800407a:	4b7a      	ldr	r3, [pc, #488]	@ (8004264 <UART_SetConfig+0x2cc>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004080:	f003 030c 	and.w	r3, r3, #12
 8004084:	2b0c      	cmp	r3, #12
 8004086:	d82d      	bhi.n	80040e4 <UART_SetConfig+0x14c>
 8004088:	a201      	add	r2, pc, #4	@ (adr r2, 8004090 <UART_SetConfig+0xf8>)
 800408a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408e:	bf00      	nop
 8004090:	080040c5 	.word	0x080040c5
 8004094:	080040e5 	.word	0x080040e5
 8004098:	080040e5 	.word	0x080040e5
 800409c:	080040e5 	.word	0x080040e5
 80040a0:	080040d5 	.word	0x080040d5
 80040a4:	080040e5 	.word	0x080040e5
 80040a8:	080040e5 	.word	0x080040e5
 80040ac:	080040e5 	.word	0x080040e5
 80040b0:	080040cd 	.word	0x080040cd
 80040b4:	080040e5 	.word	0x080040e5
 80040b8:	080040e5 	.word	0x080040e5
 80040bc:	080040e5 	.word	0x080040e5
 80040c0:	080040dd 	.word	0x080040dd
 80040c4:	2300      	movs	r3, #0
 80040c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ca:	e0d8      	b.n	800427e <UART_SetConfig+0x2e6>
 80040cc:	2302      	movs	r3, #2
 80040ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040d2:	e0d4      	b.n	800427e <UART_SetConfig+0x2e6>
 80040d4:	2304      	movs	r3, #4
 80040d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040da:	e0d0      	b.n	800427e <UART_SetConfig+0x2e6>
 80040dc:	2308      	movs	r3, #8
 80040de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040e2:	e0cc      	b.n	800427e <UART_SetConfig+0x2e6>
 80040e4:	2310      	movs	r3, #16
 80040e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ea:	e0c8      	b.n	800427e <UART_SetConfig+0x2e6>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a5e      	ldr	r2, [pc, #376]	@ (800426c <UART_SetConfig+0x2d4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d125      	bne.n	8004142 <UART_SetConfig+0x1aa>
 80040f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004264 <UART_SetConfig+0x2cc>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004100:	2b30      	cmp	r3, #48	@ 0x30
 8004102:	d016      	beq.n	8004132 <UART_SetConfig+0x19a>
 8004104:	2b30      	cmp	r3, #48	@ 0x30
 8004106:	d818      	bhi.n	800413a <UART_SetConfig+0x1a2>
 8004108:	2b20      	cmp	r3, #32
 800410a:	d00a      	beq.n	8004122 <UART_SetConfig+0x18a>
 800410c:	2b20      	cmp	r3, #32
 800410e:	d814      	bhi.n	800413a <UART_SetConfig+0x1a2>
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <UART_SetConfig+0x182>
 8004114:	2b10      	cmp	r3, #16
 8004116:	d008      	beq.n	800412a <UART_SetConfig+0x192>
 8004118:	e00f      	b.n	800413a <UART_SetConfig+0x1a2>
 800411a:	2300      	movs	r3, #0
 800411c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004120:	e0ad      	b.n	800427e <UART_SetConfig+0x2e6>
 8004122:	2302      	movs	r3, #2
 8004124:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004128:	e0a9      	b.n	800427e <UART_SetConfig+0x2e6>
 800412a:	2304      	movs	r3, #4
 800412c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004130:	e0a5      	b.n	800427e <UART_SetConfig+0x2e6>
 8004132:	2308      	movs	r3, #8
 8004134:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004138:	e0a1      	b.n	800427e <UART_SetConfig+0x2e6>
 800413a:	2310      	movs	r3, #16
 800413c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004140:	e09d      	b.n	800427e <UART_SetConfig+0x2e6>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a4a      	ldr	r2, [pc, #296]	@ (8004270 <UART_SetConfig+0x2d8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d125      	bne.n	8004198 <UART_SetConfig+0x200>
 800414c:	4b45      	ldr	r3, [pc, #276]	@ (8004264 <UART_SetConfig+0x2cc>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004152:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004156:	2bc0      	cmp	r3, #192	@ 0xc0
 8004158:	d016      	beq.n	8004188 <UART_SetConfig+0x1f0>
 800415a:	2bc0      	cmp	r3, #192	@ 0xc0
 800415c:	d818      	bhi.n	8004190 <UART_SetConfig+0x1f8>
 800415e:	2b80      	cmp	r3, #128	@ 0x80
 8004160:	d00a      	beq.n	8004178 <UART_SetConfig+0x1e0>
 8004162:	2b80      	cmp	r3, #128	@ 0x80
 8004164:	d814      	bhi.n	8004190 <UART_SetConfig+0x1f8>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <UART_SetConfig+0x1d8>
 800416a:	2b40      	cmp	r3, #64	@ 0x40
 800416c:	d008      	beq.n	8004180 <UART_SetConfig+0x1e8>
 800416e:	e00f      	b.n	8004190 <UART_SetConfig+0x1f8>
 8004170:	2300      	movs	r3, #0
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004176:	e082      	b.n	800427e <UART_SetConfig+0x2e6>
 8004178:	2302      	movs	r3, #2
 800417a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800417e:	e07e      	b.n	800427e <UART_SetConfig+0x2e6>
 8004180:	2304      	movs	r3, #4
 8004182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004186:	e07a      	b.n	800427e <UART_SetConfig+0x2e6>
 8004188:	2308      	movs	r3, #8
 800418a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800418e:	e076      	b.n	800427e <UART_SetConfig+0x2e6>
 8004190:	2310      	movs	r3, #16
 8004192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004196:	e072      	b.n	800427e <UART_SetConfig+0x2e6>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a35      	ldr	r2, [pc, #212]	@ (8004274 <UART_SetConfig+0x2dc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d12a      	bne.n	80041f8 <UART_SetConfig+0x260>
 80041a2:	4b30      	ldr	r3, [pc, #192]	@ (8004264 <UART_SetConfig+0x2cc>)
 80041a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041b0:	d01a      	beq.n	80041e8 <UART_SetConfig+0x250>
 80041b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041b6:	d81b      	bhi.n	80041f0 <UART_SetConfig+0x258>
 80041b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041bc:	d00c      	beq.n	80041d8 <UART_SetConfig+0x240>
 80041be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041c2:	d815      	bhi.n	80041f0 <UART_SetConfig+0x258>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <UART_SetConfig+0x238>
 80041c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041cc:	d008      	beq.n	80041e0 <UART_SetConfig+0x248>
 80041ce:	e00f      	b.n	80041f0 <UART_SetConfig+0x258>
 80041d0:	2300      	movs	r3, #0
 80041d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041d6:	e052      	b.n	800427e <UART_SetConfig+0x2e6>
 80041d8:	2302      	movs	r3, #2
 80041da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041de:	e04e      	b.n	800427e <UART_SetConfig+0x2e6>
 80041e0:	2304      	movs	r3, #4
 80041e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041e6:	e04a      	b.n	800427e <UART_SetConfig+0x2e6>
 80041e8:	2308      	movs	r3, #8
 80041ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ee:	e046      	b.n	800427e <UART_SetConfig+0x2e6>
 80041f0:	2310      	movs	r3, #16
 80041f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041f6:	e042      	b.n	800427e <UART_SetConfig+0x2e6>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a17      	ldr	r2, [pc, #92]	@ (800425c <UART_SetConfig+0x2c4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d13a      	bne.n	8004278 <UART_SetConfig+0x2e0>
 8004202:	4b18      	ldr	r3, [pc, #96]	@ (8004264 <UART_SetConfig+0x2cc>)
 8004204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004208:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800420c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004210:	d01a      	beq.n	8004248 <UART_SetConfig+0x2b0>
 8004212:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004216:	d81b      	bhi.n	8004250 <UART_SetConfig+0x2b8>
 8004218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800421c:	d00c      	beq.n	8004238 <UART_SetConfig+0x2a0>
 800421e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004222:	d815      	bhi.n	8004250 <UART_SetConfig+0x2b8>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <UART_SetConfig+0x298>
 8004228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800422c:	d008      	beq.n	8004240 <UART_SetConfig+0x2a8>
 800422e:	e00f      	b.n	8004250 <UART_SetConfig+0x2b8>
 8004230:	2300      	movs	r3, #0
 8004232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004236:	e022      	b.n	800427e <UART_SetConfig+0x2e6>
 8004238:	2302      	movs	r3, #2
 800423a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800423e:	e01e      	b.n	800427e <UART_SetConfig+0x2e6>
 8004240:	2304      	movs	r3, #4
 8004242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004246:	e01a      	b.n	800427e <UART_SetConfig+0x2e6>
 8004248:	2308      	movs	r3, #8
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800424e:	e016      	b.n	800427e <UART_SetConfig+0x2e6>
 8004250:	2310      	movs	r3, #16
 8004252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004256:	e012      	b.n	800427e <UART_SetConfig+0x2e6>
 8004258:	efff69f3 	.word	0xefff69f3
 800425c:	40008000 	.word	0x40008000
 8004260:	40013800 	.word	0x40013800
 8004264:	40021000 	.word	0x40021000
 8004268:	40004400 	.word	0x40004400
 800426c:	40004800 	.word	0x40004800
 8004270:	40004c00 	.word	0x40004c00
 8004274:	40005000 	.word	0x40005000
 8004278:	2310      	movs	r3, #16
 800427a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a9f      	ldr	r2, [pc, #636]	@ (8004500 <UART_SetConfig+0x568>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d17a      	bne.n	800437e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004288:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800428c:	2b08      	cmp	r3, #8
 800428e:	d824      	bhi.n	80042da <UART_SetConfig+0x342>
 8004290:	a201      	add	r2, pc, #4	@ (adr r2, 8004298 <UART_SetConfig+0x300>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042bd 	.word	0x080042bd
 800429c:	080042db 	.word	0x080042db
 80042a0:	080042c5 	.word	0x080042c5
 80042a4:	080042db 	.word	0x080042db
 80042a8:	080042cb 	.word	0x080042cb
 80042ac:	080042db 	.word	0x080042db
 80042b0:	080042db 	.word	0x080042db
 80042b4:	080042db 	.word	0x080042db
 80042b8:	080042d3 	.word	0x080042d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042bc:	f7ff f824 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
 80042c0:	61f8      	str	r0, [r7, #28]
        break;
 80042c2:	e010      	b.n	80042e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042c4:	4b8f      	ldr	r3, [pc, #572]	@ (8004504 <UART_SetConfig+0x56c>)
 80042c6:	61fb      	str	r3, [r7, #28]
        break;
 80042c8:	e00d      	b.n	80042e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ca:	f7fe ff85 	bl	80031d8 <HAL_RCC_GetSysClockFreq>
 80042ce:	61f8      	str	r0, [r7, #28]
        break;
 80042d0:	e009      	b.n	80042e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042d6:	61fb      	str	r3, [r7, #28]
        break;
 80042d8:	e005      	b.n	80042e6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80042e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 80fb 	beq.w	80044e4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	4413      	add	r3, r2
 80042f8:	69fa      	ldr	r2, [r7, #28]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d305      	bcc.n	800430a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004304:	69fa      	ldr	r2, [r7, #28]
 8004306:	429a      	cmp	r2, r3
 8004308:	d903      	bls.n	8004312 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004310:	e0e8      	b.n	80044e4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	2200      	movs	r2, #0
 8004316:	461c      	mov	r4, r3
 8004318:	4615      	mov	r5, r2
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	022b      	lsls	r3, r5, #8
 8004324:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004328:	0222      	lsls	r2, r4, #8
 800432a:	68f9      	ldr	r1, [r7, #12]
 800432c:	6849      	ldr	r1, [r1, #4]
 800432e:	0849      	lsrs	r1, r1, #1
 8004330:	2000      	movs	r0, #0
 8004332:	4688      	mov	r8, r1
 8004334:	4681      	mov	r9, r0
 8004336:	eb12 0a08 	adds.w	sl, r2, r8
 800433a:	eb43 0b09 	adc.w	fp, r3, r9
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	603b      	str	r3, [r7, #0]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800434c:	4650      	mov	r0, sl
 800434e:	4659      	mov	r1, fp
 8004350:	f7fc fc3a 	bl	8000bc8 <__aeabi_uldivmod>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4613      	mov	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004362:	d308      	bcc.n	8004376 <UART_SetConfig+0x3de>
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800436a:	d204      	bcs.n	8004376 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	60da      	str	r2, [r3, #12]
 8004374:	e0b6      	b.n	80044e4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800437c:	e0b2      	b.n	80044e4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004386:	d15e      	bne.n	8004446 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004388:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800438c:	2b08      	cmp	r3, #8
 800438e:	d828      	bhi.n	80043e2 <UART_SetConfig+0x44a>
 8004390:	a201      	add	r2, pc, #4	@ (adr r2, 8004398 <UART_SetConfig+0x400>)
 8004392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004396:	bf00      	nop
 8004398:	080043bd 	.word	0x080043bd
 800439c:	080043c5 	.word	0x080043c5
 80043a0:	080043cd 	.word	0x080043cd
 80043a4:	080043e3 	.word	0x080043e3
 80043a8:	080043d3 	.word	0x080043d3
 80043ac:	080043e3 	.word	0x080043e3
 80043b0:	080043e3 	.word	0x080043e3
 80043b4:	080043e3 	.word	0x080043e3
 80043b8:	080043db 	.word	0x080043db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043bc:	f7fe ffa4 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
 80043c0:	61f8      	str	r0, [r7, #28]
        break;
 80043c2:	e014      	b.n	80043ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043c4:	f7fe ffb6 	bl	8003334 <HAL_RCC_GetPCLK2Freq>
 80043c8:	61f8      	str	r0, [r7, #28]
        break;
 80043ca:	e010      	b.n	80043ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043cc:	4b4d      	ldr	r3, [pc, #308]	@ (8004504 <UART_SetConfig+0x56c>)
 80043ce:	61fb      	str	r3, [r7, #28]
        break;
 80043d0:	e00d      	b.n	80043ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043d2:	f7fe ff01 	bl	80031d8 <HAL_RCC_GetSysClockFreq>
 80043d6:	61f8      	str	r0, [r7, #28]
        break;
 80043d8:	e009      	b.n	80043ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043de:	61fb      	str	r3, [r7, #28]
        break;
 80043e0:	e005      	b.n	80043ee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80043ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d077      	beq.n	80044e4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	005a      	lsls	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	085b      	lsrs	r3, r3, #1
 80043fe:	441a      	add	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	fbb2 f3f3 	udiv	r3, r2, r3
 8004408:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	2b0f      	cmp	r3, #15
 800440e:	d916      	bls.n	800443e <UART_SetConfig+0x4a6>
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004416:	d212      	bcs.n	800443e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	b29b      	uxth	r3, r3
 800441c:	f023 030f 	bic.w	r3, r3, #15
 8004420:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	085b      	lsrs	r3, r3, #1
 8004426:	b29b      	uxth	r3, r3
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	b29a      	uxth	r2, r3
 800442e:	8afb      	ldrh	r3, [r7, #22]
 8004430:	4313      	orrs	r3, r2
 8004432:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	8afa      	ldrh	r2, [r7, #22]
 800443a:	60da      	str	r2, [r3, #12]
 800443c:	e052      	b.n	80044e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004444:	e04e      	b.n	80044e4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004446:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800444a:	2b08      	cmp	r3, #8
 800444c:	d827      	bhi.n	800449e <UART_SetConfig+0x506>
 800444e:	a201      	add	r2, pc, #4	@ (adr r2, 8004454 <UART_SetConfig+0x4bc>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	08004479 	.word	0x08004479
 8004458:	08004481 	.word	0x08004481
 800445c:	08004489 	.word	0x08004489
 8004460:	0800449f 	.word	0x0800449f
 8004464:	0800448f 	.word	0x0800448f
 8004468:	0800449f 	.word	0x0800449f
 800446c:	0800449f 	.word	0x0800449f
 8004470:	0800449f 	.word	0x0800449f
 8004474:	08004497 	.word	0x08004497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004478:	f7fe ff46 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
 800447c:	61f8      	str	r0, [r7, #28]
        break;
 800447e:	e014      	b.n	80044aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004480:	f7fe ff58 	bl	8003334 <HAL_RCC_GetPCLK2Freq>
 8004484:	61f8      	str	r0, [r7, #28]
        break;
 8004486:	e010      	b.n	80044aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004488:	4b1e      	ldr	r3, [pc, #120]	@ (8004504 <UART_SetConfig+0x56c>)
 800448a:	61fb      	str	r3, [r7, #28]
        break;
 800448c:	e00d      	b.n	80044aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800448e:	f7fe fea3 	bl	80031d8 <HAL_RCC_GetSysClockFreq>
 8004492:	61f8      	str	r0, [r7, #28]
        break;
 8004494:	e009      	b.n	80044aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800449a:	61fb      	str	r3, [r7, #28]
        break;
 800449c:	e005      	b.n	80044aa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80044a8:	bf00      	nop
    }

    if (pclk != 0U)
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d019      	beq.n	80044e4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	085a      	lsrs	r2, r3, #1
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	441a      	add	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	2b0f      	cmp	r3, #15
 80044c8:	d909      	bls.n	80044de <UART_SetConfig+0x546>
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044d0:	d205      	bcs.n	80044de <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60da      	str	r2, [r3, #12]
 80044dc:	e002      	b.n	80044e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80044f0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3728      	adds	r7, #40	@ 0x28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044fe:	bf00      	nop
 8004500:	40008000 	.word	0x40008000
 8004504:	00f42400 	.word	0x00f42400

08004508 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d01a      	beq.n	800461e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004602:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004606:	d10a      	bne.n	800461e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	605a      	str	r2, [r3, #4]
  }
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b098      	sub	sp, #96	@ 0x60
 8004650:	af02      	add	r7, sp, #8
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800465c:	f7fd fb10 	bl	8001c80 <HAL_GetTick>
 8004660:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b08      	cmp	r3, #8
 800466e:	d12e      	bne.n	80046ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004670:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004678:	2200      	movs	r2, #0
 800467a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f88c 	bl	800479c <UART_WaitOnFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d021      	beq.n	80046ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800469a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800469e:	653b      	str	r3, [r7, #80]	@ 0x50
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	461a      	mov	r2, r3
 80046a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e6      	bne.n	800468a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e062      	b.n	8004794 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d149      	bne.n	8004770 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e4:	2200      	movs	r2, #0
 80046e6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f856 	bl	800479c <UART_WaitOnFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d03c      	beq.n	8004770 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fe:	e853 3f00 	ldrex	r3, [r3]
 8004702:	623b      	str	r3, [r7, #32]
   return(result);
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800470a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	461a      	mov	r2, r3
 8004712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004714:	633b      	str	r3, [r7, #48]	@ 0x30
 8004716:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800471a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e6      	bne.n	80046f6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3308      	adds	r3, #8
 800472e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	e853 3f00 	ldrex	r3, [r3]
 8004736:	60fb      	str	r3, [r7, #12]
   return(result);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0301 	bic.w	r3, r3, #1
 800473e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3308      	adds	r3, #8
 8004746:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004748:	61fa      	str	r2, [r7, #28]
 800474a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	69b9      	ldr	r1, [r7, #24]
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	617b      	str	r3, [r7, #20]
   return(result);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e5      	bne.n	8004728 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e011      	b.n	8004794 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3758      	adds	r7, #88	@ 0x58
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	4613      	mov	r3, r2
 80047aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ac:	e04f      	b.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b4:	d04b      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b6:	f7fd fa63 	bl	8001c80 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d302      	bcc.n	80047cc <UART_WaitOnFlagUntilTimeout+0x30>
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e04e      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d037      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b80      	cmp	r3, #128	@ 0x80
 80047e2:	d034      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b40      	cmp	r3, #64	@ 0x40
 80047e8:	d031      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d110      	bne.n	800481a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2208      	movs	r2, #8
 80047fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f838 	bl	8004876 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2208      	movs	r2, #8
 800480a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e029      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004828:	d111      	bne.n	800484e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004832:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f81e 	bl	8004876 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e00f      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4013      	ands	r3, r2
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	bf0c      	ite	eq
 800485e:	2301      	moveq	r3, #1
 8004860:	2300      	movne	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	429a      	cmp	r2, r3
 800486a:	d0a0      	beq.n	80047ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004876:	b480      	push	{r7}
 8004878:	b095      	sub	sp, #84	@ 0x54
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004886:	e853 3f00 	ldrex	r3, [r3]
 800488a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800488c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004892:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800489c:	643b      	str	r3, [r7, #64]	@ 0x40
 800489e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e6      	bne.n	800487e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3308      	adds	r3, #8
 80048b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	61fb      	str	r3, [r7, #28]
   return(result);
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3308      	adds	r3, #8
 80048ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048d8:	e841 2300 	strex	r3, r2, [r1]
 80048dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e5      	bne.n	80048b0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d118      	bne.n	800491e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f023 0310 	bic.w	r3, r3, #16
 8004900:	647b      	str	r3, [r7, #68]	@ 0x44
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800490a:	61bb      	str	r3, [r7, #24]
 800490c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490e:	6979      	ldr	r1, [r7, #20]
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	e841 2300 	strex	r3, r2, [r1]
 8004916:	613b      	str	r3, [r7, #16]
   return(result);
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1e6      	bne.n	80048ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2220      	movs	r2, #32
 8004922:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004932:	bf00      	nop
 8004934:	3754      	adds	r7, #84	@ 0x54
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800493e:	b084      	sub	sp, #16
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	f107 001c 	add.w	r0, r7, #28
 800494c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fa69 	bl	8004e34 <USB_CoreReset>
 8004962:	4603      	mov	r3, r0
 8004964:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004966:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004972:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	639a      	str	r2, [r3, #56]	@ 0x38
 800497a:	e005      	b.n	8004988 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004980:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004988:	7bfb      	ldrb	r3, [r7, #15]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004994:	b004      	add	sp, #16
 8004996:	4770      	bx	lr

08004998 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f023 0201 	bic.w	r2, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	460b      	mov	r3, r1
 80049c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049d6:	78fb      	ldrb	r3, [r7, #3]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d115      	bne.n	8004a08 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80049e8:	200a      	movs	r0, #10
 80049ea:	f7fd f955 	bl	8001c98 <HAL_Delay>
      ms += 10U;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	330a      	adds	r3, #10
 80049f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fa0f 	bl	8004e18 <USB_GetMode>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d01e      	beq.n	8004a3e <USB_SetCurrentMode+0x84>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2bc7      	cmp	r3, #199	@ 0xc7
 8004a04:	d9f0      	bls.n	80049e8 <USB_SetCurrentMode+0x2e>
 8004a06:	e01a      	b.n	8004a3e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d115      	bne.n	8004a3a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a1a:	200a      	movs	r0, #10
 8004a1c:	f7fd f93c 	bl	8001c98 <HAL_Delay>
      ms += 10U;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	330a      	adds	r3, #10
 8004a24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f9f6 	bl	8004e18 <USB_GetMode>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d005      	beq.n	8004a3e <USB_SetCurrentMode+0x84>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2bc7      	cmp	r3, #199	@ 0xc7
 8004a36:	d9f0      	bls.n	8004a1a <USB_SetCurrentMode+0x60>
 8004a38:	e001      	b.n	8004a3e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e005      	b.n	8004a4a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2bc8      	cmp	r3, #200	@ 0xc8
 8004a42:	d101      	bne.n	8004a48 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a54:	b084      	sub	sp, #16
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b086      	sub	sp, #24
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004a62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a6e:	2300      	movs	r3, #0
 8004a70:	613b      	str	r3, [r7, #16]
 8004a72:	e009      	b.n	8004a88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	3340      	adds	r3, #64	@ 0x40
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	2200      	movs	r2, #0
 8004a80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	3301      	adds	r3, #1
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	2b0e      	cmp	r3, #14
 8004a8c:	d9f2      	bls.n	8004a74 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a8e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d11c      	bne.n	8004ad0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004aa4:	f043 0302 	orr.w	r3, r3, #2
 8004aa8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aae:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	e005      	b.n	8004adc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ae8:	2103      	movs	r1, #3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f95a 	bl	8004da4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004af0:	2110      	movs	r1, #16
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f8f6 	bl	8004ce4 <USB_FlushTxFifo>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f920 	bl	8004d48 <USB_FlushRxFifo>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b18:	461a      	mov	r2, r3
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b24:	461a      	mov	r2, r3
 8004b26:	2300      	movs	r3, #0
 8004b28:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b30:	461a      	mov	r2, r3
 8004b32:	2300      	movs	r3, #0
 8004b34:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b36:	2300      	movs	r3, #0
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	e043      	b.n	8004bc4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b52:	d118      	bne.n	8004b86 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10a      	bne.n	8004b70 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b66:	461a      	mov	r2, r3
 8004b68:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	e013      	b.n	8004b98 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	e008      	b.n	8004b98 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b92:	461a      	mov	r2, r3
 8004b94:	2300      	movs	r3, #0
 8004b96:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004bbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004bc8:	461a      	mov	r2, r3
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d3b5      	bcc.n	8004b3c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	613b      	str	r3, [r7, #16]
 8004bd4:	e043      	b.n	8004c5e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004be8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bec:	d118      	bne.n	8004c20 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10a      	bne.n	8004c0a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c00:	461a      	mov	r2, r3
 8004c02:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	e013      	b.n	8004c32 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c16:	461a      	mov	r2, r3
 8004c18:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	e008      	b.n	8004c32 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	2300      	movs	r3, #0
 8004c30:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c3e:	461a      	mov	r2, r3
 8004c40:	2300      	movs	r3, #0
 8004c42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c50:	461a      	mov	r2, r3
 8004c52:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c62:	461a      	mov	r2, r3
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d3b5      	bcc.n	8004bd6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c7c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004c8a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	f043 0210 	orr.w	r2, r3, #16
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699a      	ldr	r2, [r3, #24]
 8004c9c:	4b10      	ldr	r3, [pc, #64]	@ (8004ce0 <USB_DevInit+0x28c>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ca4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	f043 0208 	orr.w	r2, r3, #8
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004cb8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d107      	bne.n	8004cd0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004cc8:	f043 0304 	orr.w	r3, r3, #4
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cdc:	b004      	add	sp, #16
 8004cde:	4770      	bx	lr
 8004ce0:	803c3800 	.word	0x803c3800

08004ce4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cfe:	d901      	bls.n	8004d04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e01b      	b.n	8004d3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	daf2      	bge.n	8004cf2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	019b      	lsls	r3, r3, #6
 8004d14:	f043 0220 	orr.w	r2, r3, #32
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d28:	d901      	bls.n	8004d2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e006      	b.n	8004d3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	d0f0      	beq.n	8004d1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3301      	adds	r3, #1
 8004d58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d60:	d901      	bls.n	8004d66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e018      	b.n	8004d98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	daf2      	bge.n	8004d54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2210      	movs	r2, #16
 8004d76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d84:	d901      	bls.n	8004d8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e006      	b.n	8004d98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	2b10      	cmp	r3, #16
 8004d94:	d0f0      	beq.n	8004d78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	68f9      	ldr	r1, [r7, #12]
 8004dc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b085      	sub	sp, #20
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004df0:	f023 0303 	bic.w	r3, r3, #3
 8004df4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e04:	f043 0302 	orr.w	r3, r3, #2
 8004e08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	f003 0301 	and.w	r3, r3, #1
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	3301      	adds	r3, #1
 8004e44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e4c:	d901      	bls.n	8004e52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e01b      	b.n	8004e8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	daf2      	bge.n	8004e40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f043 0201 	orr.w	r2, r3, #1
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e76:	d901      	bls.n	8004e7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e006      	b.n	8004e8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d0f0      	beq.n	8004e6a <USB_CoreReset+0x36>

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
	...

08004e98 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d009      	beq.n	8004ebc <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8004ea8:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004eaa:	461a      	mov	r2, r3
        err.type, err.code);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004eb2:	6839      	ldr	r1, [r7, #0]
 8004eb4:	4807      	ldr	r0, [pc, #28]	@ (8004ed4 <ai_log_err+0x3c>)
 8004eb6:	f002 ff01 	bl	8007cbc <iprintf>
 8004eba:	e009      	b.n	8004ed0 <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8004ebc:	793b      	ldrb	r3, [r7, #4]
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	4803      	ldr	r0, [pc, #12]	@ (8004ed8 <ai_log_err+0x40>)
 8004eca:	f002 fef7 	bl	8007cbc <iprintf>

  do {} while (1);
 8004ece:	bf00      	nop
 8004ed0:	bf00      	nop
 8004ed2:	e7fd      	b.n	8004ed0 <ai_log_err+0x38>
 8004ed4:	0800a440 	.word	0x0800a440
 8004ed8:	0800a474 	.word	0x0800a474

08004edc <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_emgclassifier_create_and_init(&emgclassifier, act_addr, NULL);
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	4828      	ldr	r0, [pc, #160]	@ (8004f8c <ai_boostrap+0xb0>)
 8004eea:	f000 fa41 	bl	8005370 <ai_emgclassifier_create_and_init>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8004ef2:	7b3b      	ldrb	r3, [r7, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d006      	beq.n	8004f06 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_emgclassifier_create_and_init");
 8004ef8:	4925      	ldr	r1, [pc, #148]	@ (8004f90 <ai_boostrap+0xb4>)
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f7ff ffcc 	bl	8004e98 <ai_log_err>
    return -1;
 8004f00:	f04f 33ff 	mov.w	r3, #4294967295
 8004f04:	e03e      	b.n	8004f84 <ai_boostrap+0xa8>
  }

  ai_input = ai_emgclassifier_inputs_get(emgclassifier, NULL);
 8004f06:	4b21      	ldr	r3, [pc, #132]	@ (8004f8c <ai_boostrap+0xb0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 faad 	bl	800546c <ai_emgclassifier_inputs_get>
 8004f12:	4603      	mov	r3, r0
 8004f14:	4a1f      	ldr	r2, [pc, #124]	@ (8004f94 <ai_boostrap+0xb8>)
 8004f16:	6013      	str	r3, [r2, #0]
  ai_output = ai_emgclassifier_outputs_get(emgclassifier, NULL);
 8004f18:	4b1c      	ldr	r3, [pc, #112]	@ (8004f8c <ai_boostrap+0xb0>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fabe 	bl	80054a0 <ai_emgclassifier_outputs_get>
 8004f24:	4603      	mov	r3, r0
 8004f26:	4a1c      	ldr	r2, [pc, #112]	@ (8004f98 <ai_boostrap+0xbc>)
 8004f28:	6013      	str	r3, [r2, #0]

#if defined(AI_EMGCLASSIFIER_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_EMGCLASSIFIER_IN_NUM; idx++) {
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	e00f      	b.n	8004f50 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8004f30:	4b18      	ldr	r3, [pc, #96]	@ (8004f94 <ai_boostrap+0xb8>)
 8004f32:	6819      	ldr	r1, [r3, #0]
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4613      	mov	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	4916      	ldr	r1, [pc, #88]	@ (8004f9c <ai_boostrap+0xc0>)
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_EMGCLASSIFIER_IN_NUM; idx++) {
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	ddec      	ble.n	8004f30 <ai_boostrap+0x54>

#if defined(AI_EMGCLASSIFIER_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_EMGCLASSIFIER_OUT_NUM; idx++) {
 8004f56:	2300      	movs	r3, #0
 8004f58:	613b      	str	r3, [r7, #16]
 8004f5a:	e00f      	b.n	8004f7c <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8004f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f98 <ai_boostrap+0xbc>)
 8004f5e:	6819      	ldr	r1, [r3, #0]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4613      	mov	r3, r2
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	1a9b      	subs	r3, r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	490c      	ldr	r1, [pc, #48]	@ (8004fa0 <ai_boostrap+0xc4>)
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_EMGCLASSIFIER_OUT_NUM; idx++) {
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	ddec      	ble.n	8004f5c <ai_boostrap+0x80>
  for (int idx=0; idx < AI_EMGCLASSIFIER_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20001330 	.word	0x20001330
 8004f90:	0800a4a4 	.word	0x0800a4a4
 8004f94:	20001334 	.word	0x20001334
 8004f98:	20001338 	.word	0x20001338
 8004f9c:	20001148 	.word	0x20001148
 8004fa0:	2000114c 	.word	0x2000114c

08004fa4 <ai_run>:

static int ai_run(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_emgclassifier_run(emgclassifier, ai_input, ai_output);
 8004faa:	4b0f      	ldr	r3, [pc, #60]	@ (8004fe8 <ai_run+0x44>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a0f      	ldr	r2, [pc, #60]	@ (8004fec <ai_run+0x48>)
 8004fb0:	6811      	ldr	r1, [r2, #0]
 8004fb2:	4a0f      	ldr	r2, [pc, #60]	@ (8004ff0 <ai_run+0x4c>)
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fac8 	bl	800554c <ai_emgclassifier_run>
 8004fbc:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d00c      	beq.n	8004fde <ai_run+0x3a>
    ai_log_err(ai_emgclassifier_get_error(emgclassifier),
 8004fc4:	4b08      	ldr	r3, [pc, #32]	@ (8004fe8 <ai_run+0x44>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 f9af 	bl	800532c <ai_emgclassifier_get_error>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	4908      	ldr	r1, [pc, #32]	@ (8004ff4 <ai_run+0x50>)
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff ff60 	bl	8004e98 <ai_log_err>
        "ai_emgclassifier_run");
    return -1;
 8004fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fdc:	e000      	b.n	8004fe0 <ai_run+0x3c>
  }

  return 0;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	20001330 	.word	0x20001330
 8004fec:	20001334 	.word	0x20001334
 8004ff0:	20001338 	.word	0x20001338
 8004ff4:	0800a4c8 	.word	0x0800a4c8

08004ff8 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <post_process>:

int post_process(ai_i8* data[])
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8005028:	4803      	ldr	r0, [pc, #12]	@ (8005038 <MX_X_CUBE_AI_Init+0x14>)
 800502a:	f002 feaf 	bl	8007d8c <puts>

  ai_boostrap(data_activations0);
 800502e:	4803      	ldr	r0, [pc, #12]	@ (800503c <MX_X_CUBE_AI_Init+0x18>)
 8005030:	f7ff ff54 	bl	8004edc <ai_boostrap>
    /* USER CODE END 5 */
}
 8005034:	bf00      	nop
 8005036:	bd80      	pop	{r7, pc}
 8005038:	0800a4e0 	.word	0x0800a4e0
 800503c:	2000000c 	.word	0x2000000c

08005040 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 8005046:	f04f 33ff 	mov.w	r3, #4294967295
 800504a:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 800504c:	4816      	ldr	r0, [pc, #88]	@ (80050a8 <MX_X_CUBE_AI_Process+0x68>)
 800504e:	f002 fe9d 	bl	8007d8c <puts>

  if (emgclassifier) {
 8005052:	4b16      	ldr	r3, [pc, #88]	@ (80050ac <MX_X_CUBE_AI_Process+0x6c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d013      	beq.n	8005082 <MX_X_CUBE_AI_Process+0x42>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 800505a:	4815      	ldr	r0, [pc, #84]	@ (80050b0 <MX_X_CUBE_AI_Process+0x70>)
 800505c:	f7ff ffcc 	bl	8004ff8 <acquire_and_process_data>
 8005060:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d102      	bne.n	800506e <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 8005068:	f7ff ff9c 	bl	8004fa4 <ai_run>
 800506c:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d103      	bne.n	800507c <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 8005074:	480f      	ldr	r0, [pc, #60]	@ (80050b4 <MX_X_CUBE_AI_Process+0x74>)
 8005076:	f7ff ffca 	bl	800500e <post_process>
 800507a:	6078      	str	r0, [r7, #4]
    } while (res==0);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0eb      	beq.n	800505a <MX_X_CUBE_AI_Process+0x1a>
  }

  if (res) {
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <MX_X_CUBE_AI_Process+0x5e>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8005088:	2311      	movs	r3, #17
 800508a:	703b      	strb	r3, [r7, #0]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2210      	movs	r2, #16
 8005090:	f362 231f 	bfi	r3, r2, #8, #24
 8005094:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 8005096:	4908      	ldr	r1, [pc, #32]	@ (80050b8 <MX_X_CUBE_AI_Process+0x78>)
 8005098:	6838      	ldr	r0, [r7, #0]
 800509a:	f7ff fefd 	bl	8004e98 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	0800a500 	.word	0x0800a500
 80050ac:	20001330 	.word	0x20001330
 80050b0:	20001148 	.word	0x20001148
 80050b4:	2000114c 	.word	0x2000114c
 80050b8:	0800a51c 	.word	0x0800a51c

080050bc <emgclassifier_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool emgclassifier_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_emgclassifier_activations_map, 1, params)) {
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	2101      	movs	r1, #1
 80050ca:	4832      	ldr	r0, [pc, #200]	@ (8005194 <emgclassifier_configure_activations+0xd8>)
 80050cc:	f000 fb18 	bl	8005700 <ai_platform_get_activations_map>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d053      	beq.n	800517e <emgclassifier_configure_activations+0xc2>
    /* Updating activations (byte) offsets */
    
    serving_default_keras_tensor0_output_array.data = AI_PTR(g_emgclassifier_activations_map[0] + 0);
 80050d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005194 <emgclassifier_configure_activations+0xd8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a2f      	ldr	r2, [pc, #188]	@ (8005198 <emgclassifier_configure_activations+0xdc>)
 80050dc:	6093      	str	r3, [r2, #8]
    serving_default_keras_tensor0_output_array.data_start = AI_PTR(g_emgclassifier_activations_map[0] + 0);
 80050de:	4b2d      	ldr	r3, [pc, #180]	@ (8005194 <emgclassifier_configure_activations+0xd8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a2d      	ldr	r2, [pc, #180]	@ (8005198 <emgclassifier_configure_activations+0xdc>)
 80050e4:	60d3      	str	r3, [r2, #12]
    gemm_0_output_array.data = AI_PTR(g_emgclassifier_activations_map[0] + 208);
 80050e6:	4b2b      	ldr	r3, [pc, #172]	@ (8005194 <emgclassifier_configure_activations+0xd8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	33d0      	adds	r3, #208	@ 0xd0
 80050ec:	4a2b      	ldr	r2, [pc, #172]	@ (800519c <emgclassifier_configure_activations+0xe0>)
 80050ee:	6093      	str	r3, [r2, #8]
    gemm_0_output_array.data_start = AI_PTR(g_emgclassifier_activations_map[0] + 208);
 80050f0:	4b28      	ldr	r3, [pc, #160]	@ (8005194 <emgclassifier_configure_activations+0xd8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	33d0      	adds	r3, #208	@ 0xd0
 80050f6:	4a29      	ldr	r2, [pc, #164]	@ (800519c <emgclassifier_configure_activations+0xe0>)
 80050f8:	60d3      	str	r3, [r2, #12]
    nl_0_nl_output_array.data = AI_PTR(g_emgclassifier_activations_map[0] + 208);
 80050fa:	4b26      	ldr	r3, [pc, #152]	@ (8005194 <emgclassifier_configure_activations+0xd8>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	33d0      	adds	r3, #208	@ 0xd0
 8005100:	4a27      	ldr	r2, [pc, #156]	@ (80051a0 <emgclassifier_configure_activations+0xe4>)
 8005102:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_emgclassifier_activations_map[0] + 208);
 8005104:	4b23      	ldr	r3, [pc, #140]	@ (8005194 <emgclassifier_configure_activations+0xd8>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	33d0      	adds	r3, #208	@ 0xd0
 800510a:	4a25      	ldr	r2, [pc, #148]	@ (80051a0 <emgclassifier_configure_activations+0xe4>)
 800510c:	60d3      	str	r3, [r2, #12]
    gemm_1_output_array.data = AI_PTR(g_emgclassifier_activations_map[0] + 0);
 800510e:	4b21      	ldr	r3, [pc, #132]	@ (8005194 <emgclassifier_configure_activations+0xd8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a24      	ldr	r2, [pc, #144]	@ (80051a4 <emgclassifier_configure_activations+0xe8>)
 8005114:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_emgclassifier_activations_map[0] + 0);
 8005116:	4b1f      	ldr	r3, [pc, #124]	@ (8005194 <emgclassifier_configure_activations+0xd8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a22      	ldr	r2, [pc, #136]	@ (80051a4 <emgclassifier_configure_activations+0xe8>)
 800511c:	60d3      	str	r3, [r2, #12]
    nl_1_nl_output_array.data = AI_PTR(g_emgclassifier_activations_map[0] + 128);
 800511e:	4b1d      	ldr	r3, [pc, #116]	@ (8005194 <emgclassifier_configure_activations+0xd8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3380      	adds	r3, #128	@ 0x80
 8005124:	4a20      	ldr	r2, [pc, #128]	@ (80051a8 <emgclassifier_configure_activations+0xec>)
 8005126:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_emgclassifier_activations_map[0] + 128);
 8005128:	4b1a      	ldr	r3, [pc, #104]	@ (8005194 <emgclassifier_configure_activations+0xd8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3380      	adds	r3, #128	@ 0x80
 800512e:	4a1e      	ldr	r2, [pc, #120]	@ (80051a8 <emgclassifier_configure_activations+0xec>)
 8005130:	60d3      	str	r3, [r2, #12]
    gemm_2_output_array.data = AI_PTR(g_emgclassifier_activations_map[0] + 0);
 8005132:	4b18      	ldr	r3, [pc, #96]	@ (8005194 <emgclassifier_configure_activations+0xd8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a1d      	ldr	r2, [pc, #116]	@ (80051ac <emgclassifier_configure_activations+0xf0>)
 8005138:	6093      	str	r3, [r2, #8]
    gemm_2_output_array.data_start = AI_PTR(g_emgclassifier_activations_map[0] + 0);
 800513a:	4b16      	ldr	r3, [pc, #88]	@ (8005194 <emgclassifier_configure_activations+0xd8>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a1b      	ldr	r2, [pc, #108]	@ (80051ac <emgclassifier_configure_activations+0xf0>)
 8005140:	60d3      	str	r3, [r2, #12]
    nl_2_nl_output_array.data = AI_PTR(g_emgclassifier_activations_map[0] + 128);
 8005142:	4b14      	ldr	r3, [pc, #80]	@ (8005194 <emgclassifier_configure_activations+0xd8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3380      	adds	r3, #128	@ 0x80
 8005148:	4a19      	ldr	r2, [pc, #100]	@ (80051b0 <emgclassifier_configure_activations+0xf4>)
 800514a:	6093      	str	r3, [r2, #8]
    nl_2_nl_output_array.data_start = AI_PTR(g_emgclassifier_activations_map[0] + 128);
 800514c:	4b11      	ldr	r3, [pc, #68]	@ (8005194 <emgclassifier_configure_activations+0xd8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3380      	adds	r3, #128	@ 0x80
 8005152:	4a17      	ldr	r2, [pc, #92]	@ (80051b0 <emgclassifier_configure_activations+0xf4>)
 8005154:	60d3      	str	r3, [r2, #12]
    gemm_3_output_array.data = AI_PTR(g_emgclassifier_activations_map[0] + 0);
 8005156:	4b0f      	ldr	r3, [pc, #60]	@ (8005194 <emgclassifier_configure_activations+0xd8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a16      	ldr	r2, [pc, #88]	@ (80051b4 <emgclassifier_configure_activations+0xf8>)
 800515c:	6093      	str	r3, [r2, #8]
    gemm_3_output_array.data_start = AI_PTR(g_emgclassifier_activations_map[0] + 0);
 800515e:	4b0d      	ldr	r3, [pc, #52]	@ (8005194 <emgclassifier_configure_activations+0xd8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a14      	ldr	r2, [pc, #80]	@ (80051b4 <emgclassifier_configure_activations+0xf8>)
 8005164:	60d3      	str	r3, [r2, #12]
    nl_4_output_array.data = AI_PTR(g_emgclassifier_activations_map[0] + 20);
 8005166:	4b0b      	ldr	r3, [pc, #44]	@ (8005194 <emgclassifier_configure_activations+0xd8>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3314      	adds	r3, #20
 800516c:	4a12      	ldr	r2, [pc, #72]	@ (80051b8 <emgclassifier_configure_activations+0xfc>)
 800516e:	6093      	str	r3, [r2, #8]
    nl_4_output_array.data_start = AI_PTR(g_emgclassifier_activations_map[0] + 20);
 8005170:	4b08      	ldr	r3, [pc, #32]	@ (8005194 <emgclassifier_configure_activations+0xd8>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3314      	adds	r3, #20
 8005176:	4a10      	ldr	r2, [pc, #64]	@ (80051b8 <emgclassifier_configure_activations+0xfc>)
 8005178:	60d3      	str	r3, [r2, #12]
    return true;
 800517a:	2301      	movs	r3, #1
 800517c:	e005      	b.n	800518a <emgclassifier_configure_activations+0xce>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800517e:	2213      	movs	r2, #19
 8005180:	2130      	movs	r1, #48	@ 0x30
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fb3e 	bl	8005804 <ai_platform_network_set_error>
  return false;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	2000133c 	.word	0x2000133c
 8005198:	20000010 	.word	0x20000010
 800519c:	20000020 	.word	0x20000020
 80051a0:	20000030 	.word	0x20000030
 80051a4:	20000040 	.word	0x20000040
 80051a8:	20000050 	.word	0x20000050
 80051ac:	20000060 	.word	0x20000060
 80051b0:	20000070 	.word	0x20000070
 80051b4:	20000080 	.word	0x20000080
 80051b8:	20000090 	.word	0x20000090

080051bc <emgclassifier_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool emgclassifier_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_emgclassifier_weights_map, 1, params)) {
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	2101      	movs	r1, #1
 80051ca:	484f      	ldr	r0, [pc, #316]	@ (8005308 <emgclassifier_configure_weights+0x14c>)
 80051cc:	f000 fa44 	bl	8005658 <ai_platform_get_weights_map>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 808e 	beq.w	80052f4 <emgclassifier_configure_weights+0x138>
    /* Updating weights (byte) offsets */
    
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80051d8:	4b4c      	ldr	r3, [pc, #304]	@ (800530c <emgclassifier_configure_weights+0x150>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051e0:	4a4a      	ldr	r2, [pc, #296]	@ (800530c <emgclassifier_configure_weights+0x150>)
 80051e2:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_emgclassifier_weights_map[0] + 0);
 80051e4:	4b48      	ldr	r3, [pc, #288]	@ (8005308 <emgclassifier_configure_weights+0x14c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a48      	ldr	r2, [pc, #288]	@ (800530c <emgclassifier_configure_weights+0x150>)
 80051ea:	6093      	str	r3, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_emgclassifier_weights_map[0] + 0);
 80051ec:	4b46      	ldr	r3, [pc, #280]	@ (8005308 <emgclassifier_configure_weights+0x14c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a46      	ldr	r2, [pc, #280]	@ (800530c <emgclassifier_configure_weights+0x150>)
 80051f2:	60d3      	str	r3, [r2, #12]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80051f4:	4b46      	ldr	r3, [pc, #280]	@ (8005310 <emgclassifier_configure_weights+0x154>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051fc:	4a44      	ldr	r2, [pc, #272]	@ (8005310 <emgclassifier_configure_weights+0x154>)
 80051fe:	6013      	str	r3, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_emgclassifier_weights_map[0] + 13312);
 8005200:	4b41      	ldr	r3, [pc, #260]	@ (8005308 <emgclassifier_configure_weights+0x14c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f503 5350 	add.w	r3, r3, #13312	@ 0x3400
 8005208:	4a41      	ldr	r2, [pc, #260]	@ (8005310 <emgclassifier_configure_weights+0x154>)
 800520a:	6093      	str	r3, [r2, #8]
    gemm_0_bias_array.data_start = AI_PTR(g_emgclassifier_weights_map[0] + 13312);
 800520c:	4b3e      	ldr	r3, [pc, #248]	@ (8005308 <emgclassifier_configure_weights+0x14c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f503 5350 	add.w	r3, r3, #13312	@ 0x3400
 8005214:	4a3e      	ldr	r2, [pc, #248]	@ (8005310 <emgclassifier_configure_weights+0x154>)
 8005216:	60d3      	str	r3, [r2, #12]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005218:	4b3e      	ldr	r3, [pc, #248]	@ (8005314 <emgclassifier_configure_weights+0x158>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005220:	4a3c      	ldr	r2, [pc, #240]	@ (8005314 <emgclassifier_configure_weights+0x158>)
 8005222:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_emgclassifier_weights_map[0] + 13568);
 8005224:	4b38      	ldr	r3, [pc, #224]	@ (8005308 <emgclassifier_configure_weights+0x14c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f503 5354 	add.w	r3, r3, #13568	@ 0x3500
 800522c:	4a39      	ldr	r2, [pc, #228]	@ (8005314 <emgclassifier_configure_weights+0x158>)
 800522e:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_emgclassifier_weights_map[0] + 13568);
 8005230:	4b35      	ldr	r3, [pc, #212]	@ (8005308 <emgclassifier_configure_weights+0x14c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f503 5354 	add.w	r3, r3, #13568	@ 0x3500
 8005238:	4a36      	ldr	r2, [pc, #216]	@ (8005314 <emgclassifier_configure_weights+0x158>)
 800523a:	60d3      	str	r3, [r2, #12]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800523c:	4b36      	ldr	r3, [pc, #216]	@ (8005318 <emgclassifier_configure_weights+0x15c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005244:	4a34      	ldr	r2, [pc, #208]	@ (8005318 <emgclassifier_configure_weights+0x15c>)
 8005246:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_emgclassifier_weights_map[0] + 21760);
 8005248:	4b2f      	ldr	r3, [pc, #188]	@ (8005308 <emgclassifier_configure_weights+0x14c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f503 43aa 	add.w	r3, r3, #21760	@ 0x5500
 8005250:	4a31      	ldr	r2, [pc, #196]	@ (8005318 <emgclassifier_configure_weights+0x15c>)
 8005252:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_emgclassifier_weights_map[0] + 21760);
 8005254:	4b2c      	ldr	r3, [pc, #176]	@ (8005308 <emgclassifier_configure_weights+0x14c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f503 43aa 	add.w	r3, r3, #21760	@ 0x5500
 800525c:	4a2e      	ldr	r2, [pc, #184]	@ (8005318 <emgclassifier_configure_weights+0x15c>)
 800525e:	60d3      	str	r3, [r2, #12]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8005260:	4b2e      	ldr	r3, [pc, #184]	@ (800531c <emgclassifier_configure_weights+0x160>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005268:	4a2c      	ldr	r2, [pc, #176]	@ (800531c <emgclassifier_configure_weights+0x160>)
 800526a:	6013      	str	r3, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_emgclassifier_weights_map[0] + 21888);
 800526c:	4b26      	ldr	r3, [pc, #152]	@ (8005308 <emgclassifier_configure_weights+0x14c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f503 43ab 	add.w	r3, r3, #21888	@ 0x5580
 8005274:	4a29      	ldr	r2, [pc, #164]	@ (800531c <emgclassifier_configure_weights+0x160>)
 8005276:	6093      	str	r3, [r2, #8]
    gemm_2_weights_array.data_start = AI_PTR(g_emgclassifier_weights_map[0] + 21888);
 8005278:	4b23      	ldr	r3, [pc, #140]	@ (8005308 <emgclassifier_configure_weights+0x14c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f503 43ab 	add.w	r3, r3, #21888	@ 0x5580
 8005280:	4a26      	ldr	r2, [pc, #152]	@ (800531c <emgclassifier_configure_weights+0x160>)
 8005282:	60d3      	str	r3, [r2, #12]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8005284:	4b26      	ldr	r3, [pc, #152]	@ (8005320 <emgclassifier_configure_weights+0x164>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800528c:	4a24      	ldr	r2, [pc, #144]	@ (8005320 <emgclassifier_configure_weights+0x164>)
 800528e:	6013      	str	r3, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_emgclassifier_weights_map[0] + 25984);
 8005290:	4b1d      	ldr	r3, [pc, #116]	@ (8005308 <emgclassifier_configure_weights+0x14c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f503 43cb 	add.w	r3, r3, #25984	@ 0x6580
 8005298:	4a21      	ldr	r2, [pc, #132]	@ (8005320 <emgclassifier_configure_weights+0x164>)
 800529a:	6093      	str	r3, [r2, #8]
    gemm_2_bias_array.data_start = AI_PTR(g_emgclassifier_weights_map[0] + 25984);
 800529c:	4b1a      	ldr	r3, [pc, #104]	@ (8005308 <emgclassifier_configure_weights+0x14c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f503 43cb 	add.w	r3, r3, #25984	@ 0x6580
 80052a4:	4a1e      	ldr	r2, [pc, #120]	@ (8005320 <emgclassifier_configure_weights+0x164>)
 80052a6:	60d3      	str	r3, [r2, #12]
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80052a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005324 <emgclassifier_configure_weights+0x168>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005324 <emgclassifier_configure_weights+0x168>)
 80052b2:	6013      	str	r3, [r2, #0]
    gemm_3_weights_array.data = AI_PTR(g_emgclassifier_weights_map[0] + 26112);
 80052b4:	4b14      	ldr	r3, [pc, #80]	@ (8005308 <emgclassifier_configure_weights+0x14c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f503 43cc 	add.w	r3, r3, #26112	@ 0x6600
 80052bc:	4a19      	ldr	r2, [pc, #100]	@ (8005324 <emgclassifier_configure_weights+0x168>)
 80052be:	6093      	str	r3, [r2, #8]
    gemm_3_weights_array.data_start = AI_PTR(g_emgclassifier_weights_map[0] + 26112);
 80052c0:	4b11      	ldr	r3, [pc, #68]	@ (8005308 <emgclassifier_configure_weights+0x14c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f503 43cc 	add.w	r3, r3, #26112	@ 0x6600
 80052c8:	4a16      	ldr	r2, [pc, #88]	@ (8005324 <emgclassifier_configure_weights+0x168>)
 80052ca:	60d3      	str	r3, [r2, #12]
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 80052cc:	4b16      	ldr	r3, [pc, #88]	@ (8005328 <emgclassifier_configure_weights+0x16c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052d4:	4a14      	ldr	r2, [pc, #80]	@ (8005328 <emgclassifier_configure_weights+0x16c>)
 80052d6:	6013      	str	r3, [r2, #0]
    gemm_3_bias_array.data = AI_PTR(g_emgclassifier_weights_map[0] + 26752);
 80052d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005308 <emgclassifier_configure_weights+0x14c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f503 43d1 	add.w	r3, r3, #26752	@ 0x6880
 80052e0:	4a11      	ldr	r2, [pc, #68]	@ (8005328 <emgclassifier_configure_weights+0x16c>)
 80052e2:	6093      	str	r3, [r2, #8]
    gemm_3_bias_array.data_start = AI_PTR(g_emgclassifier_weights_map[0] + 26752);
 80052e4:	4b08      	ldr	r3, [pc, #32]	@ (8005308 <emgclassifier_configure_weights+0x14c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f503 43d1 	add.w	r3, r3, #26752	@ 0x6880
 80052ec:	4a0e      	ldr	r2, [pc, #56]	@ (8005328 <emgclassifier_configure_weights+0x16c>)
 80052ee:	60d3      	str	r3, [r2, #12]
    return true;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e005      	b.n	8005300 <emgclassifier_configure_weights+0x144>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80052f4:	2212      	movs	r2, #18
 80052f6:	2130      	movs	r1, #48	@ 0x30
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 fa83 	bl	8005804 <ai_platform_network_set_error>
  return false;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	20001340 	.word	0x20001340
 800530c:	200000a0 	.word	0x200000a0
 8005310:	200000b0 	.word	0x200000b0
 8005314:	200000c0 	.word	0x200000c0
 8005318:	200000d0 	.word	0x200000d0
 800531c:	200000e0 	.word	0x200000e0
 8005320:	200000f0 	.word	0x200000f0
 8005324:	20000100 	.word	0x20000100
 8005328:	20000110 	.word	0x20000110

0800532c <ai_emgclassifier_get_error>:
}


AI_API_ENTRY
ai_error ai_emgclassifier_get_error(ai_handle network)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fa59 	bl	80057ec <ai_platform_network_get_error>
 800533a:	4603      	mov	r3, r0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <ai_emgclassifier_create>:


AI_API_ENTRY
ai_error ai_emgclassifier_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af02      	add	r7, sp, #8
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800534e:	2300      	movs	r3, #0
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	2305      	movs	r3, #5
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	2301      	movs	r3, #1
 8005358:	4a04      	ldr	r2, [pc, #16]	@ (800536c <ai_emgclassifier_create+0x28>)
 800535a:	6839      	ldr	r1, [r7, #0]
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fb41 	bl	80059e4 <ai_platform_network_create>
 8005362:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005364:	4618      	mov	r0, r3
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	20000880 	.word	0x20000880

08005370 <ai_emgclassifier_create_and_init>:


AI_API_ENTRY
ai_error ai_emgclassifier_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b094      	sub	sp, #80	@ 0x50
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_emgclassifier_create(network, AI_EMGCLASSIFIER_DATA_CONFIG);
 800537c:	2100      	movs	r1, #0
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f7ff ffe0 	bl	8005344 <ai_emgclassifier_create>
 8005384:	4603      	mov	r3, r0
 8005386:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8005388:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <ai_emgclassifier_create_and_init+0x24>
    return err;
 8005390:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005392:	e067      	b.n	8005464 <ai_emgclassifier_create_and_init+0xf4>
  }
  
  if (ai_emgclassifier_data_params_get(&params) != true) {
 8005394:	f107 0310 	add.w	r3, r7, #16
 8005398:	4618      	mov	r0, r3
 800539a:	f000 f8e7 	bl	800556c <ai_emgclassifier_data_params_get>
 800539e:	4603      	mov	r3, r0
 80053a0:	f083 0301 	eor.w	r3, r3, #1
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d008      	beq.n	80053bc <ai_emgclassifier_create_and_init+0x4c>
    err = ai_emgclassifier_get_error(*network);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff ffbc 	bl	800532c <ai_emgclassifier_get_error>
 80053b4:	4603      	mov	r3, r0
 80053b6:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 80053b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053ba:	e053      	b.n	8005464 <ai_emgclassifier_create_and_init+0xf4>
  }
#if defined(AI_EMGCLASSIFIER_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80053bc:	2300      	movs	r3, #0
 80053be:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80053c2:	e012      	b.n	80053ea <ai_emgclassifier_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80053c4:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 80053c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	4413      	add	r3, r2
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	f107 0310 	add.w	r3, r7, #16
 80053d8:	330c      	adds	r3, #12
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 f92c 	bl	8005638 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80053e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80053e4:	3301      	adds	r3, #1
 80053e6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d004      	beq.n	80053fa <ai_emgclassifier_create_and_init+0x8a>
 80053f0:	8bfb      	ldrh	r3, [r7, #30]
 80053f2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d3e4      	bcc.n	80053c4 <ai_emgclassifier_create_and_init+0x54>
  }
#endif
#if defined(AI_EMGCLASSIFIER_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80053fa:	2300      	movs	r3, #0
 80053fc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005400:	e012      	b.n	8005428 <ai_emgclassifier_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8005402:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 8005406:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	4413      	add	r3, r2
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	f107 0310 	add.w	r3, r7, #16
 8005416:	3304      	adds	r3, #4
 8005418:	4618      	mov	r0, r3
 800541a:	f000 f90d 	bl	8005638 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800541e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005422:	3301      	adds	r3, #1
 8005424:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d004      	beq.n	8005438 <ai_emgclassifier_create_and_init+0xc8>
 800542e:	8afb      	ldrh	r3, [r7, #22]
 8005430:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8005434:	429a      	cmp	r2, r3
 8005436:	d3e4      	bcc.n	8005402 <ai_emgclassifier_create_and_init+0x92>
  }
#endif
  if (ai_emgclassifier_init(*network, &params) != true) {
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f107 0210 	add.w	r2, r7, #16
 8005440:	4611      	mov	r1, r2
 8005442:	4618      	mov	r0, r3
 8005444:	f000 f846 	bl	80054d4 <ai_emgclassifier_init>
 8005448:	4603      	mov	r3, r0
 800544a:	f083 0301 	eor.w	r3, r3, #1
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d006      	beq.n	8005462 <ai_emgclassifier_create_and_init+0xf2>
    err = ai_emgclassifier_get_error(*network);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4618      	mov	r0, r3
 800545a:	f7ff ff67 	bl	800532c <ai_emgclassifier_get_error>
 800545e:	4603      	mov	r3, r0
 8005460:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8005462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005464:	4618      	mov	r0, r3
 8005466:	3750      	adds	r7, #80	@ 0x50
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <ai_emgclassifier_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_emgclassifier_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d104      	bne.n	8005486 <ai_emgclassifier_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800547c:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <ai_emgclassifier_inputs_get+0x2c>)
 800547e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a06      	ldr	r2, [pc, #24]	@ (800549c <ai_emgclassifier_inputs_get+0x30>)
 8005484:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f9c1 	bl	8005810 <ai_platform_inputs_get>
 800548e:	4603      	mov	r3, r0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	20000880 	.word	0x20000880
 800549c:	a1c00100 	.word	0xa1c00100

080054a0 <ai_emgclassifier_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_emgclassifier_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d104      	bne.n	80054ba <ai_emgclassifier_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80054b0:	4b06      	ldr	r3, [pc, #24]	@ (80054cc <ai_emgclassifier_outputs_get+0x2c>)
 80054b2:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a06      	ldr	r2, [pc, #24]	@ (80054d0 <ai_emgclassifier_outputs_get+0x30>)
 80054b8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80054ba:	6839      	ldr	r1, [r7, #0]
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fa1d 	bl	80058fc <ai_platform_outputs_get>
 80054c2:	4603      	mov	r3, r0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	20000880 	.word	0x20000880
 80054d0:	a1c00100 	.word	0xa1c00100

080054d4 <ai_emgclassifier_init>:


AI_API_ENTRY
ai_bool ai_emgclassifier_init(
  ai_handle network, const ai_network_params* params)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 80054de:	6839      	ldr	r1, [r7, #0]
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fac1 	bl	8005a68 <ai_platform_network_init>
 80054e6:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 80054e8:	2301      	movs	r3, #1
 80054ea:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <ai_emgclassifier_init+0x22>
 80054f2:	2300      	movs	r3, #0
 80054f4:	e026      	b.n	8005544 <ai_emgclassifier_init+0x70>
  ok &= emgclassifier_configure_weights(net_ctx, params);
 80054f6:	6839      	ldr	r1, [r7, #0]
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f7ff fe5f 	bl	80051bc <emgclassifier_configure_weights>
 80054fe:	4603      	mov	r3, r0
 8005500:	461a      	mov	r2, r3
 8005502:	7afb      	ldrb	r3, [r7, #11]
 8005504:	4013      	ands	r3, r2
 8005506:	2b00      	cmp	r3, #0
 8005508:	bf14      	ite	ne
 800550a:	2301      	movne	r3, #1
 800550c:	2300      	moveq	r3, #0
 800550e:	72fb      	strb	r3, [r7, #11]
  ok &= emgclassifier_configure_activations(net_ctx, params);
 8005510:	6839      	ldr	r1, [r7, #0]
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f7ff fdd2 	bl	80050bc <emgclassifier_configure_activations>
 8005518:	4603      	mov	r3, r0
 800551a:	461a      	mov	r2, r3
 800551c:	7afb      	ldrb	r3, [r7, #11]
 800551e:	4013      	ands	r3, r2
 8005520:	2b00      	cmp	r3, #0
 8005522:	bf14      	ite	ne
 8005524:	2301      	movne	r3, #1
 8005526:	2300      	moveq	r3, #0
 8005528:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fb6a 	bl	8005c04 <ai_platform_network_post_init>
 8005530:	4603      	mov	r3, r0
 8005532:	461a      	mov	r2, r3
 8005534:	7afb      	ldrb	r3, [r7, #11]
 8005536:	4013      	ands	r3, r2
 8005538:	2b00      	cmp	r3, #0
 800553a:	bf14      	ite	ne
 800553c:	2301      	movne	r3, #1
 800553e:	2300      	moveq	r3, #0
 8005540:	72fb      	strb	r3, [r7, #11]

  return ok;
 8005542:	7afb      	ldrb	r3, [r7, #11]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <ai_emgclassifier_run>:


AI_API_ENTRY
ai_i32 ai_emgclassifier_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 fb81 	bl	8005c64 <ai_platform_network_process>
 8005562:	4603      	mov	r3, r0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <ai_emgclassifier_data_params_get>:
 * @ingroup emgclassifier_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_emgclassifier_data_params_get(ai_network_params* params)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <ai_emgclassifier_data_params_get+0x12>
 800557a:	2300      	movs	r3, #0
 800557c:	e016      	b.n	80055ac <ai_emgclassifier_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800557e:	4a0d      	ldr	r2, [pc, #52]	@ (80055b4 <ai_emgclassifier_data_params_get+0x48>)
 8005580:	f107 0310 	add.w	r3, r7, #16
 8005584:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005588:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_EMGCLASSIFIER_DATA_ACTIVATIONS_COUNT, g_emgclassifier_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800558c:	4a0a      	ldr	r2, [pc, #40]	@ (80055b8 <ai_emgclassifier_data_params_get+0x4c>)
 800558e:	f107 0308 	add.w	r3, r7, #8
 8005592:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005596:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_EMGCLASSIFIER_DATA_WEIGHTS_COUNT, g_emgclassifier_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800559a:	f107 0210 	add.w	r2, r7, #16
 800559e:	f107 0308 	add.w	r3, r7, #8
 80055a2:	4619      	mov	r1, r3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f8ff 	bl	80057a8 <ai_platform_bind_network_params>
 80055aa:	4603      	mov	r3, r0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	0800a550 	.word	0x0800a550
 80055b8:	0800a558 	.word	0x0800a558

080055bc <ai_buffer_get_size>:
 80055bc:	b378      	cbz	r0, 800561e <ai_buffer_get_size+0x62>
 80055be:	b410      	push	{r4}
 80055c0:	6803      	ldr	r3, [r0, #0]
 80055c2:	4a17      	ldr	r2, [pc, #92]	@ (8005620 <ai_buffer_get_size+0x64>)
 80055c4:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 80055c8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d01e      	beq.n	800560e <ai_buffer_get_size+0x52>
 80055d0:	6984      	ldr	r4, [r0, #24]
 80055d2:	6862      	ldr	r2, [r4, #4]
 80055d4:	7d03      	ldrb	r3, [r0, #20]
 80055d6:	6941      	ldr	r1, [r0, #20]
 80055d8:	f1a3 0301 	sub.w	r3, r3, #1
 80055dc:	fab3 f383 	clz	r3, r3
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80055e6:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80055ea:	da0b      	bge.n	8005604 <ai_buffer_get_size+0x48>
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d102      	bne.n	80055f6 <ai_buffer_get_size+0x3a>
 80055f0:	2802      	cmp	r0, #2
 80055f2:	d007      	beq.n	8005604 <ai_buffer_get_size+0x48>
 80055f4:	2302      	movs	r3, #2
 80055f6:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80055fa:	3301      	adds	r3, #1
 80055fc:	4298      	cmp	r0, r3
 80055fe:	fb01 f202 	mul.w	r2, r1, r2
 8005602:	d1f3      	bne.n	80055ec <ai_buffer_get_size+0x30>
 8005604:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8005608:	f85d 4b04 	ldr.w	r4, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	2900      	cmp	r1, #0
 8005610:	d0de      	beq.n	80055d0 <ai_buffer_get_size+0x14>
 8005612:	6984      	ldr	r4, [r0, #24]
 8005614:	6862      	ldr	r2, [r4, #4]
 8005616:	321f      	adds	r2, #31
 8005618:	f022 021f 	bic.w	r2, r2, #31
 800561c:	e7da      	b.n	80055d4 <ai_buffer_get_size+0x18>
 800561e:	4770      	bx	lr
 8005620:	000400c0 	.word	0x000400c0

08005624 <ai_buffer_array_sane>:
 8005624:	b138      	cbz	r0, 8005636 <ai_buffer_array_sane+0x12>
 8005626:	6843      	ldr	r3, [r0, #4]
 8005628:	b123      	cbz	r3, 8005634 <ai_buffer_array_sane+0x10>
 800562a:	8840      	ldrh	r0, [r0, #2]
 800562c:	3800      	subs	r0, #0
 800562e:	bf18      	it	ne
 8005630:	2001      	movne	r0, #1
 8005632:	4770      	bx	lr
 8005634:	4618      	mov	r0, r3
 8005636:	4770      	bx	lr

08005638 <ai_buffer_array_item_set_address>:
 8005638:	b150      	cbz	r0, 8005650 <ai_buffer_array_item_set_address+0x18>
 800563a:	6843      	ldr	r3, [r0, #4]
 800563c:	b14b      	cbz	r3, 8005652 <ai_buffer_array_item_set_address+0x1a>
 800563e:	8840      	ldrh	r0, [r0, #2]
 8005640:	b900      	cbnz	r0, 8005644 <ai_buffer_array_item_set_address+0xc>
 8005642:	4770      	bx	lr
 8005644:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005648:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800564c:	2001      	movs	r0, #1
 800564e:	605a      	str	r2, [r3, #4]
 8005650:	4770      	bx	lr
 8005652:	4618      	mov	r0, r3
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop

08005658 <ai_platform_get_weights_map>:
 8005658:	2a00      	cmp	r2, #0
 800565a:	d037      	beq.n	80056cc <ai_platform_get_weights_map+0x74>
 800565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565e:	4604      	mov	r4, r0
 8005660:	b1a0      	cbz	r0, 800568c <ai_platform_get_weights_map+0x34>
 8005662:	460f      	mov	r7, r1
 8005664:	b191      	cbz	r1, 800568c <ai_platform_get_weights_map+0x34>
 8005666:	4b25      	ldr	r3, [pc, #148]	@ (80056fc <ai_platform_get_weights_map+0xa4>)
 8005668:	6810      	ldr	r0, [r2, #0]
 800566a:	4298      	cmp	r0, r3
 800566c:	4615      	mov	r5, r2
 800566e:	d00f      	beq.n	8005690 <ai_platform_get_weights_map+0x38>
 8005670:	6855      	ldr	r5, [r2, #4]
 8005672:	b15d      	cbz	r5, 800568c <ai_platform_get_weights_map+0x34>
 8005674:	682e      	ldr	r6, [r5, #0]
 8005676:	429e      	cmp	r6, r3
 8005678:	d02a      	beq.n	80056d0 <ai_platform_get_weights_map+0x78>
 800567a:	f1a1 0001 	sub.w	r0, r1, #1
 800567e:	6025      	str	r5, [r4, #0]
 8005680:	fab0 f080 	clz	r0, r0
 8005684:	0940      	lsrs	r0, r0, #5
 8005686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005688:	42a7      	cmp	r7, r4
 800568a:	d034      	beq.n	80056f6 <ai_platform_get_weights_map+0x9e>
 800568c:	2000      	movs	r0, #0
 800568e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005690:	1d10      	adds	r0, r2, #4
 8005692:	f7ff ffc7 	bl	8005624 <ai_buffer_array_sane>
 8005696:	2800      	cmp	r0, #0
 8005698:	d0f8      	beq.n	800568c <ai_platform_get_weights_map+0x34>
 800569a:	88eb      	ldrh	r3, [r5, #6]
 800569c:	429f      	cmp	r7, r3
 800569e:	d1f5      	bne.n	800568c <ai_platform_get_weights_map+0x34>
 80056a0:	f04f 0c00 	mov.w	ip, #0
 80056a4:	1f20      	subs	r0, r4, #4
 80056a6:	46e6      	mov	lr, ip
 80056a8:	68ab      	ldr	r3, [r5, #8]
 80056aa:	4463      	add	r3, ip
 80056ac:	f10c 0c1c 	add.w	ip, ip, #28
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	b12b      	cbz	r3, 80056c0 <ai_platform_get_weights_map+0x68>
 80056b4:	f10e 0e01 	add.w	lr, lr, #1
 80056b8:	4577      	cmp	r7, lr
 80056ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80056be:	d1f3      	bne.n	80056a8 <ai_platform_get_weights_map+0x50>
 80056c0:	eba7 000e 	sub.w	r0, r7, lr
 80056c4:	fab0 f080 	clz	r0, r0
 80056c8:	0940      	lsrs	r0, r0, #5
 80056ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056cc:	2000      	movs	r0, #0
 80056ce:	4770      	bx	lr
 80056d0:	1f20      	subs	r0, r4, #4
 80056d2:	462a      	mov	r2, r5
 80056d4:	2400      	movs	r4, #0
 80056d6:	e000      	b.n	80056da <ai_platform_get_weights_map+0x82>
 80056d8:	461c      	mov	r4, r3
 80056da:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80056de:	42b3      	cmp	r3, r6
 80056e0:	d0d2      	beq.n	8005688 <ai_platform_get_weights_map+0x30>
 80056e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80056e6:	1c63      	adds	r3, r4, #1
 80056e8:	429f      	cmp	r7, r3
 80056ea:	d1f5      	bne.n	80056d8 <ai_platform_get_weights_map+0x80>
 80056ec:	3402      	adds	r4, #2
 80056ee:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80056f2:	42b3      	cmp	r3, r6
 80056f4:	d1ca      	bne.n	800568c <ai_platform_get_weights_map+0x34>
 80056f6:	2001      	movs	r0, #1
 80056f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056fa:	bf00      	nop
 80056fc:	a1facade 	.word	0xa1facade

08005700 <ai_platform_get_activations_map>:
 8005700:	2a00      	cmp	r2, #0
 8005702:	d038      	beq.n	8005776 <ai_platform_get_activations_map+0x76>
 8005704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005706:	4604      	mov	r4, r0
 8005708:	b1a0      	cbz	r0, 8005734 <ai_platform_get_activations_map+0x34>
 800570a:	460f      	mov	r7, r1
 800570c:	b191      	cbz	r1, 8005734 <ai_platform_get_activations_map+0x34>
 800570e:	4b25      	ldr	r3, [pc, #148]	@ (80057a4 <ai_platform_get_activations_map+0xa4>)
 8005710:	6810      	ldr	r0, [r2, #0]
 8005712:	4298      	cmp	r0, r3
 8005714:	4615      	mov	r5, r2
 8005716:	d00f      	beq.n	8005738 <ai_platform_get_activations_map+0x38>
 8005718:	6a15      	ldr	r5, [r2, #32]
 800571a:	b15d      	cbz	r5, 8005734 <ai_platform_get_activations_map+0x34>
 800571c:	682e      	ldr	r6, [r5, #0]
 800571e:	429e      	cmp	r6, r3
 8005720:	d02b      	beq.n	800577a <ai_platform_get_activations_map+0x7a>
 8005722:	f1a1 0001 	sub.w	r0, r1, #1
 8005726:	6025      	str	r5, [r4, #0]
 8005728:	fab0 f080 	clz	r0, r0
 800572c:	0940      	lsrs	r0, r0, #5
 800572e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005730:	42a7      	cmp	r7, r4
 8005732:	d035      	beq.n	80057a0 <ai_platform_get_activations_map+0xa0>
 8005734:	2000      	movs	r0, #0
 8005736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005738:	f102 000c 	add.w	r0, r2, #12
 800573c:	f7ff ff72 	bl	8005624 <ai_buffer_array_sane>
 8005740:	2800      	cmp	r0, #0
 8005742:	d0f7      	beq.n	8005734 <ai_platform_get_activations_map+0x34>
 8005744:	89eb      	ldrh	r3, [r5, #14]
 8005746:	429f      	cmp	r7, r3
 8005748:	d1f4      	bne.n	8005734 <ai_platform_get_activations_map+0x34>
 800574a:	f04f 0c00 	mov.w	ip, #0
 800574e:	1f20      	subs	r0, r4, #4
 8005750:	46e6      	mov	lr, ip
 8005752:	692b      	ldr	r3, [r5, #16]
 8005754:	4463      	add	r3, ip
 8005756:	f10c 0c1c 	add.w	ip, ip, #28
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	b12b      	cbz	r3, 800576a <ai_platform_get_activations_map+0x6a>
 800575e:	f10e 0e01 	add.w	lr, lr, #1
 8005762:	4577      	cmp	r7, lr
 8005764:	f840 3f04 	str.w	r3, [r0, #4]!
 8005768:	d1f3      	bne.n	8005752 <ai_platform_get_activations_map+0x52>
 800576a:	eba7 000e 	sub.w	r0, r7, lr
 800576e:	fab0 f080 	clz	r0, r0
 8005772:	0940      	lsrs	r0, r0, #5
 8005774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005776:	2000      	movs	r0, #0
 8005778:	4770      	bx	lr
 800577a:	1f20      	subs	r0, r4, #4
 800577c:	462a      	mov	r2, r5
 800577e:	2400      	movs	r4, #0
 8005780:	e000      	b.n	8005784 <ai_platform_get_activations_map+0x84>
 8005782:	461c      	mov	r4, r3
 8005784:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005788:	42b3      	cmp	r3, r6
 800578a:	d0d1      	beq.n	8005730 <ai_platform_get_activations_map+0x30>
 800578c:	f840 3f04 	str.w	r3, [r0, #4]!
 8005790:	1c63      	adds	r3, r4, #1
 8005792:	429f      	cmp	r7, r3
 8005794:	d1f5      	bne.n	8005782 <ai_platform_get_activations_map+0x82>
 8005796:	3402      	adds	r4, #2
 8005798:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800579c:	42b3      	cmp	r3, r6
 800579e:	d1c9      	bne.n	8005734 <ai_platform_get_activations_map+0x34>
 80057a0:	2001      	movs	r0, #1
 80057a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057a4:	a1facade 	.word	0xa1facade

080057a8 <ai_platform_bind_network_params>:
 80057a8:	b1a0      	cbz	r0, 80057d4 <ai_platform_bind_network_params+0x2c>
 80057aa:	b1b1      	cbz	r1, 80057da <ai_platform_bind_network_params+0x32>
 80057ac:	b1c2      	cbz	r2, 80057e0 <ai_platform_bind_network_params+0x38>
 80057ae:	b410      	push	{r4}
 80057b0:	4603      	mov	r3, r0
 80057b2:	4c0d      	ldr	r4, [pc, #52]	@ (80057e8 <ai_platform_bind_network_params+0x40>)
 80057b4:	f843 4b04 	str.w	r4, [r3], #4
 80057b8:	f100 0c0c 	add.w	ip, r0, #12
 80057bc:	c903      	ldmia	r1, {r0, r1}
 80057be:	e883 0003 	stmia.w	r3, {r0, r1}
 80057c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057c6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80057ca:	2301      	movs	r3, #1
 80057cc:	4618      	mov	r0, r3
 80057ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	4603      	mov	r3, r0
 80057d6:	4618      	mov	r0, r3
 80057d8:	4770      	bx	lr
 80057da:	460b      	mov	r3, r1
 80057dc:	4618      	mov	r0, r3
 80057de:	4770      	bx	lr
 80057e0:	4613      	mov	r3, r2
 80057e2:	4618      	mov	r0, r3
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	a1facade 	.word	0xa1facade

080057ec <ai_platform_network_get_error>:
 80057ec:	4b04      	ldr	r3, [pc, #16]	@ (8005800 <ai_platform_network_get_error+0x14>)
 80057ee:	6802      	ldr	r2, [r0, #0]
 80057f0:	4393      	bics	r3, r2
 80057f2:	d102      	bne.n	80057fa <ai_platform_network_get_error+0xe>
 80057f4:	300c      	adds	r0, #12
 80057f6:	f000 bc77 	b.w	80060e8 <core_get_error>
 80057fa:	f241 0010 	movw	r0, #4112	@ 0x1010
 80057fe:	4770      	bx	lr
 8005800:	a1c00100 	.word	0xa1c00100

08005804 <ai_platform_network_set_error>:
 8005804:	b110      	cbz	r0, 800580c <ai_platform_network_set_error+0x8>
 8005806:	300c      	adds	r0, #12
 8005808:	f000 bc74 	b.w	80060f4 <core_set_error>
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop

08005810 <ai_platform_inputs_get>:
 8005810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005814:	4b38      	ldr	r3, [pc, #224]	@ (80058f8 <ai_platform_inputs_get+0xe8>)
 8005816:	6802      	ldr	r2, [r0, #0]
 8005818:	b085      	sub	sp, #20
 800581a:	4393      	bics	r3, r2
 800581c:	9003      	str	r0, [sp, #12]
 800581e:	9102      	str	r1, [sp, #8]
 8005820:	d160      	bne.n	80058e4 <ai_platform_inputs_get+0xd4>
 8005822:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8005824:	2b00      	cmp	r3, #0
 8005826:	d04f      	beq.n	80058c8 <ai_platform_inputs_get+0xb8>
 8005828:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800582c:	f1ba 0f00 	cmp.w	sl, #0
 8005830:	d04a      	beq.n	80058c8 <ai_platform_inputs_get+0xb8>
 8005832:	f04f 0b00 	mov.w	fp, #0
 8005836:	465d      	mov	r5, fp
 8005838:	e016      	b.n	8005868 <ai_platform_inputs_get+0x58>
 800583a:	9901      	ldr	r1, [sp, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	507a      	str	r2, [r7, r1]
 8005840:	69b1      	ldr	r1, [r6, #24]
 8005842:	684e      	ldr	r6, [r1, #4]
 8005844:	60a3      	str	r3, [r4, #8]
 8005846:	f04f 0201 	mov.w	r2, #1
 800584a:	7522      	strb	r2, [r4, #20]
 800584c:	6961      	ldr	r1, [r4, #20]
 800584e:	6020      	str	r0, [r4, #0]
 8005850:	f369 211f 	bfi	r1, r9, #8, #24
 8005854:	2300      	movs	r3, #0
 8005856:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800585a:	e9c4 1805 	strd	r1, r8, [r4, #20]
 800585e:	f8c4 c004 	str.w	ip, [r4, #4]
 8005862:	3501      	adds	r5, #1
 8005864:	f10b 0b1c 	add.w	fp, fp, #28
 8005868:	f8ba 3000 	ldrh.w	r3, [sl]
 800586c:	42ab      	cmp	r3, r5
 800586e:	b2aa      	uxth	r2, r5
 8005870:	d93c      	bls.n	80058ec <ai_platform_inputs_get+0xdc>
 8005872:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005876:	00e9      	lsls	r1, r5, #3
 8005878:	9101      	str	r1, [sp, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d036      	beq.n	80058ec <ai_platform_inputs_get+0xdc>
 800587e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005882:	2e00      	cmp	r6, #0
 8005884:	d032      	beq.n	80058ec <ai_platform_inputs_get+0xdc>
 8005886:	f8da 3008 	ldr.w	r3, [sl, #8]
 800588a:	69b2      	ldr	r2, [r6, #24]
 800588c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8005890:	6810      	ldr	r0, [r2, #0]
 8005892:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005896:	68b3      	ldr	r3, [r6, #8]
 8005898:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800589c:	f001 fba0 	bl	8006fe0 <ai_array_to_buffer_fmt>
 80058a0:	69b1      	ldr	r1, [r6, #24]
 80058a2:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 80058a6:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80058aa:	445c      	add	r4, fp
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0c8      	beq.n	8005842 <ai_platform_inputs_get+0x32>
 80058b0:	2100      	movs	r1, #0
 80058b2:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80058b6:	6831      	ldr	r1, [r6, #0]
 80058b8:	6059      	str	r1, [r3, #4]
 80058ba:	b111      	cbz	r1, 80058c2 <ai_platform_inputs_get+0xb2>
 80058bc:	8849      	ldrh	r1, [r1, #2]
 80058be:	2900      	cmp	r1, #0
 80058c0:	d1bb      	bne.n	800583a <ai_platform_inputs_get+0x2a>
 80058c2:	69b1      	ldr	r1, [r6, #24]
 80058c4:	2300      	movs	r3, #0
 80058c6:	e7bc      	b.n	8005842 <ai_platform_inputs_get+0x32>
 80058c8:	9803      	ldr	r0, [sp, #12]
 80058ca:	2218      	movs	r2, #24
 80058cc:	2111      	movs	r1, #17
 80058ce:	300c      	adds	r0, #12
 80058d0:	f000 fc10 	bl	80060f4 <core_set_error>
 80058d4:	2200      	movs	r2, #0
 80058d6:	4610      	mov	r0, r2
 80058d8:	9b02      	ldr	r3, [sp, #8]
 80058da:	b103      	cbz	r3, 80058de <ai_platform_inputs_get+0xce>
 80058dc:	801a      	strh	r2, [r3, #0]
 80058de:	b005      	add	sp, #20
 80058e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e4:	2000      	movs	r0, #0
 80058e6:	b005      	add	sp, #20
 80058e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ec:	2a00      	cmp	r2, #0
 80058ee:	d0eb      	beq.n	80058c8 <ai_platform_inputs_get+0xb8>
 80058f0:	f8da 3008 	ldr.w	r3, [sl, #8]
 80058f4:	6858      	ldr	r0, [r3, #4]
 80058f6:	e7ef      	b.n	80058d8 <ai_platform_inputs_get+0xc8>
 80058f8:	a1c00100 	.word	0xa1c00100

080058fc <ai_platform_outputs_get>:
 80058fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005900:	4b37      	ldr	r3, [pc, #220]	@ (80059e0 <ai_platform_outputs_get+0xe4>)
 8005902:	6802      	ldr	r2, [r0, #0]
 8005904:	b085      	sub	sp, #20
 8005906:	4393      	bics	r3, r2
 8005908:	9003      	str	r0, [sp, #12]
 800590a:	9102      	str	r1, [sp, #8]
 800590c:	d15d      	bne.n	80059ca <ai_platform_outputs_get+0xce>
 800590e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8005910:	2b01      	cmp	r3, #1
 8005912:	d94c      	bls.n	80059ae <ai_platform_outputs_get+0xb2>
 8005914:	f04f 0b00 	mov.w	fp, #0
 8005918:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800591c:	465d      	mov	r5, fp
 800591e:	46d8      	mov	r8, fp
 8005920:	e016      	b.n	8005950 <ai_platform_outputs_get+0x54>
 8005922:	9a01      	ldr	r2, [sp, #4]
 8005924:	2101      	movs	r1, #1
 8005926:	50b9      	str	r1, [r7, r2]
 8005928:	69b2      	ldr	r2, [r6, #24]
 800592a:	6856      	ldr	r6, [r2, #4]
 800592c:	6020      	str	r0, [r4, #0]
 800592e:	f04f 0201 	mov.w	r2, #1
 8005932:	7522      	strb	r2, [r4, #20]
 8005934:	6960      	ldr	r0, [r4, #20]
 8005936:	f8c4 c004 	str.w	ip, [r4, #4]
 800593a:	f369 201f 	bfi	r0, r9, #8, #24
 800593e:	e9c4 6004 	strd	r6, r0, [r4, #16]
 8005942:	e9c4 3802 	strd	r3, r8, [r4, #8]
 8005946:	9b00      	ldr	r3, [sp, #0]
 8005948:	61a3      	str	r3, [r4, #24]
 800594a:	3501      	adds	r5, #1
 800594c:	f10b 0b1c 	add.w	fp, fp, #28
 8005950:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8005954:	42ab      	cmp	r3, r5
 8005956:	b2aa      	uxth	r2, r5
 8005958:	d93b      	bls.n	80059d2 <ai_platform_outputs_get+0xd6>
 800595a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800595e:	00e9      	lsls	r1, r5, #3
 8005960:	9101      	str	r1, [sp, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d035      	beq.n	80059d2 <ai_platform_outputs_get+0xd6>
 8005966:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800596a:	2e00      	cmp	r6, #0
 800596c:	d031      	beq.n	80059d2 <ai_platform_outputs_get+0xd6>
 800596e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005972:	69b2      	ldr	r2, [r6, #24]
 8005974:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005978:	68b3      	ldr	r3, [r6, #8]
 800597a:	6810      	ldr	r0, [r2, #0]
 800597c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8005980:	68f3      	ldr	r3, [r6, #12]
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	f001 fb2c 	bl	8006fe0 <ai_array_to_buffer_fmt>
 8005988:	69b2      	ldr	r2, [r6, #24]
 800598a:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800598e:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8005992:	445c      	add	r4, fp
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0c8      	beq.n	800592a <ai_platform_outputs_get+0x2e>
 8005998:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 800599c:	6832      	ldr	r2, [r6, #0]
 800599e:	605a      	str	r2, [r3, #4]
 80059a0:	b112      	cbz	r2, 80059a8 <ai_platform_outputs_get+0xac>
 80059a2:	8852      	ldrh	r2, [r2, #2]
 80059a4:	2a00      	cmp	r2, #0
 80059a6:	d1bc      	bne.n	8005922 <ai_platform_outputs_get+0x26>
 80059a8:	69b2      	ldr	r2, [r6, #24]
 80059aa:	2300      	movs	r3, #0
 80059ac:	e7bd      	b.n	800592a <ai_platform_outputs_get+0x2e>
 80059ae:	9803      	ldr	r0, [sp, #12]
 80059b0:	2218      	movs	r2, #24
 80059b2:	2111      	movs	r1, #17
 80059b4:	300c      	adds	r0, #12
 80059b6:	f000 fb9d 	bl	80060f4 <core_set_error>
 80059ba:	2200      	movs	r2, #0
 80059bc:	4610      	mov	r0, r2
 80059be:	9b02      	ldr	r3, [sp, #8]
 80059c0:	b103      	cbz	r3, 80059c4 <ai_platform_outputs_get+0xc8>
 80059c2:	801a      	strh	r2, [r3, #0]
 80059c4:	b005      	add	sp, #20
 80059c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ca:	2000      	movs	r0, #0
 80059cc:	b005      	add	sp, #20
 80059ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d2:	2a00      	cmp	r2, #0
 80059d4:	d0eb      	beq.n	80059ae <ai_platform_outputs_get+0xb2>
 80059d6:	f8da 3014 	ldr.w	r3, [sl, #20]
 80059da:	6858      	ldr	r0, [r3, #4]
 80059dc:	e7ef      	b.n	80059be <ai_platform_outputs_get+0xc2>
 80059de:	bf00      	nop
 80059e0:	a1c00100 	.word	0xa1c00100

080059e4 <ai_platform_network_create>:
 80059e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059e8:	b083      	sub	sp, #12
 80059ea:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 80059ee:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80059f2:	b320      	cbz	r0, 8005a3e <ai_platform_network_create+0x5a>
 80059f4:	6002      	str	r2, [r0, #0]
 80059f6:	4616      	mov	r6, r2
 80059f8:	461f      	mov	r7, r3
 80059fa:	4604      	mov	r4, r0
 80059fc:	f000 fb72 	bl	80060e4 <core_init>
 8005a00:	b970      	cbnz	r0, 8005a20 <ai_platform_network_create+0x3c>
 8005a02:	2530      	movs	r5, #48	@ 0x30
 8005a04:	2300      	movs	r3, #0
 8005a06:	6023      	str	r3, [r4, #0]
 8005a08:	2410      	movs	r4, #16
 8005a0a:	4642      	mov	r2, r8
 8005a0c:	4649      	mov	r1, r9
 8005a0e:	4638      	mov	r0, r7
 8005a10:	f001 fb68 	bl	80070e4 <ai_version_get>
 8005a14:	60b0      	str	r0, [r6, #8]
 8005a16:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8005a1a:	b003      	add	sp, #12
 8005a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a20:	2200      	movs	r2, #0
 8005a22:	4649      	mov	r1, r9
 8005a24:	4638      	mov	r0, r7
 8005a26:	f001 fb5d 	bl	80070e4 <ai_version_get>
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	4605      	mov	r5, r0
 8005a2e:	2105      	movs	r1, #5
 8005a30:	2001      	movs	r0, #1
 8005a32:	f001 fb57 	bl	80070e4 <ai_version_get>
 8005a36:	4285      	cmp	r5, r0
 8005a38:	d008      	beq.n	8005a4c <ai_platform_network_create+0x68>
 8005a3a:	2501      	movs	r5, #1
 8005a3c:	e7e2      	b.n	8005a04 <ai_platform_network_create+0x20>
 8005a3e:	2510      	movs	r5, #16
 8005a40:	462c      	mov	r4, r5
 8005a42:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8005a46:	b003      	add	sp, #12
 8005a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a4c:	4b05      	ldr	r3, [pc, #20]	@ (8005a64 <ai_platform_network_create+0x80>)
 8005a4e:	9301      	str	r3, [sp, #4]
 8005a50:	a801      	add	r0, sp, #4
 8005a52:	f000 fb5b 	bl	800610c <ai_check_custom_types>
 8005a56:	b110      	cbz	r0, 8005a5e <ai_platform_network_create+0x7a>
 8005a58:	2400      	movs	r4, #0
 8005a5a:	4625      	mov	r5, r4
 8005a5c:	e7d5      	b.n	8005a0a <ai_platform_network_create+0x26>
 8005a5e:	2502      	movs	r5, #2
 8005a60:	e7d0      	b.n	8005a04 <ai_platform_network_create+0x20>
 8005a62:	bf00      	nop
 8005a64:	84048403 	.word	0x84048403

08005a68 <ai_platform_network_init>:
 8005a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a6c:	4b63      	ldr	r3, [pc, #396]	@ (8005bfc <ai_platform_network_init+0x194>)
 8005a6e:	6802      	ldr	r2, [r0, #0]
 8005a70:	4393      	bics	r3, r2
 8005a72:	b083      	sub	sp, #12
 8005a74:	d156      	bne.n	8005b24 <ai_platform_network_init+0xbc>
 8005a76:	4604      	mov	r4, r0
 8005a78:	460f      	mov	r7, r1
 8005a7a:	2900      	cmp	r1, #0
 8005a7c:	f000 80a9 	beq.w	8005bd2 <ai_platform_network_init+0x16a>
 8005a80:	680b      	ldr	r3, [r1, #0]
 8005a82:	495f      	ldr	r1, [pc, #380]	@ (8005c00 <ai_platform_network_init+0x198>)
 8005a84:	428b      	cmp	r3, r1
 8005a86:	d113      	bne.n	8005ab0 <ai_platform_network_init+0x48>
 8005a88:	495c      	ldr	r1, [pc, #368]	@ (8005bfc <ai_platform_network_init+0x194>)
 8005a8a:	89bd      	ldrh	r5, [r7, #12]
 8005a8c:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 8005a90:	f8d7 8010 	ldr.w	r8, [r7, #16]
 8005a94:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 8005a98:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 8005a9c:	68be      	ldr	r6, [r7, #8]
 8005a9e:	428a      	cmp	r2, r1
 8005aa0:	d02c      	beq.n	8005afc <ai_platform_network_init+0x94>
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	6123      	str	r3, [r4, #16]
 8005aa6:	4627      	mov	r7, r4
 8005aa8:	4638      	mov	r0, r7
 8005aaa:	b003      	add	sp, #12
 8005aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	4638      	mov	r0, r7
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8005aba:	f7ff fd7f 	bl	80055bc <ai_buffer_get_size>
 8005abe:	f107 081c 	add.w	r8, r7, #28
 8005ac2:	4605      	mov	r5, r0
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	4640      	mov	r0, r8
 8005ac8:	463e      	mov	r6, r7
 8005aca:	6a3f      	ldr	r7, [r7, #32]
 8005acc:	f7ff fd76 	bl	80055bc <ai_buffer_get_size>
 8005ad0:	2d00      	cmp	r5, #0
 8005ad2:	9b01      	ldr	r3, [sp, #4]
 8005ad4:	bf0a      	itet	eq
 8005ad6:	46a9      	moveq	r9, r5
 8005ad8:	f04f 0901 	movne.w	r9, #1
 8005adc:	462e      	moveq	r6, r5
 8005ade:	b330      	cbz	r0, 8005b2e <ai_platform_network_init+0xc6>
 8005ae0:	2f00      	cmp	r7, #0
 8005ae2:	f000 8084 	beq.w	8005bee <ai_platform_network_init+0x186>
 8005ae6:	f04f 0a01 	mov.w	sl, #1
 8005aea:	f1bb 0f00 	cmp.w	fp, #0
 8005aee:	d021      	beq.n	8005b34 <ai_platform_network_init+0xcc>
 8005af0:	2500      	movs	r5, #0
 8005af2:	6822      	ldr	r2, [r4, #0]
 8005af4:	4941      	ldr	r1, [pc, #260]	@ (8005bfc <ai_platform_network_init+0x194>)
 8005af6:	428a      	cmp	r2, r1
 8005af8:	46ab      	mov	fp, r5
 8005afa:	d1d2      	bne.n	8005aa2 <ai_platform_network_init+0x3a>
 8005afc:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 8005afe:	454a      	cmp	r2, r9
 8005b00:	4a3f      	ldr	r2, [pc, #252]	@ (8005c00 <ai_platform_network_init+0x198>)
 8005b02:	d221      	bcs.n	8005b48 <ai_platform_network_init+0xe0>
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d15c      	bne.n	8005bc2 <ai_platform_network_init+0x15a>
 8005b08:	6266      	str	r6, [r4, #36]	@ 0x24
 8005b0a:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8005b0e:	f8a4 b020 	strh.w	fp, [r4, #32]
 8005b12:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 8005b16:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 8005b1a:	8525      	strh	r5, [r4, #40]	@ 0x28
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f000 fb1f 	bl	8006160 <ai_layers_init_all>
 8005b22:	e7be      	b.n	8005aa2 <ai_platform_network_init+0x3a>
 8005b24:	2700      	movs	r7, #0
 8005b26:	4638      	mov	r0, r7
 8005b28:	b003      	add	sp, #12
 8005b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b2e:	4680      	mov	r8, r0
 8005b30:	4682      	mov	sl, r0
 8005b32:	e7da      	b.n	8005aea <ai_platform_network_init+0x82>
 8005b34:	2d00      	cmp	r5, #0
 8005b36:	d0dc      	beq.n	8005af2 <ai_platform_network_init+0x8a>
 8005b38:	2212      	movs	r2, #18
 8005b3a:	2110      	movs	r1, #16
 8005b3c:	f104 000c 	add.w	r0, r4, #12
 8005b40:	f000 fad8 	bl	80060f4 <core_set_error>
 8005b44:	465f      	mov	r7, fp
 8005b46:	e7af      	b.n	8005aa8 <ai_platform_network_init+0x40>
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d0dd      	beq.n	8005b08 <ai_platform_network_init+0xa0>
 8005b4c:	f1b9 0f00 	cmp.w	r9, #0
 8005b50:	d018      	beq.n	8005b84 <ai_platform_network_init+0x11c>
 8005b52:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b5c:	2700      	movs	r7, #0
 8005b5e:	4699      	mov	r9, r3
 8005b60:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005b62:	eb06 0e07 	add.w	lr, r6, r7
 8005b66:	eb03 0c07 	add.w	ip, r3, r7
 8005b6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005b6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005b72:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8005b76:	371c      	adds	r7, #28
 8005b78:	45b9      	cmp	r9, r7
 8005b7a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005b7e:	d1ef      	bne.n	8005b60 <ai_platform_network_init+0xf8>
 8005b80:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005b84:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005b86:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8005b8a:	4553      	cmp	r3, sl
 8005b8c:	f8a4 b020 	strh.w	fp, [r4, #32]
 8005b90:	d325      	bcc.n	8005bde <ai_platform_network_init+0x176>
 8005b92:	f1ba 0f00 	cmp.w	sl, #0
 8005b96:	d0be      	beq.n	8005b16 <ai_platform_network_init+0xae>
 8005b98:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 8005b9c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005ba0:	f04f 0c00 	mov.w	ip, #0
 8005ba4:	eb08 070c 	add.w	r7, r8, ip
 8005ba8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005baa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005bac:	4466      	add	r6, ip
 8005bae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005bb0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005bb4:	f10c 0c1c 	add.w	ip, ip, #28
 8005bb8:	45f4      	cmp	ip, lr
 8005bba:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8005bbe:	d1f1      	bne.n	8005ba4 <ai_platform_network_init+0x13c>
 8005bc0:	e7a9      	b.n	8005b16 <ai_platform_network_init+0xae>
 8005bc2:	2212      	movs	r2, #18
 8005bc4:	2116      	movs	r1, #22
 8005bc6:	f104 000c 	add.w	r0, r4, #12
 8005bca:	f000 fa93 	bl	80060f4 <core_set_error>
 8005bce:	2700      	movs	r7, #0
 8005bd0:	e76a      	b.n	8005aa8 <ai_platform_network_init+0x40>
 8005bd2:	2211      	movs	r2, #17
 8005bd4:	2110      	movs	r1, #16
 8005bd6:	300c      	adds	r0, #12
 8005bd8:	f000 fa8c 	bl	80060f4 <core_set_error>
 8005bdc:	e764      	b.n	8005aa8 <ai_platform_network_init+0x40>
 8005bde:	2213      	movs	r2, #19
 8005be0:	2116      	movs	r1, #22
 8005be2:	f104 000c 	add.w	r0, r4, #12
 8005be6:	f000 fa85 	bl	80060f4 <core_set_error>
 8005bea:	2700      	movs	r7, #0
 8005bec:	e75c      	b.n	8005aa8 <ai_platform_network_init+0x40>
 8005bee:	2213      	movs	r2, #19
 8005bf0:	2110      	movs	r1, #16
 8005bf2:	f104 000c 	add.w	r0, r4, #12
 8005bf6:	f000 fa7d 	bl	80060f4 <core_set_error>
 8005bfa:	e755      	b.n	8005aa8 <ai_platform_network_init+0x40>
 8005bfc:	a1c00100 	.word	0xa1c00100
 8005c00:	a1facade 	.word	0xa1facade

08005c04 <ai_platform_network_post_init>:
 8005c04:	b538      	push	{r3, r4, r5, lr}
 8005c06:	4b16      	ldr	r3, [pc, #88]	@ (8005c60 <ai_platform_network_post_init+0x5c>)
 8005c08:	6802      	ldr	r2, [r0, #0]
 8005c0a:	ea02 0103 	and.w	r1, r2, r3
 8005c0e:	4393      	bics	r3, r2
 8005c10:	d108      	bne.n	8005c24 <ai_platform_network_post_init+0x20>
 8005c12:	6903      	ldr	r3, [r0, #16]
 8005c14:	f013 0502 	ands.w	r5, r3, #2
 8005c18:	4604      	mov	r4, r0
 8005c1a:	d005      	beq.n	8005c28 <ai_platform_network_post_init+0x24>
 8005c1c:	428a      	cmp	r2, r1
 8005c1e:	d00a      	beq.n	8005c36 <ai_platform_network_post_init+0x32>
 8005c20:	2001      	movs	r0, #1
 8005c22:	bd38      	pop	{r3, r4, r5, pc}
 8005c24:	2000      	movs	r0, #0
 8005c26:	bd38      	pop	{r3, r4, r5, pc}
 8005c28:	2210      	movs	r2, #16
 8005c2a:	2111      	movs	r1, #17
 8005c2c:	300c      	adds	r0, #12
 8005c2e:	f000 fa61 	bl	80060f4 <core_set_error>
 8005c32:	4628      	mov	r0, r5
 8005c34:	bd38      	pop	{r3, r4, r5, pc}
 8005c36:	f000 faa1 	bl	800617c <ai_layers_post_init_all>
 8005c3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0ef      	beq.n	8005c20 <ai_platform_network_post_init+0x1c>
 8005c40:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8005c42:	e008      	b.n	8005c56 <ai_platform_network_post_init+0x52>
 8005c44:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 8005c48:	4798      	blx	r3
 8005c4a:	692b      	ldr	r3, [r5, #16]
 8005c4c:	42ab      	cmp	r3, r5
 8005c4e:	d0e7      	beq.n	8005c20 <ai_platform_network_post_init+0x1c>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0e5      	beq.n	8005c20 <ai_platform_network_post_init+0x1c>
 8005c54:	461d      	mov	r5, r3
 8005c56:	4629      	mov	r1, r5
 8005c58:	2000      	movs	r0, #0
 8005c5a:	2d00      	cmp	r5, #0
 8005c5c:	d1f2      	bne.n	8005c44 <ai_platform_network_post_init+0x40>
 8005c5e:	e7df      	b.n	8005c20 <ai_platform_network_post_init+0x1c>
 8005c60:	a1c00100 	.word	0xa1c00100

08005c64 <ai_platform_network_process>:
 8005c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c68:	4bb5      	ldr	r3, [pc, #724]	@ (8005f40 <ai_platform_network_process+0x2dc>)
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	6800      	ldr	r0, [r0, #0]
 8005c6e:	b085      	sub	sp, #20
 8005c70:	4383      	bics	r3, r0
 8005c72:	9202      	str	r2, [sp, #8]
 8005c74:	f040 8140 	bne.w	8005ef8 <ai_platform_network_process+0x294>
 8005c78:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 8125 	beq.w	8005eca <ai_platform_network_process+0x266>
 8005c80:	692b      	ldr	r3, [r5, #16]
 8005c82:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	2700      	movs	r7, #0
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	61af      	str	r7, [r5, #24]
 8005c90:	f040 8137 	bne.w	8005f02 <ai_platform_network_process+0x29e>
 8005c94:	2900      	cmp	r1, #0
 8005c96:	f000 811e 	beq.w	8005ed6 <ai_platform_network_process+0x272>
 8005c9a:	f1ba 0f00 	cmp.w	sl, #0
 8005c9e:	f000 811a 	beq.w	8005ed6 <ai_platform_network_process+0x272>
 8005ca2:	f8ba 3000 	ldrh.w	r3, [sl]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 8115 	beq.w	8005ed6 <ai_platform_network_process+0x272>
 8005cac:	698b      	ldr	r3, [r1, #24]
 8005cae:	9503      	str	r5, [sp, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	9301      	str	r3, [sp, #4]
 8005cb4:	460e      	mov	r6, r1
 8005cb6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d072      	beq.n	8005da4 <ai_platform_network_process+0x140>
 8005cbe:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8005cc2:	2c00      	cmp	r4, #0
 8005cc4:	d06e      	beq.n	8005da4 <ai_platform_network_process+0x140>
 8005cc6:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005cca:	f8d3 9000 	ldr.w	r9, [r3]
 8005cce:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8005cd2:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8005cd6:	f000 81d3 	beq.w	8006080 <ai_platform_network_process+0x41c>
 8005cda:	69a3      	ldr	r3, [r4, #24]
 8005cdc:	2101      	movs	r1, #1
 8005cde:	4630      	mov	r0, r6
 8005ce0:	685d      	ldr	r5, [r3, #4]
 8005ce2:	f7ff fc6b 	bl	80055bc <ai_buffer_get_size>
 8005ce6:	4285      	cmp	r5, r0
 8005ce8:	f0c0 8116 	bcc.w	8005f18 <ai_platform_network_process+0x2b4>
 8005cec:	68e0      	ldr	r0, [r4, #12]
 8005cee:	69b1      	ldr	r1, [r6, #24]
 8005cf0:	68c2      	ldr	r2, [r0, #12]
 8005cf2:	68cb      	ldr	r3, [r1, #12]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	f040 810f 	bne.w	8005f18 <ai_platform_network_process+0x2b4>
 8005cfa:	6882      	ldr	r2, [r0, #8]
 8005cfc:	688b      	ldr	r3, [r1, #8]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	f040 810a 	bne.w	8005f18 <ai_platform_network_process+0x2b4>
 8005d04:	6842      	ldr	r2, [r0, #4]
 8005d06:	684b      	ldr	r3, [r1, #4]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	f040 8105 	bne.w	8005f18 <ai_platform_network_process+0x2b4>
 8005d0e:	69a3      	ldr	r3, [r4, #24]
 8005d10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d14:	f001 f9d4 	bl	80070c0 <ai_array_get_data_byte_size>
 8005d18:	4605      	mov	r5, r0
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f001 f9e8 	bl	80070f0 <get_tensor_byte_size>
 8005d20:	4285      	cmp	r5, r0
 8005d22:	f0c0 80f9 	bcc.w	8005f18 <ai_platform_network_process+0x2b4>
 8005d26:	69a3      	ldr	r3, [r4, #24]
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	f001 f959 	bl	8006fe0 <ai_array_to_buffer_fmt>
 8005d2e:	6833      	ldr	r3, [r6, #0]
 8005d30:	4058      	eors	r0, r3
 8005d32:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8005d36:	f040 81a5 	bne.w	8006084 <ai_platform_network_process+0x420>
 8005d3a:	6873      	ldr	r3, [r6, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 819f 	beq.w	8006080 <ai_platform_network_process+0x41c>
 8005d42:	69b3      	ldr	r3, [r6, #24]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 81a5 	beq.w	8006096 <ai_platform_network_process+0x432>
 8005d4c:	9a01      	ldr	r2, [sp, #4]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	bf38      	it	cc
 8005d52:	461a      	movcc	r2, r3
 8005d54:	4620      	mov	r0, r4
 8005d56:	9201      	str	r2, [sp, #4]
 8005d58:	f001 f9ca 	bl	80070f0 <get_tensor_byte_size>
 8005d5c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d60:	69b3      	ldr	r3, [r6, #24]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	fb00 f303 	mul.w	r3, r0, r3
 8005d68:	f8c8 300c 	str.w	r3, [r8, #12]
 8005d6c:	6871      	ldr	r1, [r6, #4]
 8005d6e:	f8c8 1004 	str.w	r1, [r8, #4]
 8005d72:	440b      	add	r3, r1
 8005d74:	f849 300b 	str.w	r3, [r9, fp]
 8005d78:	69a0      	ldr	r0, [r4, #24]
 8005d7a:	6803      	ldr	r3, [r0, #0]
 8005d7c:	009a      	lsls	r2, r3, #2
 8005d7e:	f107 0701 	add.w	r7, r7, #1
 8005d82:	f106 061c 	add.w	r6, r6, #28
 8005d86:	f100 80b1 	bmi.w	8005eec <ai_platform_network_process+0x288>
 8005d8a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005d8e:	1a9b      	subs	r3, r3, r2
 8005d90:	4419      	add	r1, r3
 8005d92:	6081      	str	r1, [r0, #8]
 8005d94:	69a3      	ldr	r3, [r4, #24]
 8005d96:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005d9a:	60da      	str	r2, [r3, #12]
 8005d9c:	f8ba 3000 	ldrh.w	r3, [sl]
 8005da0:	42bb      	cmp	r3, r7
 8005da2:	d888      	bhi.n	8005cb6 <ai_platform_network_process+0x52>
 8005da4:	9d03      	ldr	r5, [sp, #12]
 8005da6:	9b02      	ldr	r3, [sp, #8]
 8005da8:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 817c 	beq.w	80060a8 <ai_platform_network_process+0x444>
 8005db0:	2a01      	cmp	r2, #1
 8005db2:	f240 80bd 	bls.w	8005f30 <ai_platform_network_process+0x2cc>
 8005db6:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 8005dba:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 80b6 	beq.w	8005f30 <ai_platform_network_process+0x2cc>
 8005dc4:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005dc8:	2700      	movs	r7, #0
 8005dca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 80bd 	beq.w	8005f4e <ai_platform_network_process+0x2ea>
 8005dd4:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8005dd8:	2e00      	cmp	r6, #0
 8005dda:	f000 80b8 	beq.w	8005f4e <ai_platform_network_process+0x2ea>
 8005dde:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005de2:	681c      	ldr	r4, [r3, #0]
 8005de4:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 8005de8:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8005dec:	f000 8160 	beq.w	80060b0 <ai_platform_network_process+0x44c>
 8005df0:	69b3      	ldr	r3, [r6, #24]
 8005df2:	2101      	movs	r1, #1
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	9302      	str	r3, [sp, #8]
 8005df8:	4658      	mov	r0, fp
 8005dfa:	f7ff fbdf 	bl	80055bc <ai_buffer_get_size>
 8005dfe:	9b02      	ldr	r3, [sp, #8]
 8005e00:	4283      	cmp	r3, r0
 8005e02:	f0c0 8095 	bcc.w	8005f30 <ai_platform_network_process+0x2cc>
 8005e06:	68f0      	ldr	r0, [r6, #12]
 8005e08:	f8db 1018 	ldr.w	r1, [fp, #24]
 8005e0c:	68c2      	ldr	r2, [r0, #12]
 8005e0e:	68cb      	ldr	r3, [r1, #12]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	f040 808d 	bne.w	8005f30 <ai_platform_network_process+0x2cc>
 8005e16:	6882      	ldr	r2, [r0, #8]
 8005e18:	688b      	ldr	r3, [r1, #8]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	f040 8088 	bne.w	8005f30 <ai_platform_network_process+0x2cc>
 8005e20:	6842      	ldr	r2, [r0, #4]
 8005e22:	684b      	ldr	r3, [r1, #4]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	f040 8083 	bne.w	8005f30 <ai_platform_network_process+0x2cc>
 8005e2a:	69b3      	ldr	r3, [r6, #24]
 8005e2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e30:	f001 f946 	bl	80070c0 <ai_array_get_data_byte_size>
 8005e34:	9002      	str	r0, [sp, #8]
 8005e36:	4630      	mov	r0, r6
 8005e38:	f001 f95a 	bl	80070f0 <get_tensor_byte_size>
 8005e3c:	9b02      	ldr	r3, [sp, #8]
 8005e3e:	4283      	cmp	r3, r0
 8005e40:	d376      	bcc.n	8005f30 <ai_platform_network_process+0x2cc>
 8005e42:	69b3      	ldr	r3, [r6, #24]
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	f001 f8cb 	bl	8006fe0 <ai_array_to_buffer_fmt>
 8005e4a:	f8db 3000 	ldr.w	r3, [fp]
 8005e4e:	4058      	eors	r0, r3
 8005e50:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8005e54:	f040 8134 	bne.w	80060c0 <ai_platform_network_process+0x45c>
 8005e58:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 8127 	beq.w	80060b0 <ai_platform_network_process+0x44c>
 8005e62:	f8db 3018 	ldr.w	r3, [fp, #24]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 8133 	beq.w	80060d4 <ai_platform_network_process+0x470>
 8005e6e:	9a01      	ldr	r2, [sp, #4]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	bf38      	it	cc
 8005e74:	461a      	movcc	r2, r3
 8005e76:	4630      	mov	r0, r6
 8005e78:	9201      	str	r2, [sp, #4]
 8005e7a:	f001 f939 	bl	80070f0 <get_tensor_byte_size>
 8005e7e:	f8c9 0008 	str.w	r0, [r9, #8]
 8005e82:	f8db 3018 	ldr.w	r3, [fp, #24]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	fb00 f303 	mul.w	r3, r0, r3
 8005e8c:	f8c9 300c 	str.w	r3, [r9, #12]
 8005e90:	f8db 1004 	ldr.w	r1, [fp, #4]
 8005e94:	f8c9 1004 	str.w	r1, [r9, #4]
 8005e98:	440b      	add	r3, r1
 8005e9a:	f844 300a 	str.w	r3, [r4, sl]
 8005e9e:	69b0      	ldr	r0, [r6, #24]
 8005ea0:	6803      	ldr	r3, [r0, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	f107 0701 	add.w	r7, r7, #1
 8005ea8:	f10b 0b1c 	add.w	fp, fp, #28
 8005eac:	d44a      	bmi.n	8005f44 <ai_platform_network_process+0x2e0>
 8005eae:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005eb2:	1a9b      	subs	r3, r3, r2
 8005eb4:	4419      	add	r1, r3
 8005eb6:	6081      	str	r1, [r0, #8]
 8005eb8:	69b3      	ldr	r3, [r6, #24]
 8005eba:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8005ebe:	60da      	str	r2, [r3, #12]
 8005ec0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005ec4:	42bb      	cmp	r3, r7
 8005ec6:	d880      	bhi.n	8005dca <ai_platform_network_process+0x166>
 8005ec8:	e041      	b.n	8005f4e <ai_platform_network_process+0x2ea>
 8005eca:	692a      	ldr	r2, [r5, #16]
 8005ecc:	61ab      	str	r3, [r5, #24]
 8005ece:	f002 0203 	and.w	r2, r2, #3
 8005ed2:	2a03      	cmp	r2, #3
 8005ed4:	d115      	bne.n	8005f02 <ai_platform_network_process+0x29e>
 8005ed6:	2217      	movs	r2, #23
 8005ed8:	2112      	movs	r1, #18
 8005eda:	f105 000c 	add.w	r0, r5, #12
 8005ede:	f000 f909 	bl	80060f4 <core_set_error>
 8005ee2:	2400      	movs	r4, #0
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	b005      	add	sp, #20
 8005ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eec:	f8ba 3000 	ldrh.w	r3, [sl]
 8005ef0:	429f      	cmp	r7, r3
 8005ef2:	f4ff aee0 	bcc.w	8005cb6 <ai_platform_network_process+0x52>
 8005ef6:	e755      	b.n	8005da4 <ai_platform_network_process+0x140>
 8005ef8:	2400      	movs	r4, #0
 8005efa:	4620      	mov	r0, r4
 8005efc:	b005      	add	sp, #20
 8005efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f02:	2230      	movs	r2, #48	@ 0x30
 8005f04:	2111      	movs	r1, #17
 8005f06:	f105 000c 	add.w	r0, r5, #12
 8005f0a:	f000 f8f3 	bl	80060f4 <core_set_error>
 8005f0e:	2400      	movs	r4, #0
 8005f10:	4620      	mov	r0, r4
 8005f12:	b005      	add	sp, #20
 8005f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f18:	9d03      	ldr	r5, [sp, #12]
 8005f1a:	2218      	movs	r2, #24
 8005f1c:	2112      	movs	r1, #18
 8005f1e:	f105 000c 	add.w	r0, r5, #12
 8005f22:	f000 f8e7 	bl	80060f4 <core_set_error>
 8005f26:	2400      	movs	r4, #0
 8005f28:	4620      	mov	r0, r4
 8005f2a:	b005      	add	sp, #20
 8005f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f30:	2218      	movs	r2, #24
 8005f32:	2113      	movs	r1, #19
 8005f34:	f105 000c 	add.w	r0, r5, #12
 8005f38:	f000 f8dc 	bl	80060f4 <core_set_error>
 8005f3c:	2400      	movs	r4, #0
 8005f3e:	e7d1      	b.n	8005ee4 <ai_platform_network_process+0x280>
 8005f40:	a1c00100 	.word	0xa1c00100
 8005f44:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005f48:	429f      	cmp	r7, r3
 8005f4a:	f4ff af3e 	bcc.w	8005dca <ai_platform_network_process+0x166>
 8005f4e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005f52:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8005f54:	832b      	strh	r3, [r5, #24]
 8005f56:	2a00      	cmp	r2, #0
 8005f58:	f040 808c 	bne.w	8006074 <ai_platform_network_process+0x410>
 8005f5c:	4616      	mov	r6, r2
 8005f5e:	4617      	mov	r7, r2
 8005f60:	8b6c      	ldrh	r4, [r5, #26]
 8005f62:	429c      	cmp	r4, r3
 8005f64:	bf38      	it	cc
 8005f66:	46ab      	movcc	fp, r5
 8005f68:	d2bc      	bcs.n	8005ee4 <ai_platform_network_process+0x280>
 8005f6a:	2e00      	cmp	r6, #0
 8005f6c:	d030      	beq.n	8005fd0 <ai_platform_network_process+0x36c>
 8005f6e:	f04f 0800 	mov.w	r8, #0
 8005f72:	e014      	b.n	8005f9e <ai_platform_network_process+0x33a>
 8005f74:	6882      	ldr	r2, [r0, #8]
 8005f76:	68c5      	ldr	r5, [r0, #12]
 8005f78:	6863      	ldr	r3, [r4, #4]
 8005f7a:	1b52      	subs	r2, r2, r5
 8005f7c:	4413      	add	r3, r2
 8005f7e:	6083      	str	r3, [r0, #8]
 8005f80:	698b      	ldr	r3, [r1, #24]
 8005f82:	6862      	ldr	r2, [r4, #4]
 8005f84:	60da      	str	r2, [r3, #12]
 8005f86:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8005f8a:	f859 200a 	ldr.w	r2, [r9, sl]
 8005f8e:	440b      	add	r3, r1
 8005f90:	4293      	cmp	r3, r2
 8005f92:	bf24      	itt	cs
 8005f94:	68e3      	ldrcs	r3, [r4, #12]
 8005f96:	1ad3      	subcs	r3, r2, r3
 8005f98:	6063      	str	r3, [r4, #4]
 8005f9a:	f108 0801 	add.w	r8, r8, #1
 8005f9e:	8833      	ldrh	r3, [r6, #0]
 8005fa0:	4543      	cmp	r3, r8
 8005fa2:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8005fa6:	d913      	bls.n	8005fd0 <ai_platform_network_process+0x36c>
 8005fa8:	6873      	ldr	r3, [r6, #4]
 8005faa:	b18b      	cbz	r3, 8005fd0 <ai_platform_network_process+0x36c>
 8005fac:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8005fb0:	b171      	cbz	r1, 8005fd0 <ai_platform_network_process+0x36c>
 8005fb2:	6988      	ldr	r0, [r1, #24]
 8005fb4:	68b2      	ldr	r2, [r6, #8]
 8005fb6:	6803      	ldr	r3, [r0, #0]
 8005fb8:	f8d2 9000 	ldr.w	r9, [r2]
 8005fbc:	009d      	lsls	r5, r3, #2
 8005fbe:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8005fc2:	d5d7      	bpl.n	8005f74 <ai_platform_network_process+0x310>
 8005fc4:	6881      	ldr	r1, [r0, #8]
 8005fc6:	68a2      	ldr	r2, [r4, #8]
 8005fc8:	6860      	ldr	r0, [r4, #4]
 8005fca:	f000 ff67 	bl	8006e9c <st_int8_copy>
 8005fce:	e7da      	b.n	8005f86 <ai_platform_network_process+0x322>
 8005fd0:	4658      	mov	r0, fp
 8005fd2:	f000 f8e7 	bl	80061a4 <ai_layers_forward_all>
 8005fd6:	2f00      	cmp	r7, #0
 8005fd8:	d03d      	beq.n	8006056 <ai_platform_network_process+0x3f2>
 8005fda:	2400      	movs	r4, #0
 8005fdc:	e016      	b.n	800600c <ai_platform_network_process+0x3a8>
 8005fde:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8005fe2:	f859 100a 	ldr.w	r1, [r9, sl]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	428b      	cmp	r3, r1
 8005fea:	bf24      	itt	cs
 8005fec:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8005ff0:	1acb      	subcs	r3, r1, r3
 8005ff2:	f8c8 3004 	str.w	r3, [r8, #4]
 8005ff6:	6981      	ldr	r1, [r0, #24]
 8005ff8:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8005ffc:	1b52      	subs	r2, r2, r5
 8005ffe:	4413      	add	r3, r2
 8006000:	608b      	str	r3, [r1, #8]
 8006002:	6983      	ldr	r3, [r0, #24]
 8006004:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006008:	60da      	str	r2, [r3, #12]
 800600a:	3401      	adds	r4, #1
 800600c:	883b      	ldrh	r3, [r7, #0]
 800600e:	42a3      	cmp	r3, r4
 8006010:	d921      	bls.n	8006056 <ai_platform_network_process+0x3f2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	b1fb      	cbz	r3, 8006056 <ai_platform_network_process+0x3f2>
 8006016:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800601a:	b1e0      	cbz	r0, 8006056 <ai_platform_network_process+0x3f2>
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	6983      	ldr	r3, [r0, #24]
 8006020:	f8d2 9000 	ldr.w	r9, [r2]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	0092      	lsls	r2, r2, #2
 8006028:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800602c:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8006030:	d5d5      	bpl.n	8005fde <ai_platform_network_process+0x37a>
 8006032:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8006036:	6898      	ldr	r0, [r3, #8]
 8006038:	f000 ff30 	bl	8006e9c <st_int8_copy>
 800603c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8006040:	f859 200a 	ldr.w	r2, [r9, sl]
 8006044:	440b      	add	r3, r1
 8006046:	4293      	cmp	r3, r2
 8006048:	bf24      	itt	cs
 800604a:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800604e:	1ad3      	subcs	r3, r2, r3
 8006050:	f8c8 3004 	str.w	r3, [r8, #4]
 8006054:	e7d9      	b.n	800600a <ai_platform_network_process+0x3a6>
 8006056:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 800605a:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800605e:	3401      	adds	r4, #1
 8006060:	b2a4      	uxth	r4, r4
 8006062:	42a3      	cmp	r3, r4
 8006064:	f8ab 401a 	strh.w	r4, [fp, #26]
 8006068:	f63f af7f 	bhi.w	8005f6a <ai_platform_network_process+0x306>
 800606c:	4620      	mov	r0, r4
 800606e:	b005      	add	sp, #20
 8006070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006074:	2a01      	cmp	r2, #1
 8006076:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8006078:	d02a      	beq.n	80060d0 <ai_platform_network_process+0x46c>
 800607a:	f106 070c 	add.w	r7, r6, #12
 800607e:	e76f      	b.n	8005f60 <ai_platform_network_process+0x2fc>
 8006080:	9d03      	ldr	r5, [sp, #12]
 8006082:	e728      	b.n	8005ed6 <ai_platform_network_process+0x272>
 8006084:	9d03      	ldr	r5, [sp, #12]
 8006086:	2219      	movs	r2, #25
 8006088:	2112      	movs	r1, #18
 800608a:	f105 000c 	add.w	r0, r5, #12
 800608e:	f000 f831 	bl	80060f4 <core_set_error>
 8006092:	2400      	movs	r4, #0
 8006094:	e726      	b.n	8005ee4 <ai_platform_network_process+0x280>
 8006096:	9d03      	ldr	r5, [sp, #12]
 8006098:	4604      	mov	r4, r0
 800609a:	2221      	movs	r2, #33	@ 0x21
 800609c:	2112      	movs	r1, #18
 800609e:	f105 000c 	add.w	r0, r5, #12
 80060a2:	f000 f827 	bl	80060f4 <core_set_error>
 80060a6:	e71d      	b.n	8005ee4 <ai_platform_network_process+0x280>
 80060a8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80060ac:	832b      	strh	r3, [r5, #24]
 80060ae:	e752      	b.n	8005f56 <ai_platform_network_process+0x2f2>
 80060b0:	2217      	movs	r2, #23
 80060b2:	2113      	movs	r1, #19
 80060b4:	f105 000c 	add.w	r0, r5, #12
 80060b8:	f000 f81c 	bl	80060f4 <core_set_error>
 80060bc:	2400      	movs	r4, #0
 80060be:	e711      	b.n	8005ee4 <ai_platform_network_process+0x280>
 80060c0:	2219      	movs	r2, #25
 80060c2:	2113      	movs	r1, #19
 80060c4:	f105 000c 	add.w	r0, r5, #12
 80060c8:	f000 f814 	bl	80060f4 <core_set_error>
 80060cc:	2400      	movs	r4, #0
 80060ce:	e709      	b.n	8005ee4 <ai_platform_network_process+0x280>
 80060d0:	2700      	movs	r7, #0
 80060d2:	e745      	b.n	8005f60 <ai_platform_network_process+0x2fc>
 80060d4:	4604      	mov	r4, r0
 80060d6:	2221      	movs	r2, #33	@ 0x21
 80060d8:	2113      	movs	r1, #19
 80060da:	f105 000c 	add.w	r0, r5, #12
 80060de:	f000 f809 	bl	80060f4 <core_set_error>
 80060e2:	e6ff      	b.n	8005ee4 <ai_platform_network_process+0x280>

080060e4 <core_init>:
 80060e4:	2001      	movs	r0, #1
 80060e6:	4770      	bx	lr

080060e8 <core_get_error>:
 80060e8:	4603      	mov	r3, r0
 80060ea:	2200      	movs	r2, #0
 80060ec:	6800      	ldr	r0, [r0, #0]
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop

080060f4 <core_set_error>:
 80060f4:	4603      	mov	r3, r0
 80060f6:	7800      	ldrb	r0, [r0, #0]
 80060f8:	b108      	cbz	r0, 80060fe <core_set_error+0xa>
 80060fa:	2000      	movs	r0, #0
 80060fc:	4770      	bx	lr
 80060fe:	7019      	strb	r1, [r3, #0]
 8006100:	6819      	ldr	r1, [r3, #0]
 8006102:	f362 211f 	bfi	r1, r2, #8, #24
 8006106:	2001      	movs	r0, #1
 8006108:	6019      	str	r1, [r3, #0]
 800610a:	4770      	bx	lr

0800610c <ai_check_custom_types>:
 800610c:	b082      	sub	sp, #8
 800610e:	4b13      	ldr	r3, [pc, #76]	@ (800615c <ai_check_custom_types+0x50>)
 8006110:	9301      	str	r3, [sp, #4]
 8006112:	b118      	cbz	r0, 800611c <ai_check_custom_types+0x10>
 8006114:	7803      	ldrb	r3, [r0, #0]
 8006116:	2b03      	cmp	r3, #3
 8006118:	d002      	beq.n	8006120 <ai_check_custom_types+0x14>
 800611a:	2000      	movs	r0, #0
 800611c:	b002      	add	sp, #8
 800611e:	4770      	bx	lr
 8006120:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006124:	4293      	cmp	r3, r2
 8006126:	d004      	beq.n	8006132 <ai_check_custom_types+0x26>
 8006128:	2001      	movs	r0, #1
 800612a:	f080 0001 	eor.w	r0, r0, #1
 800612e:	b002      	add	sp, #8
 8006130:	4770      	bx	lr
 8006132:	7842      	ldrb	r2, [r0, #1]
 8006134:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006138:	429a      	cmp	r2, r3
 800613a:	f100 0001 	add.w	r0, r0, #1
 800613e:	d1f3      	bne.n	8006128 <ai_check_custom_types+0x1c>
 8006140:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006144:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006148:	429a      	cmp	r2, r3
 800614a:	d1ed      	bne.n	8006128 <ai_check_custom_types+0x1c>
 800614c:	7842      	ldrb	r2, [r0, #1]
 800614e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006152:	429a      	cmp	r2, r3
 8006154:	d1e8      	bne.n	8006128 <ai_check_custom_types+0x1c>
 8006156:	2000      	movs	r0, #0
 8006158:	e7e7      	b.n	800612a <ai_check_custom_types+0x1e>
 800615a:	bf00      	nop
 800615c:	84048403 	.word	0x84048403

08006160 <ai_layers_init_all>:
 8006160:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006162:	2100      	movs	r1, #0
 8006164:	b143      	cbz	r3, 8006178 <ai_layers_init_all+0x18>
 8006166:	691a      	ldr	r2, [r3, #16]
 8006168:	60d8      	str	r0, [r3, #12]
 800616a:	429a      	cmp	r2, r3
 800616c:	f101 0101 	add.w	r1, r1, #1
 8006170:	d002      	beq.n	8006178 <ai_layers_init_all+0x18>
 8006172:	b10a      	cbz	r2, 8006178 <ai_layers_init_all+0x18>
 8006174:	4613      	mov	r3, r2
 8006176:	e7f5      	b.n	8006164 <ai_layers_init_all+0x4>
 8006178:	4608      	mov	r0, r1
 800617a:	4770      	bx	lr

0800617c <ai_layers_post_init_all>:
 800617c:	b538      	push	{r3, r4, r5, lr}
 800617e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006180:	2500      	movs	r5, #0
 8006182:	b16c      	cbz	r4, 80061a0 <ai_layers_post_init_all+0x24>
 8006184:	6863      	ldr	r3, [r4, #4]
 8006186:	07db      	lsls	r3, r3, #31
 8006188:	d504      	bpl.n	8006194 <ai_layers_post_init_all+0x18>
 800618a:	6a23      	ldr	r3, [r4, #32]
 800618c:	4620      	mov	r0, r4
 800618e:	b10b      	cbz	r3, 8006194 <ai_layers_post_init_all+0x18>
 8006190:	4798      	blx	r3
 8006192:	3501      	adds	r5, #1
 8006194:	6923      	ldr	r3, [r4, #16]
 8006196:	42a3      	cmp	r3, r4
 8006198:	d002      	beq.n	80061a0 <ai_layers_post_init_all+0x24>
 800619a:	b10b      	cbz	r3, 80061a0 <ai_layers_post_init_all+0x24>
 800619c:	461c      	mov	r4, r3
 800619e:	e7f0      	b.n	8006182 <ai_layers_post_init_all+0x6>
 80061a0:	4628      	mov	r0, r5
 80061a2:	bd38      	pop	{r3, r4, r5, pc}

080061a4 <ai_layers_forward_all>:
 80061a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061a8:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 80061ac:	4604      	mov	r4, r0
 80061ae:	f1b8 0f00 	cmp.w	r8, #0
 80061b2:	d02b      	beq.n	800620c <ai_layers_forward_all+0x68>
 80061b4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80061b6:	63c1      	str	r1, [r0, #60]	@ 0x3c
 80061b8:	b321      	cbz	r1, 8006204 <ai_layers_forward_all+0x60>
 80061ba:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80061bc:	2001      	movs	r0, #1
 80061be:	47c0      	blx	r8
 80061c0:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 80061c2:	b1fe      	cbz	r6, 8006204 <ai_layers_forward_all+0x60>
 80061c4:	2700      	movs	r7, #0
 80061c6:	4631      	mov	r1, r6
 80061c8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80061ca:	2002      	movs	r0, #2
 80061cc:	47c0      	blx	r8
 80061ce:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80061d0:	4628      	mov	r0, r5
 80061d2:	696b      	ldr	r3, [r5, #20]
 80061d4:	4798      	blx	r3
 80061d6:	692e      	ldr	r6, [r5, #16]
 80061d8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80061da:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80061dc:	42b5      	cmp	r5, r6
 80061de:	f04f 0003 	mov.w	r0, #3
 80061e2:	d007      	beq.n	80061f4 <ai_layers_forward_all+0x50>
 80061e4:	47c0      	blx	r8
 80061e6:	3701      	adds	r7, #1
 80061e8:	63e6      	str	r6, [r4, #60]	@ 0x3c
 80061ea:	2e00      	cmp	r6, #0
 80061ec:	d1eb      	bne.n	80061c6 <ai_layers_forward_all+0x22>
 80061ee:	4638      	mov	r0, r7
 80061f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061f4:	2003      	movs	r0, #3
 80061f6:	47c0      	blx	r8
 80061f8:	2300      	movs	r3, #0
 80061fa:	3701      	adds	r7, #1
 80061fc:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80061fe:	4638      	mov	r0, r7
 8006200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006204:	2700      	movs	r7, #0
 8006206:	4638      	mov	r0, r7
 8006208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800620c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800620e:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8006210:	2d00      	cmp	r5, #0
 8006212:	d0f7      	beq.n	8006204 <ai_layers_forward_all+0x60>
 8006214:	4647      	mov	r7, r8
 8006216:	696b      	ldr	r3, [r5, #20]
 8006218:	4628      	mov	r0, r5
 800621a:	4798      	blx	r3
 800621c:	462b      	mov	r3, r5
 800621e:	692d      	ldr	r5, [r5, #16]
 8006220:	429d      	cmp	r5, r3
 8006222:	d004      	beq.n	800622e <ai_layers_forward_all+0x8a>
 8006224:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8006226:	3701      	adds	r7, #1
 8006228:	2d00      	cmp	r5, #0
 800622a:	d1f4      	bne.n	8006216 <ai_layers_forward_all+0x72>
 800622c:	e7df      	b.n	80061ee <ai_layers_forward_all+0x4a>
 800622e:	2300      	movs	r3, #0
 8006230:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8006232:	3701      	adds	r7, #1
 8006234:	e7db      	b.n	80061ee <ai_layers_forward_all+0x4a>
 8006236:	bf00      	nop

08006238 <forward_dense>:
 8006238:	6982      	ldr	r2, [r0, #24]
 800623a:	8813      	ldrh	r3, [r2, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d043      	beq.n	80062c8 <forward_dense+0x90>
 8006240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006244:	6855      	ldr	r5, [r2, #4]
 8006246:	6869      	ldr	r1, [r5, #4]
 8006248:	b08e      	sub	sp, #56	@ 0x38
 800624a:	b101      	cbz	r1, 800624e <forward_dense+0x16>
 800624c:	6809      	ldr	r1, [r1, #0]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d069      	beq.n	8006326 <forward_dense+0xee>
 8006252:	692a      	ldr	r2, [r5, #16]
 8006254:	b102      	cbz	r2, 8006258 <forward_dense+0x20>
 8006256:	6812      	ldr	r2, [r2, #0]
 8006258:	2b02      	cmp	r3, #2
 800625a:	d061      	beq.n	8006320 <forward_dense+0xe8>
 800625c:	69ec      	ldr	r4, [r5, #28]
 800625e:	2c00      	cmp	r4, #0
 8006260:	d057      	beq.n	8006312 <forward_dense+0xda>
 8006262:	8b2e      	ldrh	r6, [r5, #24]
 8006264:	6820      	ldr	r0, [r4, #0]
 8006266:	2e01      	cmp	r6, #1
 8006268:	d955      	bls.n	8006316 <forward_dense+0xde>
 800626a:	6864      	ldr	r4, [r4, #4]
 800626c:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8006270:	68cf      	ldr	r7, [r1, #12]
 8006272:	68d0      	ldr	r0, [r2, #12]
 8006274:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8006278:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800627c:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 8006280:	f8d9 0000 	ldr.w	r0, [r9]
 8006284:	2b03      	cmp	r3, #3
 8006286:	fb06 f807 	mul.w	r8, r6, r7
 800628a:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 800628e:	d044      	beq.n	800631a <forward_dense+0xe2>
 8006290:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 8006292:	b11d      	cbz	r5, 800629c <forward_dense+0x64>
 8006294:	682d      	ldr	r5, [r5, #0]
 8006296:	b10d      	cbz	r5, 800629c <forward_dense+0x64>
 8006298:	69ab      	ldr	r3, [r5, #24]
 800629a:	689d      	ldr	r5, [r3, #8]
 800629c:	6992      	ldr	r2, [r2, #24]
 800629e:	698b      	ldr	r3, [r1, #24]
 80062a0:	6890      	ldr	r0, [r2, #8]
 80062a2:	6899      	ldr	r1, [r3, #8]
 80062a4:	b10c      	cbz	r4, 80062aa <forward_dense+0x72>
 80062a6:	69a3      	ldr	r3, [r4, #24]
 80062a8:	689c      	ldr	r4, [r3, #8]
 80062aa:	4b20      	ldr	r3, [pc, #128]	@ (800632c <forward_dense+0xf4>)
 80062ac:	459c      	cmp	ip, r3
 80062ae:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 80062b2:	d023      	beq.n	80062fc <forward_dense+0xc4>
 80062b4:	4e1e      	ldr	r6, [pc, #120]	@ (8006330 <forward_dense+0xf8>)
 80062b6:	45b4      	cmp	ip, r6
 80062b8:	d015      	beq.n	80062e6 <forward_dense+0xae>
 80062ba:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 80062be:	459c      	cmp	ip, r3
 80062c0:	d004      	beq.n	80062cc <forward_dense+0x94>
 80062c2:	b00e      	add	sp, #56	@ 0x38
 80062c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	deff      	udf	#255	@ 0xff
 80062cc:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80062d0:	a807      	add	r0, sp, #28
 80062d2:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 80062d6:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 80062da:	9209      	str	r2, [sp, #36]	@ 0x24
 80062dc:	f000 f9f8 	bl	80066d0 <forward_lite_dense_if32of32wf32>
 80062e0:	b00e      	add	sp, #56	@ 0x38
 80062e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e6:	e9cd e803 	strd	lr, r8, [sp, #12]
 80062ea:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80062ee:	9500      	str	r5, [sp, #0]
 80062f0:	464b      	mov	r3, r9
 80062f2:	f000 fb47 	bl	8006984 <forward_lite_dense_if32of32wf32_lut4>
 80062f6:	b00e      	add	sp, #56	@ 0x38
 80062f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fc:	e9cd e803 	strd	lr, r8, [sp, #12]
 8006300:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8006304:	9500      	str	r5, [sp, #0]
 8006306:	464b      	mov	r3, r9
 8006308:	f000 fc64 	bl	8006bd4 <forward_lite_dense_if32of32wf32_lut8>
 800630c:	b00e      	add	sp, #56	@ 0x38
 800630e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006312:	4620      	mov	r0, r4
 8006314:	e7aa      	b.n	800626c <forward_dense+0x34>
 8006316:	2400      	movs	r4, #0
 8006318:	e7a8      	b.n	800626c <forward_dense+0x34>
 800631a:	2300      	movs	r3, #0
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	deff      	udf	#255	@ 0xff
 8006320:	2300      	movs	r3, #0
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	deff      	udf	#255	@ 0xff
 8006326:	2300      	movs	r3, #0
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	deff      	udf	#255	@ 0xff
 800632c:	00d01040 	.word	0x00d01040
 8006330:	00f01040 	.word	0x00f01040

08006334 <forward_relu>:
 8006334:	6982      	ldr	r2, [r0, #24]
 8006336:	8813      	ldrh	r3, [r2, #0]
 8006338:	b323      	cbz	r3, 8006384 <forward_relu+0x50>
 800633a:	6851      	ldr	r1, [r2, #4]
 800633c:	684a      	ldr	r2, [r1, #4]
 800633e:	b102      	cbz	r2, 8006342 <forward_relu+0xe>
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	2b01      	cmp	r3, #1
 8006344:	f000 808d 	beq.w	8006462 <forward_relu+0x12e>
 8006348:	b470      	push	{r4, r5, r6}
 800634a:	6909      	ldr	r1, [r1, #16]
 800634c:	b101      	cbz	r1, 8006350 <forward_relu+0x1c>
 800634e:	6809      	ldr	r1, [r1, #0]
 8006350:	69c6      	ldr	r6, [r0, #28]
 8006352:	b1ce      	cbz	r6, 8006388 <forward_relu+0x54>
 8006354:	6873      	ldr	r3, [r6, #4]
 8006356:	6988      	ldr	r0, [r1, #24]
 8006358:	6991      	ldr	r1, [r2, #24]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d044      	beq.n	80063e8 <forward_relu+0xb4>
 800635e:	6893      	ldr	r3, [r2, #8]
 8006360:	6880      	ldr	r0, [r0, #8]
 8006362:	6889      	ldr	r1, [r1, #8]
 8006364:	0a1b      	lsrs	r3, r3, #8
 8006366:	d073      	beq.n	8006450 <forward_relu+0x11c>
 8006368:	68d5      	ldr	r5, [r2, #12]
 800636a:	2201      	movs	r2, #1
 800636c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006370:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8006374:	429d      	cmp	r5, r3
 8006376:	fb04 f202 	mul.w	r2, r4, r2
 800637a:	d1f9      	bne.n	8006370 <forward_relu+0x3c>
 800637c:	68b3      	ldr	r3, [r6, #8]
 800637e:	bc70      	pop	{r4, r5, r6}
 8006380:	f000 b928 	b.w	80065d4 <forward_lite_nl_relu_generic_if32of32_kernel>
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	deff      	udf	#255	@ 0xff
 8006388:	6893      	ldr	r3, [r2, #8]
 800638a:	6989      	ldr	r1, [r1, #24]
 800638c:	6990      	ldr	r0, [r2, #24]
 800638e:	6889      	ldr	r1, [r1, #8]
 8006390:	6884      	ldr	r4, [r0, #8]
 8006392:	0a1b      	lsrs	r3, r3, #8
 8006394:	d05e      	beq.n	8006454 <forward_relu+0x120>
 8006396:	68d5      	ldr	r5, [r2, #12]
 8006398:	2201      	movs	r2, #1
 800639a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800639e:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80063a2:	429d      	cmp	r5, r3
 80063a4:	fb00 f202 	mul.w	r2, r0, r2
 80063a8:	d1f9      	bne.n	800639e <forward_relu+0x6a>
 80063aa:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 80063ae:	3b01      	subs	r3, #1
 80063b0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80063b4:	4294      	cmp	r4, r2
 80063b6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80063ba:	d813      	bhi.n	80063e4 <forward_relu+0xb0>
 80063bc:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8006468 <forward_relu+0x134>
 80063c0:	3204      	adds	r2, #4
 80063c2:	3104      	adds	r1, #4
 80063c4:	4613      	mov	r3, r2
 80063c6:	ed72 7a01 	vldmdb	r2!, {s15}
 80063ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063d2:	f1a3 0308 	sub.w	r3, r3, #8
 80063d6:	bfb8      	it	lt
 80063d8:	eef0 7a47 	vmovlt.f32	s15, s14
 80063dc:	429c      	cmp	r4, r3
 80063de:	ed61 7a01 	vstmdb	r1!, {s15}
 80063e2:	d9ef      	bls.n	80063c4 <forward_relu+0x90>
 80063e4:	bc70      	pop	{r4, r5, r6}
 80063e6:	4770      	bx	lr
 80063e8:	688c      	ldr	r4, [r1, #8]
 80063ea:	6891      	ldr	r1, [r2, #8]
 80063ec:	6880      	ldr	r0, [r0, #8]
 80063ee:	0a09      	lsrs	r1, r1, #8
 80063f0:	d032      	beq.n	8006458 <forward_relu+0x124>
 80063f2:	68d5      	ldr	r5, [r2, #12]
 80063f4:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80063f8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80063fc:	4295      	cmp	r5, r2
 80063fe:	fb01 f303 	mul.w	r3, r1, r3
 8006402:	d1f9      	bne.n	80063f8 <forward_relu+0xc4>
 8006404:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8006408:	3a01      	subs	r2, #1
 800640a:	68b1      	ldr	r1, [r6, #8]
 800640c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006410:	429c      	cmp	r4, r3
 8006412:	ed91 7a00 	vldr	s14, [r1]
 8006416:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800641a:	d8e3      	bhi.n	80063e4 <forward_relu+0xb0>
 800641c:	2500      	movs	r5, #0
 800641e:	3304      	adds	r3, #4
 8006420:	1d02      	adds	r2, r0, #4
 8006422:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006426:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800642a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800642e:	f1a3 0104 	sub.w	r1, r3, #4
 8006432:	f1a3 0308 	sub.w	r3, r3, #8
 8006436:	d405      	bmi.n	8006444 <forward_relu+0x110>
 8006438:	429c      	cmp	r4, r3
 800643a:	f842 5d04 	str.w	r5, [r2, #-4]!
 800643e:	d8d1      	bhi.n	80063e4 <forward_relu+0xb0>
 8006440:	460b      	mov	r3, r1
 8006442:	e7ee      	b.n	8006422 <forward_relu+0xee>
 8006444:	429c      	cmp	r4, r3
 8006446:	ed62 7a01 	vstmdb	r2!, {s15}
 800644a:	d8cb      	bhi.n	80063e4 <forward_relu+0xb0>
 800644c:	460b      	mov	r3, r1
 800644e:	e7e8      	b.n	8006422 <forward_relu+0xee>
 8006450:	2201      	movs	r2, #1
 8006452:	e793      	b.n	800637c <forward_relu+0x48>
 8006454:	4622      	mov	r2, r4
 8006456:	e7b1      	b.n	80063bc <forward_relu+0x88>
 8006458:	68b2      	ldr	r2, [r6, #8]
 800645a:	4623      	mov	r3, r4
 800645c:	ed92 7a00 	vldr	s14, [r2]
 8006460:	e7dc      	b.n	800641c <forward_relu+0xe8>
 8006462:	2300      	movs	r3, #0
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	deff      	udf	#255	@ 0xff
 8006468:	00000000 	.word	0x00000000

0800646c <forward_sm>:
 800646c:	6982      	ldr	r2, [r0, #24]
 800646e:	8813      	ldrh	r3, [r2, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d036      	beq.n	80064e2 <forward_sm+0x76>
 8006474:	b570      	push	{r4, r5, r6, lr}
 8006476:	6852      	ldr	r2, [r2, #4]
 8006478:	6855      	ldr	r5, [r2, #4]
 800647a:	b082      	sub	sp, #8
 800647c:	b105      	cbz	r5, 8006480 <forward_sm+0x14>
 800647e:	682d      	ldr	r5, [r5, #0]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d032      	beq.n	80064ea <forward_sm+0x7e>
 8006484:	6916      	ldr	r6, [r2, #16]
 8006486:	b106      	cbz	r6, 800648a <forward_sm+0x1e>
 8006488:	6836      	ldr	r6, [r6, #0]
 800648a:	68ab      	ldr	r3, [r5, #8]
 800648c:	ea5f 2c13 	movs.w	ip, r3, lsr #8
 8006490:	d029      	beq.n	80064e6 <forward_sm+0x7a>
 8006492:	68ec      	ldr	r4, [r5, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	eb04 038c 	add.w	r3, r4, ip, lsl #2
 800649a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800649e:	429c      	cmp	r4, r3
 80064a0:	fb01 f202 	mul.w	r2, r1, r2
 80064a4:	d1f9      	bne.n	800649a <forward_sm+0x2e>
 80064a6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80064aa:	69b0      	ldr	r0, [r6, #24]
 80064ac:	4563      	cmp	r3, ip
 80064ae:	bfb8      	it	lt
 80064b0:	68e9      	ldrlt	r1, [r5, #12]
 80064b2:	6880      	ldr	r0, [r0, #8]
 80064b4:	bfb8      	it	lt
 80064b6:	f851 4023 	ldrlt.w	r4, [r1, r3, lsl #2]
 80064ba:	6929      	ldr	r1, [r5, #16]
 80064bc:	bfa8      	it	ge
 80064be:	2401      	movge	r4, #1
 80064c0:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80064c4:	bfbc      	itt	lt
 80064c6:	6969      	ldrlt	r1, [r5, #20]
 80064c8:	f851 3023 	ldrlt.w	r3, [r1, r3, lsl #2]
 80064cc:	69a9      	ldr	r1, [r5, #24]
 80064ce:	bfb8      	it	lt
 80064d0:	089b      	lsrlt	r3, r3, #2
 80064d2:	6889      	ldr	r1, [r1, #8]
 80064d4:	9400      	str	r4, [sp, #0]
 80064d6:	bfa8      	it	ge
 80064d8:	2300      	movge	r3, #0
 80064da:	f000 fca9 	bl	8006e30 <forward_lite_nl_softmax_if32of32>
 80064de:	b002      	add	sp, #8
 80064e0:	bd70      	pop	{r4, r5, r6, pc}
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	deff      	udf	#255	@ 0xff
 80064e6:	2201      	movs	r2, #1
 80064e8:	e7dd      	b.n	80064a6 <forward_sm+0x3a>
 80064ea:	2300      	movs	r3, #0
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	deff      	udf	#255	@ 0xff

080064f0 <forward_lite_nl_softmax_if32of32_kernel>:
 80064f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064f4:	2a01      	cmp	r2, #1
 80064f6:	ed2d 8b02 	vpush	{d8}
 80064fa:	4691      	mov	r9, r2
 80064fc:	ed91 8a00 	vldr	s16, [r1]
 8006500:	4698      	mov	r8, r3
 8006502:	d960      	bls.n	80065c6 <forward_lite_nl_softmax_if32of32_kernel+0xd6>
 8006504:	2b01      	cmp	r3, #1
 8006506:	d14a      	bne.n	800659e <forward_lite_nl_softmax_if32of32_kernel+0xae>
 8006508:	1d0c      	adds	r4, r1, #4
 800650a:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800650e:	ecf4 7a01 	vldmia	r4!, {s15}
 8006512:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800651a:	bfb8      	it	lt
 800651c:	eeb0 8a67 	vmovlt.f32	s16, s15
 8006520:	429c      	cmp	r4, r3
 8006522:	d1f4      	bne.n	800650e <forward_lite_nl_softmax_if32of32_kernel+0x1e>
 8006524:	f04f 0a04 	mov.w	sl, #4
 8006528:	eddf 8a29 	vldr	s17, [pc, #164]	@ 80065d0 <forward_lite_nl_softmax_if32of32_kernel+0xe0>
 800652c:	4607      	mov	r7, r0
 800652e:	460c      	mov	r4, r1
 8006530:	4606      	mov	r6, r0
 8006532:	2500      	movs	r5, #0
 8006534:	ed94 0a00 	vldr	s0, [r4]
 8006538:	ee30 0a48 	vsub.f32	s0, s0, s16
 800653c:	f003 fae2 	bl	8009b04 <expf>
 8006540:	3501      	adds	r5, #1
 8006542:	45a9      	cmp	r9, r5
 8006544:	ed86 0a00 	vstr	s0, [r6]
 8006548:	ee78 8a80 	vadd.f32	s17, s17, s0
 800654c:	4454      	add	r4, sl
 800654e:	4456      	add	r6, sl
 8006550:	d8f0      	bhi.n	8006534 <forward_lite_nl_softmax_if32of32_kernel+0x44>
 8006552:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800655a:	d011      	beq.n	8006580 <forward_lite_nl_softmax_if32of32_kernel+0x90>
 800655c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006560:	f1b8 0f01 	cmp.w	r8, #1
 8006564:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8006568:	f04f 0300 	mov.w	r3, #0
 800656c:	d10c      	bne.n	8006588 <forward_lite_nl_softmax_if32of32_kernel+0x98>
 800656e:	3301      	adds	r3, #1
 8006570:	4599      	cmp	r9, r3
 8006572:	edd7 7a00 	vldr	s15, [r7]
 8006576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657a:	ece7 7a01 	vstmia	r7!, {s15}
 800657e:	d8f6      	bhi.n	800656e <forward_lite_nl_softmax_if32of32_kernel+0x7e>
 8006580:	ecbd 8b02 	vpop	{d8}
 8006584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006588:	edd7 7a00 	vldr	s15, [r7]
 800658c:	3301      	adds	r3, #1
 800658e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006592:	4599      	cmp	r9, r3
 8006594:	edc7 7a00 	vstr	s15, [r7]
 8006598:	4457      	add	r7, sl
 800659a:	d8f5      	bhi.n	8006588 <forward_lite_nl_softmax_if32of32_kernel+0x98>
 800659c:	e7f0      	b.n	8006580 <forward_lite_nl_softmax_if32of32_kernel+0x90>
 800659e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80065a2:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80065a6:	2301      	movs	r3, #1
 80065a8:	edd2 7a00 	vldr	s15, [r2]
 80065ac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80065b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b4:	f103 0301 	add.w	r3, r3, #1
 80065b8:	bfb8      	it	lt
 80065ba:	eeb0 8a67 	vmovlt.f32	s16, s15
 80065be:	4599      	cmp	r9, r3
 80065c0:	4452      	add	r2, sl
 80065c2:	d1f1      	bne.n	80065a8 <forward_lite_nl_softmax_if32of32_kernel+0xb8>
 80065c4:	e7b0      	b.n	8006528 <forward_lite_nl_softmax_if32of32_kernel+0x38>
 80065c6:	2a00      	cmp	r2, #0
 80065c8:	d0da      	beq.n	8006580 <forward_lite_nl_softmax_if32of32_kernel+0x90>
 80065ca:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80065ce:	e7ab      	b.n	8006528 <forward_lite_nl_softmax_if32of32_kernel+0x38>
 80065d0:	00000000 	.word	0x00000000

080065d4 <forward_lite_nl_relu_generic_if32of32_kernel>:
 80065d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80065d8:	ed93 7a00 	vldr	s14, [r3]
 80065dc:	ed93 6a01 	vldr	s12, [r3, #4]
 80065e0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80065e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e8:	d42a      	bmi.n	8006640 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 80065ea:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80065ee:	3a01      	subs	r2, #1
 80065f0:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80065f4:	4561      	cmp	r1, ip
 80065f6:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80065fa:	d85d      	bhi.n	80066b8 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 80065fc:	1d11      	adds	r1, r2, #4
 80065fe:	f10c 0304 	add.w	r3, ip, #4
 8006602:	4408      	add	r0, r1
 8006604:	ebac 0202 	sub.w	r2, ip, r2
 8006608:	e00c      	b.n	8006624 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800660a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800660e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006612:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8006616:	db01      	blt.n	800661c <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8006618:	ee65 7a86 	vmul.f32	s15, s11, s12
 800661c:	4293      	cmp	r3, r2
 800661e:	ed60 7a01 	vstmdb	r0!, {s15}
 8006622:	d00c      	beq.n	800663e <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8006624:	ed73 7a01 	vldmdb	r3!, {s15}
 8006628:	eef4 6ae7 	vcmpe.f32	s13, s15
 800662c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006630:	daeb      	bge.n	800660a <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 8006632:	eef0 7a66 	vmov.f32	s15, s13
 8006636:	4293      	cmp	r3, r2
 8006638:	ed60 7a01 	vstmdb	r0!, {s15}
 800663c:	d1f2      	bne.n	8006624 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800663e:	4770      	bx	lr
 8006640:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8006644:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8006648:	3a01      	subs	r2, #1
 800664a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800664e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8006652:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8006656:	d017      	beq.n	8006688 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 8006658:	4561      	cmp	r1, ip
 800665a:	d82d      	bhi.n	80066b8 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800665c:	1d11      	adds	r1, r2, #4
 800665e:	f10c 0304 	add.w	r3, ip, #4
 8006662:	4401      	add	r1, r0
 8006664:	ebac 0202 	sub.w	r2, ip, r2
 8006668:	ed73 7a01 	vldmdb	r3!, {s15}
 800666c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8006670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006678:	ee66 6a86 	vmul.f32	s13, s13, s12
 800667c:	d81d      	bhi.n	80066ba <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 800667e:	4293      	cmp	r3, r2
 8006680:	ed61 6a01 	vstmdb	r1!, {s13}
 8006684:	d1f0      	bne.n	8006668 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 8006686:	4770      	bx	lr
 8006688:	4561      	cmp	r1, ip
 800668a:	d815      	bhi.n	80066b8 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800668c:	1d11      	adds	r1, r2, #4
 800668e:	b500      	push	{lr}
 8006690:	f10c 0304 	add.w	r3, ip, #4
 8006694:	f04f 0e00 	mov.w	lr, #0
 8006698:	4401      	add	r1, r0
 800669a:	ebac 0202 	sub.w	r2, ip, r2
 800669e:	ed73 7a01 	vldmdb	r3!, {s15}
 80066a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066aa:	d40b      	bmi.n	80066c4 <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 80066ac:	4293      	cmp	r3, r2
 80066ae:	f841 ed04 	str.w	lr, [r1, #-4]!
 80066b2:	d1f4      	bne.n	800669e <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 80066b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	4293      	cmp	r3, r2
 80066bc:	ed61 7a01 	vstmdb	r1!, {s15}
 80066c0:	d1d2      	bne.n	8006668 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 80066c2:	4770      	bx	lr
 80066c4:	4293      	cmp	r3, r2
 80066c6:	ed61 7a01 	vstmdb	r1!, {s15}
 80066ca:	d1e8      	bne.n	800669e <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 80066cc:	e7f2      	b.n	80066b4 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 80066ce:	bf00      	nop

080066d0 <forward_lite_dense_if32of32wf32>:
 80066d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d4:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 80066d8:	6801      	ldr	r1, [r0, #0]
 80066da:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80066de:	fb02 f303 	mul.w	r3, r2, r3
 80066e2:	b083      	sub	sp, #12
 80066e4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80066e8:	4299      	cmp	r1, r3
 80066ea:	9100      	str	r1, [sp, #0]
 80066ec:	9301      	str	r3, [sp, #4]
 80066ee:	f080 811e 	bcs.w	800692e <forward_lite_dense_if32of32wf32+0x25e>
 80066f2:	6904      	ldr	r4, [r0, #16]
 80066f4:	4607      	mov	r7, r0
 80066f6:	0096      	lsls	r6, r2, #2
 80066f8:	9b00      	ldr	r3, [sp, #0]
 80066fa:	68bd      	ldr	r5, [r7, #8]
 80066fc:	eb03 0e06 	add.w	lr, r3, r6
 8006700:	459e      	cmp	lr, r3
 8006702:	461e      	mov	r6, r3
 8006704:	f240 8104 	bls.w	8006910 <forward_lite_dense_if32of32wf32+0x240>
 8006708:	f1a4 0c10 	sub.w	ip, r4, #16
 800670c:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8006710:	f10c 0c01 	add.w	ip, ip, #1
 8006714:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8006718:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800671c:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8006720:	2c0f      	cmp	r4, #15
 8006722:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8006980 <forward_lite_dense_if32of32wf32+0x2b0>
 8006726:	f240 8105 	bls.w	8006934 <forward_lite_dense_if32of32wf32+0x264>
 800672a:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 800672e:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8006732:	4621      	mov	r1, r4
 8006734:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 8006738:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 800673c:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 8006740:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 8006744:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 8006748:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 800674c:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 8006750:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 8006754:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 8006758:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 800675c:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 8006760:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 8006764:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 8006768:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800676c:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8006770:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006774:	3910      	subs	r1, #16
 8006776:	290f      	cmp	r1, #15
 8006778:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 800677c:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 8006780:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006784:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8006788:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800678c:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 8006790:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 8006794:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8006798:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 800679c:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 80067a0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80067a4:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 80067a8:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 80067ac:	eee6 7a26 	vfma.f32	s15, s12, s13
 80067b0:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 80067b4:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 80067b8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80067bc:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 80067c0:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 80067c4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80067c8:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 80067cc:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 80067d0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80067d4:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 80067d8:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 80067dc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80067e0:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 80067e4:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 80067e8:	eee1 7a21 	vfma.f32	s15, s2, s3
 80067ec:	eee2 7a22 	vfma.f32	s15, s4, s5
 80067f0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80067f4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80067f8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80067fc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006800:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006804:	d896      	bhi.n	8006734 <forward_lite_dense_if32of32wf32+0x64>
 8006806:	eb05 020b 	add.w	r2, r5, fp
 800680a:	f004 010f 	and.w	r1, r4, #15
 800680e:	4663      	mov	r3, ip
 8006810:	2903      	cmp	r1, #3
 8006812:	d95f      	bls.n	80068d4 <forward_lite_dense_if32of32wf32+0x204>
 8006814:	edd2 6a01 	vldr	s13, [r2, #4]
 8006818:	edd3 7a01 	vldr	s15, [r3, #4]
 800681c:	ed93 6a00 	vldr	s12, [r3]
 8006820:	ed93 5a02 	vldr	s10, [r3, #8]
 8006824:	edd2 5a02 	vldr	s11, [r2, #8]
 8006828:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800682c:	edd2 6a00 	vldr	s13, [r2]
 8006830:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006834:	1f08      	subs	r0, r1, #4
 8006836:	2803      	cmp	r0, #3
 8006838:	ed93 6a03 	vldr	s12, [r3, #12]
 800683c:	edd2 6a03 	vldr	s13, [r2, #12]
 8006840:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006844:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006848:	eee6 7a26 	vfma.f32	s15, s12, s13
 800684c:	eeb0 7a67 	vmov.f32	s14, s15
 8006850:	d938      	bls.n	80068c4 <forward_lite_dense_if32of32wf32+0x1f4>
 8006852:	edd2 6a05 	vldr	s13, [r2, #20]
 8006856:	edd3 7a05 	vldr	s15, [r3, #20]
 800685a:	ed93 6a04 	vldr	s12, [r3, #16]
 800685e:	ed93 5a06 	vldr	s10, [r3, #24]
 8006862:	edd2 5a06 	vldr	s11, [r2, #24]
 8006866:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800686a:	edd2 6a04 	vldr	s13, [r2, #16]
 800686e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006872:	f1a1 0a08 	sub.w	sl, r1, #8
 8006876:	f1ba 0f03 	cmp.w	sl, #3
 800687a:	ed93 6a07 	vldr	s12, [r3, #28]
 800687e:	edd2 6a07 	vldr	s13, [r2, #28]
 8006882:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006886:	eee6 7a26 	vfma.f32	s15, s12, s13
 800688a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800688e:	d919      	bls.n	80068c4 <forward_lite_dense_if32of32wf32+0x1f4>
 8006890:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8006894:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8006898:	ed92 6a08 	vldr	s12, [r2, #32]
 800689c:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 80068a0:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 80068a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80068a8:	edd3 6a08 	vldr	s13, [r3, #32]
 80068ac:	eee6 7a26 	vfma.f32	s15, s12, s13
 80068b0:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 80068b4:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80068b8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80068bc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80068c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068c4:	0880      	lsrs	r0, r0, #2
 80068c6:	3001      	adds	r0, #1
 80068c8:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80068cc:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80068d0:	f001 0103 	and.w	r1, r1, #3
 80068d4:	b1a9      	cbz	r1, 8006902 <forward_lite_dense_if32of32wf32+0x232>
 80068d6:	edd3 6a00 	vldr	s13, [r3]
 80068da:	edd2 7a00 	vldr	s15, [r2]
 80068de:	3901      	subs	r1, #1
 80068e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80068e4:	d00d      	beq.n	8006902 <forward_lite_dense_if32of32wf32+0x232>
 80068e6:	edd3 6a01 	vldr	s13, [r3, #4]
 80068ea:	edd2 7a01 	vldr	s15, [r2, #4]
 80068ee:	2901      	cmp	r1, #1
 80068f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80068f4:	d005      	beq.n	8006902 <forward_lite_dense_if32of32wf32+0x232>
 80068f6:	edd2 6a02 	vldr	s13, [r2, #8]
 80068fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80068fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006902:	444d      	add	r5, r9
 8006904:	eca6 7a01 	vstmia	r6!, {s14}
 8006908:	45b6      	cmp	lr, r6
 800690a:	f63f af09 	bhi.w	8006720 <forward_lite_dense_if32of32wf32+0x50>
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	b99b      	cbnz	r3, 800693c <forward_lite_dense_if32of32wf32+0x26c>
 8006914:	9b00      	ldr	r3, [sp, #0]
 8006916:	9901      	ldr	r1, [sp, #4]
 8006918:	693c      	ldr	r4, [r7, #16]
 800691a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800691e:	4299      	cmp	r1, r3
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8006926:	ea4f 0682 	mov.w	r6, r2, lsl #2
 800692a:	f63f aee5 	bhi.w	80066f8 <forward_lite_dense_if32of32wf32+0x28>
 800692e:	b003      	add	sp, #12
 8006930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006934:	4621      	mov	r1, r4
 8006936:	462a      	mov	r2, r5
 8006938:	4643      	mov	r3, r8
 800693a:	e769      	b.n	8006810 <forward_lite_dense_if32of32wf32+0x140>
 800693c:	2a00      	cmp	r2, #0
 800693e:	d0e9      	beq.n	8006914 <forward_lite_dense_if32of32wf32+0x244>
 8006940:	9a00      	ldr	r2, [sp, #0]
 8006942:	ed93 7a00 	vldr	s14, [r3]
 8006946:	edd2 7a00 	vldr	s15, [r2]
 800694a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800694e:	4613      	mov	r3, r2
 8006950:	edc2 7a00 	vstr	s15, [r2]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	2a01      	cmp	r2, #1
 8006958:	d9dc      	bls.n	8006914 <forward_lite_dense_if32of32wf32+0x244>
 800695a:	1d19      	adds	r1, r3, #4
 800695c:	2301      	movs	r3, #1
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	ed91 7a00 	vldr	s14, [r1]
 8006964:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006968:	edd2 7a00 	vldr	s15, [r2]
 800696c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006970:	3301      	adds	r3, #1
 8006972:	ece1 7a01 	vstmia	r1!, {s15}
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	429a      	cmp	r2, r3
 800697a:	d8f0      	bhi.n	800695e <forward_lite_dense_if32of32wf32+0x28e>
 800697c:	e7ca      	b.n	8006914 <forward_lite_dense_if32of32wf32+0x244>
 800697e:	bf00      	nop
 8006980:	00000000 	.word	0x00000000

08006984 <forward_lite_dense_if32of32wf32_lut4>:
 8006984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006988:	b08d      	sub	sp, #52	@ 0x34
 800698a:	4605      	mov	r5, r0
 800698c:	9005      	str	r0, [sp, #20]
 800698e:	920a      	str	r2, [sp, #40]	@ 0x28
 8006990:	4618      	mov	r0, r3
 8006992:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 8006996:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8006998:	fb02 f303 	mul.w	r3, r2, r3
 800699c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80069a0:	460c      	mov	r4, r1
 80069a2:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80069a4:	9308      	str	r3, [sp, #32]
 80069a6:	b126      	cbz	r6, 80069b2 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 80069a8:	2240      	movs	r2, #64	@ 0x40
 80069aa:	4631      	mov	r1, r6
 80069ac:	f000 fa76 	bl	8006e9c <st_int8_copy>
 80069b0:	4630      	mov	r0, r6
 80069b2:	9b05      	ldr	r3, [sp, #20]
 80069b4:	9a08      	ldr	r2, [sp, #32]
 80069b6:	4293      	cmp	r3, r2
 80069b8:	f080 80f5 	bcs.w	8006ba6 <forward_lite_dense_if32of32wf32_lut4+0x222>
 80069bc:	08eb      	lsrs	r3, r5, #3
 80069be:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80069c0:	9301      	str	r3, [sp, #4]
 80069c2:	f005 0101 	and.w	r1, r5, #1
 80069c6:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	0092      	lsls	r2, r2, #2
 80069ce:	f025 0801 	bic.w	r8, r5, #1
 80069d2:	9102      	str	r1, [sp, #8]
 80069d4:	9304      	str	r3, [sp, #16]
 80069d6:	00a9      	lsls	r1, r5, #2
 80069d8:	9b05      	ldr	r3, [sp, #20]
 80069da:	9207      	str	r2, [sp, #28]
 80069dc:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80069e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80069e2:	f104 0b20 	add.w	fp, r4, #32
 80069e6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80069e8:	9a07      	ldr	r2, [sp, #28]
 80069ea:	eb03 0902 	add.w	r9, r3, r2
 80069ee:	4599      	cmp	r9, r3
 80069f0:	f1ab 0220 	sub.w	r2, fp, #32
 80069f4:	9206      	str	r2, [sp, #24]
 80069f6:	f240 80d9 	bls.w	8006bac <forward_lite_dense_if32of32wf32_lut4+0x228>
 80069fa:	469e      	mov	lr, r3
 80069fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069fe:	f108 33ff 	add.w	r3, r8, #4294967295
 8006a02:	9303      	str	r3, [sp, #12]
 8006a04:	9b01      	ldr	r3, [sp, #4]
 8006a06:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8006bd0 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 80b2 	beq.w	8006b74 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8006a10:	9b04      	ldr	r3, [sp, #16]
 8006a12:	18d5      	adds	r5, r2, r3
 8006a14:	465b      	mov	r3, fp
 8006a16:	7814      	ldrb	r4, [r2, #0]
 8006a18:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 8006a1c:	7851      	ldrb	r1, [r2, #1]
 8006a1e:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 8006a22:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 8006a26:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 8006a2a:	ed13 5a04 	vldr	s10, [r3, #-16]
 8006a2e:	ed53 5a03 	vldr	s11, [r3, #-12]
 8006a32:	ed13 6a02 	vldr	s12, [r3, #-8]
 8006a36:	ed53 6a01 	vldr	s13, [r3, #-4]
 8006a3a:	f004 060f 	and.w	r6, r4, #15
 8006a3e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8006a42:	edd6 7a00 	vldr	s15, [r6]
 8006a46:	0924      	lsrs	r4, r4, #4
 8006a48:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8006a4c:	ed94 3a00 	vldr	s6, [r4]
 8006a50:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8006a54:	090c      	lsrs	r4, r1, #4
 8006a56:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006a5a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8006a5e:	f001 010f 	and.w	r1, r1, #15
 8006a62:	edd4 3a00 	vldr	s7, [r4]
 8006a66:	7894      	ldrb	r4, [r2, #2]
 8006a68:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006a6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006a70:	0926      	lsrs	r6, r4, #4
 8006a72:	ed91 4a00 	vldr	s8, [r1]
 8006a76:	78d1      	ldrb	r1, [r2, #3]
 8006a78:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006a7c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8006a80:	f004 040f 	and.w	r4, r4, #15
 8006a84:	edd6 4a00 	vldr	s9, [r6]
 8006a88:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006a8c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8006a90:	3204      	adds	r2, #4
 8006a92:	ed94 5a00 	vldr	s10, [r4]
 8006a96:	090c      	lsrs	r4, r1, #4
 8006a98:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006a9c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8006aa0:	f001 010f 	and.w	r1, r1, #15
 8006aa4:	edd4 5a00 	vldr	s11, [r4]
 8006aa8:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006aac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006ab0:	42aa      	cmp	r2, r5
 8006ab2:	ed91 6a00 	vldr	s12, [r1]
 8006ab6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006aba:	f103 0320 	add.w	r3, r3, #32
 8006abe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ac2:	d1a8      	bne.n	8006a16 <forward_lite_dense_if32of32wf32_lut4+0x92>
 8006ac4:	4656      	mov	r6, sl
 8006ac6:	4546      	cmp	r6, r8
 8006ac8:	d258      	bcs.n	8006b7c <forward_lite_dense_if32of32wf32_lut4+0x1f8>
 8006aca:	9b03      	ldr	r3, [sp, #12]
 8006acc:	1b9c      	subs	r4, r3, r6
 8006ace:	08e7      	lsrs	r7, r4, #3
 8006ad0:	f106 0208 	add.w	r2, r6, #8
 8006ad4:	1e69      	subs	r1, r5, #1
 8006ad6:	eb05 04d4 	add.w	r4, r5, r4, lsr #3
 8006ada:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006ade:	ed52 5a01 	vldr	s11, [r2, #-4]
 8006ae2:	ed52 6a02 	vldr	s13, [r2, #-8]
 8006ae6:	f003 0c0f 	and.w	ip, r3, #15
 8006aea:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8006aee:	eddc 7a00 	vldr	s15, [ip]
 8006af2:	091b      	lsrs	r3, r3, #4
 8006af4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006af8:	ed93 6a00 	vldr	s12, [r3]
 8006afc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006b00:	42a1      	cmp	r1, r4
 8006b02:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006b06:	f102 0208 	add.w	r2, r2, #8
 8006b0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b0e:	d1e4      	bne.n	8006ada <forward_lite_dense_if32of32wf32_lut4+0x156>
 8006b10:	3701      	adds	r7, #1
 8006b12:	19ea      	adds	r2, r5, r7
 8006b14:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8006b18:	9b02      	ldr	r3, [sp, #8]
 8006b1a:	b30b      	cbz	r3, 8006b60 <forward_lite_dense_if32of32wf32_lut4+0x1dc>
 8006b1c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006b20:	edd6 7a00 	vldr	s15, [r6]
 8006b24:	091b      	lsrs	r3, r3, #4
 8006b26:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006b2a:	edd3 6a00 	vldr	s13, [r3]
 8006b2e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b32:	ecae 7a01 	vstmia	lr!, {s14}
 8006b36:	45f1      	cmp	r9, lr
 8006b38:	f63f af64 	bhi.w	8006a04 <forward_lite_dense_if32of32wf32_lut4+0x80>
 8006b3c:	9b05      	ldr	r3, [sp, #20]
 8006b3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006b40:	1899      	adds	r1, r3, r2
 8006b42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006b44:	b9e3      	cbnz	r3, 8006b80 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 8006b46:	9b08      	ldr	r3, [sp, #32]
 8006b48:	428b      	cmp	r3, r1
 8006b4a:	d92c      	bls.n	8006ba6 <forward_lite_dense_if32of32wf32_lut4+0x222>
 8006b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b4e:	4498      	add	r8, r3
 8006b50:	449a      	add	sl, r3
 8006b52:	449b      	add	fp, r3
 8006b54:	9b05      	ldr	r3, [sp, #20]
 8006b56:	4599      	cmp	r9, r3
 8006b58:	d92a      	bls.n	8006bb0 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 8006b5a:	9105      	str	r1, [sp, #20]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	e743      	b.n	80069e8 <forward_lite_dense_if32of32wf32_lut4+0x64>
 8006b60:	ecae 7a01 	vstmia	lr!, {s14}
 8006b64:	45f1      	cmp	r9, lr
 8006b66:	d9e9      	bls.n	8006b3c <forward_lite_dense_if32of32wf32_lut4+0x1b8>
 8006b68:	9b01      	ldr	r3, [sp, #4]
 8006b6a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006bd0 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f47f af4e 	bne.w	8006a10 <forward_lite_dense_if32of32wf32_lut4+0x8c>
 8006b74:	9e06      	ldr	r6, [sp, #24]
 8006b76:	4546      	cmp	r6, r8
 8006b78:	4615      	mov	r5, r2
 8006b7a:	d3a6      	bcc.n	8006aca <forward_lite_dense_if32of32wf32_lut4+0x146>
 8006b7c:	462a      	mov	r2, r5
 8006b7e:	e7cb      	b.n	8006b18 <forward_lite_dense_if32of32wf32_lut4+0x194>
 8006b80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0df      	beq.n	8006b46 <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 8006b86:	9b07      	ldr	r3, [sp, #28]
 8006b88:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006b8a:	1acb      	subs	r3, r1, r3
 8006b8c:	edd3 7a00 	vldr	s15, [r3]
 8006b90:	ecb2 7a01 	vldmia	r2!, {s14}
 8006b94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b98:	ece3 7a01 	vstmia	r3!, {s15}
 8006b9c:	428b      	cmp	r3, r1
 8006b9e:	d1f5      	bne.n	8006b8c <forward_lite_dense_if32of32wf32_lut4+0x208>
 8006ba0:	9b08      	ldr	r3, [sp, #32]
 8006ba2:	428b      	cmp	r3, r1
 8006ba4:	d8d2      	bhi.n	8006b4c <forward_lite_dense_if32of32wf32_lut4+0x1c8>
 8006ba6:	b00d      	add	sp, #52	@ 0x34
 8006ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bac:	4619      	mov	r1, r3
 8006bae:	e7c8      	b.n	8006b42 <forward_lite_dense_if32of32wf32_lut4+0x1be>
 8006bb0:	9b07      	ldr	r3, [sp, #28]
 8006bb2:	1acb      	subs	r3, r1, r3
 8006bb4:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	ed92 7a00 	vldr	s14, [r2]
 8006bbc:	ecf0 7a01 	vldmia	r0!, {s15}
 8006bc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006bc4:	ece2 7a01 	vstmia	r2!, {s15}
 8006bc8:	428a      	cmp	r2, r1
 8006bca:	d1f5      	bne.n	8006bb8 <forward_lite_dense_if32of32wf32_lut4+0x234>
 8006bcc:	e7f2      	b.n	8006bb4 <forward_lite_dense_if32of32wf32_lut4+0x230>
 8006bce:	bf00      	nop
 8006bd0:	00000000 	.word	0x00000000

08006bd4 <forward_lite_dense_if32of32wf32_lut8>:
 8006bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd8:	b087      	sub	sp, #28
 8006bda:	460f      	mov	r7, r1
 8006bdc:	9204      	str	r2, [sp, #16]
 8006bde:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	@ 0x4c
 8006be2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006be4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8006be6:	fb01 f202 	mul.w	r2, r1, r2
 8006bea:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006bee:	4605      	mov	r5, r0
 8006bf0:	9202      	str	r2, [sp, #8]
 8006bf2:	b136      	cbz	r6, 8006c02 <forward_lite_dense_if32of32wf32_lut8+0x2e>
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006bfa:	4631      	mov	r1, r6
 8006bfc:	f000 f94e 	bl	8006e9c <st_int8_copy>
 8006c00:	4633      	mov	r3, r6
 8006c02:	9a02      	ldr	r2, [sp, #8]
 8006c04:	4295      	cmp	r5, r2
 8006c06:	f080 80f9 	bcs.w	8006dfc <forward_lite_dense_if32of32wf32_lut8+0x228>
 8006c0a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006c0c:	0092      	lsls	r2, r2, #2
 8006c0e:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8006c12:	9201      	str	r2, [sp, #4]
 8006c14:	9205      	str	r2, [sp, #20]
 8006c16:	462a      	mov	r2, r5
 8006c18:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 8006c1c:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 8006c20:	464d      	mov	r5, r9
 8006c22:	4691      	mov	r9, r2
 8006c24:	9a01      	ldr	r2, [sp, #4]
 8006c26:	eb09 0e02 	add.w	lr, r9, r2
 8006c2a:	00a1      	lsls	r1, r4, #2
 8006c2c:	3720      	adds	r7, #32
 8006c2e:	45ce      	cmp	lr, r9
 8006c30:	f004 0007 	and.w	r0, r4, #7
 8006c34:	9103      	str	r1, [sp, #12]
 8006c36:	f1a7 0b20 	sub.w	fp, r7, #32
 8006c3a:	f240 80c8 	bls.w	8006dce <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 8006c3e:	9a04      	ldr	r2, [sp, #16]
 8006c40:	46cc      	mov	ip, r9
 8006c42:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8006e2c <forward_lite_dense_if32of32wf32_lut8+0x258>
 8006c46:	2d00      	cmp	r5, #0
 8006c48:	f000 80dd 	beq.w	8006e06 <forward_lite_dense_if32of32wf32_lut8+0x232>
 8006c4c:	eb02 060a 	add.w	r6, r2, sl
 8006c50:	4639      	mov	r1, r7
 8006c52:	7854      	ldrb	r4, [r2, #1]
 8006c54:	ed11 3a07 	vldr	s6, [r1, #-28]	@ 0xffffffe4
 8006c58:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 8006c5c:	ed11 4a06 	vldr	s8, [r1, #-24]	@ 0xffffffe8
 8006c60:	ed51 4a05 	vldr	s9, [r1, #-20]	@ 0xffffffec
 8006c64:	ed11 5a04 	vldr	s10, [r1, #-16]
 8006c68:	ed51 5a03 	vldr	s11, [r1, #-12]
 8006c6c:	ed11 6a02 	vldr	s12, [r1, #-8]
 8006c70:	ed51 6a01 	vldr	s13, [r1, #-4]
 8006c74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006c78:	edd4 7a00 	vldr	s15, [r4]
 8006c7c:	7814      	ldrb	r4, [r2, #0]
 8006c7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006c82:	ee67 7a83 	vmul.f32	s15, s15, s6
 8006c86:	ed94 3a00 	vldr	s6, [r4]
 8006c8a:	7894      	ldrb	r4, [r2, #2]
 8006c8c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006c90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006c94:	3208      	adds	r2, #8
 8006c96:	edd4 3a00 	vldr	s7, [r4]
 8006c9a:	f812 4c05 	ldrb.w	r4, [r2, #-5]
 8006c9e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006ca2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006ca6:	3120      	adds	r1, #32
 8006ca8:	ed94 4a00 	vldr	s8, [r4]
 8006cac:	f812 4c04 	ldrb.w	r4, [r2, #-4]
 8006cb0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006cb4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006cb8:	edd4 4a00 	vldr	s9, [r4]
 8006cbc:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 8006cc0:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006cc4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006cc8:	ed94 5a00 	vldr	s10, [r4]
 8006ccc:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 8006cd0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006cd4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006cd8:	edd4 5a00 	vldr	s11, [r4]
 8006cdc:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 8006ce0:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006ce4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006ce8:	42b2      	cmp	r2, r6
 8006cea:	ed94 6a00 	vldr	s12, [r4]
 8006cee:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006cf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006cf6:	d1ac      	bne.n	8006c52 <forward_lite_dense_if32of32wf32_lut8+0x7e>
 8006cf8:	4642      	mov	r2, r8
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	f000 8081 	beq.w	8006e02 <forward_lite_dense_if32of32wf32_lut8+0x22e>
 8006d00:	7831      	ldrb	r1, [r6, #0]
 8006d02:	edd2 7a00 	vldr	s15, [r2]
 8006d06:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006d0a:	edd1 6a00 	vldr	s13, [r1]
 8006d0e:	2801      	cmp	r0, #1
 8006d10:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d14:	d03f      	beq.n	8006d96 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8006d16:	7871      	ldrb	r1, [r6, #1]
 8006d18:	edd2 7a01 	vldr	s15, [r2, #4]
 8006d1c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006d20:	edd1 6a00 	vldr	s13, [r1]
 8006d24:	2802      	cmp	r0, #2
 8006d26:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d2a:	d034      	beq.n	8006d96 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8006d2c:	78b1      	ldrb	r1, [r6, #2]
 8006d2e:	edd2 7a02 	vldr	s15, [r2, #8]
 8006d32:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006d36:	edd1 6a00 	vldr	s13, [r1]
 8006d3a:	2803      	cmp	r0, #3
 8006d3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d40:	d029      	beq.n	8006d96 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8006d42:	78f1      	ldrb	r1, [r6, #3]
 8006d44:	edd2 6a03 	vldr	s13, [r2, #12]
 8006d48:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006d4c:	edd1 7a00 	vldr	s15, [r1]
 8006d50:	2804      	cmp	r0, #4
 8006d52:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d56:	d01e      	beq.n	8006d96 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8006d58:	7931      	ldrb	r1, [r6, #4]
 8006d5a:	edd2 6a04 	vldr	s13, [r2, #16]
 8006d5e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006d62:	edd1 7a00 	vldr	s15, [r1]
 8006d66:	2805      	cmp	r0, #5
 8006d68:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d6c:	d013      	beq.n	8006d96 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8006d6e:	7971      	ldrb	r1, [r6, #5]
 8006d70:	edd2 6a05 	vldr	s13, [r2, #20]
 8006d74:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006d78:	edd1 7a00 	vldr	s15, [r1]
 8006d7c:	2806      	cmp	r0, #6
 8006d7e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d82:	d008      	beq.n	8006d96 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8006d84:	edd2 7a06 	vldr	s15, [r2, #24]
 8006d88:	79b2      	ldrb	r2, [r6, #6]
 8006d8a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006d8e:	edd2 6a00 	vldr	s13, [r2]
 8006d92:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006d96:	1832      	adds	r2, r6, r0
 8006d98:	ecac 7a01 	vstmia	ip!, {s14}
 8006d9c:	45e6      	cmp	lr, ip
 8006d9e:	f63f af50 	bhi.w	8006c42 <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8006da2:	9a05      	ldr	r2, [sp, #20]
 8006da4:	eb09 0402 	add.w	r4, r9, r2
 8006da8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006daa:	b9a2      	cbnz	r2, 8006dd6 <forward_lite_dense_if32of32wf32_lut8+0x202>
 8006dac:	9a02      	ldr	r2, [sp, #8]
 8006dae:	42a2      	cmp	r2, r4
 8006db0:	d924      	bls.n	8006dfc <forward_lite_dense_if32of32wf32_lut8+0x228>
 8006db2:	9a03      	ldr	r2, [sp, #12]
 8006db4:	45ce      	cmp	lr, r9
 8006db6:	4490      	add	r8, r2
 8006db8:	4417      	add	r7, r2
 8006dba:	d927      	bls.n	8006e0c <forward_lite_dense_if32of32wf32_lut8+0x238>
 8006dbc:	9a01      	ldr	r2, [sp, #4]
 8006dbe:	46a1      	mov	r9, r4
 8006dc0:	eb09 0e02 	add.w	lr, r9, r2
 8006dc4:	45ce      	cmp	lr, r9
 8006dc6:	f1a7 0b20 	sub.w	fp, r7, #32
 8006dca:	f63f af38 	bhi.w	8006c3e <forward_lite_dense_if32of32wf32_lut8+0x6a>
 8006dce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006dd0:	464c      	mov	r4, r9
 8006dd2:	2a00      	cmp	r2, #0
 8006dd4:	d0ea      	beq.n	8006dac <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 8006dd6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006dd8:	2a00      	cmp	r2, #0
 8006dda:	d0e7      	beq.n	8006dac <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 8006ddc:	9a01      	ldr	r2, [sp, #4]
 8006dde:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006de0:	1aa2      	subs	r2, r4, r2
 8006de2:	edd2 7a00 	vldr	s15, [r2]
 8006de6:	ecb1 7a01 	vldmia	r1!, {s14}
 8006dea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006dee:	ece2 7a01 	vstmia	r2!, {s15}
 8006df2:	4294      	cmp	r4, r2
 8006df4:	d1f5      	bne.n	8006de2 <forward_lite_dense_if32of32wf32_lut8+0x20e>
 8006df6:	9a02      	ldr	r2, [sp, #8]
 8006df8:	42a2      	cmp	r2, r4
 8006dfa:	d8da      	bhi.n	8006db2 <forward_lite_dense_if32of32wf32_lut8+0x1de>
 8006dfc:	b007      	add	sp, #28
 8006dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e02:	4632      	mov	r2, r6
 8006e04:	e7c8      	b.n	8006d98 <forward_lite_dense_if32of32wf32_lut8+0x1c4>
 8006e06:	4616      	mov	r6, r2
 8006e08:	465a      	mov	r2, fp
 8006e0a:	e776      	b.n	8006cfa <forward_lite_dense_if32of32wf32_lut8+0x126>
 8006e0c:	9b01      	ldr	r3, [sp, #4]
 8006e0e:	1ae3      	subs	r3, r4, r3
 8006e10:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006e12:	461a      	mov	r2, r3
 8006e14:	ed92 7a00 	vldr	s14, [r2]
 8006e18:	ecf1 7a01 	vldmia	r1!, {s15}
 8006e1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e20:	ece2 7a01 	vstmia	r2!, {s15}
 8006e24:	42a2      	cmp	r2, r4
 8006e26:	d1f5      	bne.n	8006e14 <forward_lite_dense_if32of32wf32_lut8+0x240>
 8006e28:	e7f2      	b.n	8006e10 <forward_lite_dense_if32of32wf32_lut8+0x23c>
 8006e2a:	bf00      	nop
 8006e2c:	00000000 	.word	0x00000000

08006e30 <forward_lite_nl_softmax_if32of32>:
 8006e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e34:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e38:	b083      	sub	sp, #12
 8006e3a:	469b      	mov	fp, r3
 8006e3c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8006e3e:	fbb2 f3f7 	udiv	r3, r2, r7
 8006e42:	42ba      	cmp	r2, r7
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	d326      	bcc.n	8006e96 <forward_lite_nl_softmax_if32of32+0x66>
 8006e48:	fb07 f30b 	mul.w	r3, r7, fp
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	9301      	str	r3, [sp, #4]
 8006e50:	f1bb 0f00 	cmp.w	fp, #0
 8006e54:	d01f      	beq.n	8006e96 <forward_lite_nl_softmax_if32of32+0x66>
 8006e56:	970c      	str	r7, [sp, #48]	@ 0x30
 8006e58:	465f      	mov	r7, fp
 8006e5a:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 8006e5e:	4680      	mov	r8, r0
 8006e60:	4689      	mov	r9, r1
 8006e62:	f04f 0a00 	mov.w	sl, #0
 8006e66:	464e      	mov	r6, r9
 8006e68:	4645      	mov	r5, r8
 8006e6a:	2400      	movs	r4, #0
 8006e6c:	4631      	mov	r1, r6
 8006e6e:	4628      	mov	r0, r5
 8006e70:	463b      	mov	r3, r7
 8006e72:	3401      	adds	r4, #1
 8006e74:	465a      	mov	r2, fp
 8006e76:	f7ff fb3b 	bl	80064f0 <forward_lite_nl_softmax_if32of32_kernel>
 8006e7a:	42a7      	cmp	r7, r4
 8006e7c:	f106 0604 	add.w	r6, r6, #4
 8006e80:	f105 0504 	add.w	r5, r5, #4
 8006e84:	d1f2      	bne.n	8006e6c <forward_lite_nl_softmax_if32of32+0x3c>
 8006e86:	9b01      	ldr	r3, [sp, #4]
 8006e88:	4499      	add	r9, r3
 8006e8a:	4498      	add	r8, r3
 8006e8c:	9b00      	ldr	r3, [sp, #0]
 8006e8e:	f10a 0a01 	add.w	sl, sl, #1
 8006e92:	4553      	cmp	r3, sl
 8006e94:	d8e7      	bhi.n	8006e66 <forward_lite_nl_softmax_if32of32+0x36>
 8006e96:	b003      	add	sp, #12
 8006e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006e9c <st_int8_copy>:
 8006e9c:	4288      	cmp	r0, r1
 8006e9e:	d022      	beq.n	8006ee6 <st_int8_copy+0x4a>
 8006ea0:	b30a      	cbz	r2, 8006ee6 <st_int8_copy+0x4a>
 8006ea2:	4288      	cmp	r0, r1
 8006ea4:	d312      	bcc.n	8006ecc <st_int8_copy+0x30>
 8006ea6:	2a03      	cmp	r2, #3
 8006ea8:	d81e      	bhi.n	8006ee8 <st_int8_copy+0x4c>
 8006eaa:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006eae:	f801 3b01 	strb.w	r3, [r1], #1
 8006eb2:	2a01      	cmp	r2, #1
 8006eb4:	d017      	beq.n	8006ee6 <st_int8_copy+0x4a>
 8006eb6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006eba:	f801 3b01 	strb.w	r3, [r1], #1
 8006ebe:	2a02      	cmp	r2, #2
 8006ec0:	d011      	beq.n	8006ee6 <st_int8_copy+0x4a>
 8006ec2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006ec6:	f801 3b01 	strb.w	r3, [r1], #1
 8006eca:	4770      	bx	lr
 8006ecc:	1883      	adds	r3, r0, r2
 8006ece:	4299      	cmp	r1, r3
 8006ed0:	d2e9      	bcs.n	8006ea6 <st_int8_copy+0xa>
 8006ed2:	4298      	cmp	r0, r3
 8006ed4:	440a      	add	r2, r1
 8006ed6:	d206      	bcs.n	8006ee6 <st_int8_copy+0x4a>
 8006ed8:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8006edc:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8006ee0:	4298      	cmp	r0, r3
 8006ee2:	d1f9      	bne.n	8006ed8 <st_int8_copy+0x3c>
 8006ee4:	4770      	bx	lr
 8006ee6:	4770      	bx	lr
 8006ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006eec:	f001 0403 	and.w	r4, r1, #3
 8006ef0:	f1c4 0304 	rsb	r3, r4, #4
 8006ef4:	f000 0e03 	and.w	lr, r0, #3
 8006ef8:	eba2 0c03 	sub.w	ip, r2, r3
 8006efc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006f00:	f801 3b01 	strb.w	r3, [r1], #1
 8006f04:	2c03      	cmp	r4, #3
 8006f06:	f1c4 0202 	rsb	r2, r4, #2
 8006f0a:	d00e      	beq.n	8006f2a <st_int8_copy+0x8e>
 8006f0c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006f10:	f801 3b01 	strb.w	r3, [r1], #1
 8006f14:	2a00      	cmp	r2, #0
 8006f16:	dd08      	ble.n	8006f2a <st_int8_copy+0x8e>
 8006f18:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006f1c:	f801 3b01 	strb.w	r3, [r1], #1
 8006f20:	b91c      	cbnz	r4, 8006f2a <st_int8_copy+0x8e>
 8006f22:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006f26:	f801 3b01 	strb.w	r3, [r1], #1
 8006f2a:	4574      	cmp	r4, lr
 8006f2c:	d02b      	beq.n	8006f86 <st_int8_copy+0xea>
 8006f2e:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8006f32:	1e5a      	subs	r2, r3, #1
 8006f34:	b153      	cbz	r3, 8006f4c <st_int8_copy+0xb0>
 8006f36:	f850 3b04 	ldr.w	r3, [r0], #4
 8006f3a:	f850 4b04 	ldr.w	r4, [r0], #4
 8006f3e:	f850 5b04 	ldr.w	r5, [r0], #4
 8006f42:	f850 6b04 	ldr.w	r6, [r0], #4
 8006f46:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8006f48:	3a01      	subs	r2, #1
 8006f4a:	d2f4      	bcs.n	8006f36 <st_int8_copy+0x9a>
 8006f4c:	f01c 0f08 	tst.w	ip, #8
 8006f50:	d004      	beq.n	8006f5c <st_int8_copy+0xc0>
 8006f52:	f850 3b04 	ldr.w	r3, [r0], #4
 8006f56:	f850 4b04 	ldr.w	r4, [r0], #4
 8006f5a:	c118      	stmia	r1!, {r3, r4}
 8006f5c:	f01c 0f04 	tst.w	ip, #4
 8006f60:	d003      	beq.n	8006f6a <st_int8_copy+0xce>
 8006f62:	f850 3b04 	ldr.w	r3, [r0], #4
 8006f66:	f841 3b04 	str.w	r3, [r1], #4
 8006f6a:	f01c 0f02 	tst.w	ip, #2
 8006f6e:	d003      	beq.n	8006f78 <st_int8_copy+0xdc>
 8006f70:	f830 3b02 	ldrh.w	r3, [r0], #2
 8006f74:	f821 3b02 	strh.w	r3, [r1], #2
 8006f78:	f01c 0f01 	tst.w	ip, #1
 8006f7c:	d001      	beq.n	8006f82 <st_int8_copy+0xe6>
 8006f7e:	7803      	ldrb	r3, [r0, #0]
 8006f80:	700b      	strb	r3, [r1, #0]
 8006f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f86:	ea4f 139c 	mov.w	r3, ip, lsr #6
 8006f8a:	f103 39ff 	add.w	r9, r3, #4294967295
 8006f8e:	b183      	cbz	r3, 8006fb2 <st_int8_copy+0x116>
 8006f90:	4688      	mov	r8, r1
 8006f92:	4686      	mov	lr, r0
 8006f94:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8006f98:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8006f9c:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8006fa0:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8006fa4:	f109 39ff 	add.w	r9, r9, #4294967295
 8006fa8:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006fac:	4641      	mov	r1, r8
 8006fae:	4670      	mov	r0, lr
 8006fb0:	d1ee      	bne.n	8006f90 <st_int8_copy+0xf4>
 8006fb2:	f01c 0f20 	tst.w	ip, #32
 8006fb6:	d007      	beq.n	8006fc8 <st_int8_copy+0x12c>
 8006fb8:	4688      	mov	r8, r1
 8006fba:	4686      	mov	lr, r0
 8006fbc:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8006fc0:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8006fc4:	4641      	mov	r1, r8
 8006fc6:	4670      	mov	r0, lr
 8006fc8:	f01c 0f10 	tst.w	ip, #16
 8006fcc:	d001      	beq.n	8006fd2 <st_int8_copy+0x136>
 8006fce:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8006fd0:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8006fd2:	f01c 0f08 	tst.w	ip, #8
 8006fd6:	d0c1      	beq.n	8006f5c <st_int8_copy+0xc0>
 8006fd8:	c818      	ldmia	r0!, {r3, r4}
 8006fda:	c118      	stmia	r1!, {r3, r4}
 8006fdc:	e7be      	b.n	8006f5c <st_int8_copy+0xc0>
 8006fde:	bf00      	nop

08006fe0 <ai_array_to_buffer_fmt>:
 8006fe0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d055      	beq.n	8007094 <ai_array_to_buffer_fmt+0xb4>
 8006fe8:	4a2d      	ldr	r2, [pc, #180]	@ (80070a0 <ai_array_to_buffer_fmt+0xc0>)
 8006fea:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d010      	beq.n	8007014 <ai_array_to_buffer_fmt+0x34>
 8006ff2:	dc21      	bgt.n	8007038 <ai_array_to_buffer_fmt+0x58>
 8006ff4:	4a2b      	ldr	r2, [pc, #172]	@ (80070a4 <ai_array_to_buffer_fmt+0xc4>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00c      	beq.n	8007014 <ai_array_to_buffer_fmt+0x34>
 8006ffa:	dd0f      	ble.n	800701c <ai_array_to_buffer_fmt+0x3c>
 8006ffc:	4a2a      	ldr	r2, [pc, #168]	@ (80070a8 <ai_array_to_buffer_fmt+0xc8>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d008      	beq.n	8007014 <ai_array_to_buffer_fmt+0x34>
 8007002:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8007006:	4293      	cmp	r3, r2
 8007008:	d004      	beq.n	8007014 <ai_array_to_buffer_fmt+0x34>
 800700a:	4a28      	ldr	r2, [pc, #160]	@ (80070ac <ai_array_to_buffer_fmt+0xcc>)
 800700c:	4293      	cmp	r3, r2
 800700e:	bf0c      	ite	eq
 8007010:	4613      	moveq	r3, r2
 8007012:	2340      	movne	r3, #64	@ 0x40
 8007014:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8007018:	4318      	orrs	r0, r3
 800701a:	4770      	bx	lr
 800701c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8007020:	4293      	cmp	r3, r2
 8007022:	d0f7      	beq.n	8007014 <ai_array_to_buffer_fmt+0x34>
 8007024:	dd2c      	ble.n	8007080 <ai_array_to_buffer_fmt+0xa0>
 8007026:	4a22      	ldr	r2, [pc, #136]	@ (80070b0 <ai_array_to_buffer_fmt+0xd0>)
 8007028:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800702c:	4293      	cmp	r3, r2
 800702e:	bf0c      	ite	eq
 8007030:	4613      	moveq	r3, r2
 8007032:	2340      	movne	r3, #64	@ 0x40
 8007034:	4318      	orrs	r0, r3
 8007036:	4770      	bx	lr
 8007038:	4a1e      	ldr	r2, [pc, #120]	@ (80070b4 <ai_array_to_buffer_fmt+0xd4>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d0ea      	beq.n	8007014 <ai_array_to_buffer_fmt+0x34>
 800703e:	dd10      	ble.n	8007062 <ai_array_to_buffer_fmt+0x82>
 8007040:	4a1d      	ldr	r2, [pc, #116]	@ (80070b8 <ai_array_to_buffer_fmt+0xd8>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d0e6      	beq.n	8007014 <ai_array_to_buffer_fmt+0x34>
 8007046:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 800704a:	4293      	cmp	r3, r2
 800704c:	d0e2      	beq.n	8007014 <ai_array_to_buffer_fmt+0x34>
 800704e:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8007052:	4293      	cmp	r3, r2
 8007054:	bf0c      	ite	eq
 8007056:	4613      	moveq	r3, r2
 8007058:	2340      	movne	r3, #64	@ 0x40
 800705a:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800705e:	4318      	orrs	r0, r3
 8007060:	4770      	bx	lr
 8007062:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8007066:	4293      	cmp	r3, r2
 8007068:	d0d4      	beq.n	8007014 <ai_array_to_buffer_fmt+0x34>
 800706a:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 800706e:	4293      	cmp	r3, r2
 8007070:	d0d0      	beq.n	8007014 <ai_array_to_buffer_fmt+0x34>
 8007072:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8007076:	4293      	cmp	r3, r2
 8007078:	bf0c      	ite	eq
 800707a:	4613      	moveq	r3, r2
 800707c:	2340      	movne	r3, #64	@ 0x40
 800707e:	e7c9      	b.n	8007014 <ai_array_to_buffer_fmt+0x34>
 8007080:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8007084:	4293      	cmp	r3, r2
 8007086:	d0c5      	beq.n	8007014 <ai_array_to_buffer_fmt+0x34>
 8007088:	3280      	adds	r2, #128	@ 0x80
 800708a:	4293      	cmp	r3, r2
 800708c:	bf0c      	ite	eq
 800708e:	4613      	moveq	r3, r2
 8007090:	2340      	movne	r3, #64	@ 0x40
 8007092:	e7bf      	b.n	8007014 <ai_array_to_buffer_fmt+0x34>
 8007094:	4b09      	ldr	r3, [pc, #36]	@ (80070bc <ai_array_to_buffer_fmt+0xdc>)
 8007096:	4003      	ands	r3, r0
 8007098:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800709c:	e7ba      	b.n	8007014 <ai_array_to_buffer_fmt+0x34>
 800709e:	bf00      	nop
 80070a0:	00821040 	.word	0x00821040
 80070a4:	00040840 	.word	0x00040840
 80070a8:	00041040 	.word	0x00041040
 80070ac:	0004084f 	.word	0x0004084f
 80070b0:	00040447 	.word	0x00040447
 80070b4:	00840447 	.word	0x00840447
 80070b8:	0084084f 	.word	0x0084084f
 80070bc:	00803fff 	.word	0x00803fff

080070c0 <ai_array_get_data_byte_size>:
 80070c0:	b169      	cbz	r1, 80070de <ai_array_get_data_byte_size+0x1e>
 80070c2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80070c6:	fb03 f101 	mul.w	r1, r3, r1
 80070ca:	1dcb      	adds	r3, r1, #7
 80070cc:	f023 0307 	bic.w	r3, r3, #7
 80070d0:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80070d4:	fa23 f000 	lsr.w	r0, r3, r0
 80070d8:	3007      	adds	r0, #7
 80070da:	08c0      	lsrs	r0, r0, #3
 80070dc:	4770      	bx	lr
 80070de:	4608      	mov	r0, r1
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop

080070e4 <ai_version_get>:
 80070e4:	0212      	lsls	r2, r2, #8
 80070e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80070ea:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80070ee:	4770      	bx	lr

080070f0 <get_tensor_byte_size>:
 80070f0:	b410      	push	{r4}
 80070f2:	6983      	ldr	r3, [r0, #24]
 80070f4:	68c4      	ldr	r4, [r0, #12]
 80070f6:	6941      	ldr	r1, [r0, #20]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68e0      	ldr	r0, [r4, #12]
 80070fc:	4a07      	ldr	r2, [pc, #28]	@ (800711c <get_tensor_byte_size+0x2c>)
 80070fe:	68c9      	ldr	r1, [r1, #12]
 8007100:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007104:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8007108:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800710c:	fb01 f000 	mul.w	r0, r1, r0
 8007110:	4293      	cmp	r3, r2
 8007112:	bf04      	itt	eq
 8007114:	3007      	addeq	r0, #7
 8007116:	08c0      	lsreq	r0, r0, #3
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	000400c0 	.word	0x000400c0

08007120 <malloc>:
 8007120:	4b02      	ldr	r3, [pc, #8]	@ (800712c <malloc+0xc>)
 8007122:	4601      	mov	r1, r0
 8007124:	6818      	ldr	r0, [r3, #0]
 8007126:	f000 b825 	b.w	8007174 <_malloc_r>
 800712a:	bf00      	nop
 800712c:	20000930 	.word	0x20000930

08007130 <sbrk_aligned>:
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	4e0f      	ldr	r6, [pc, #60]	@ (8007170 <sbrk_aligned+0x40>)
 8007134:	460c      	mov	r4, r1
 8007136:	6831      	ldr	r1, [r6, #0]
 8007138:	4605      	mov	r5, r0
 800713a:	b911      	cbnz	r1, 8007142 <sbrk_aligned+0x12>
 800713c:	f000 ff46 	bl	8007fcc <_sbrk_r>
 8007140:	6030      	str	r0, [r6, #0]
 8007142:	4621      	mov	r1, r4
 8007144:	4628      	mov	r0, r5
 8007146:	f000 ff41 	bl	8007fcc <_sbrk_r>
 800714a:	1c43      	adds	r3, r0, #1
 800714c:	d103      	bne.n	8007156 <sbrk_aligned+0x26>
 800714e:	f04f 34ff 	mov.w	r4, #4294967295
 8007152:	4620      	mov	r0, r4
 8007154:	bd70      	pop	{r4, r5, r6, pc}
 8007156:	1cc4      	adds	r4, r0, #3
 8007158:	f024 0403 	bic.w	r4, r4, #3
 800715c:	42a0      	cmp	r0, r4
 800715e:	d0f8      	beq.n	8007152 <sbrk_aligned+0x22>
 8007160:	1a21      	subs	r1, r4, r0
 8007162:	4628      	mov	r0, r5
 8007164:	f000 ff32 	bl	8007fcc <_sbrk_r>
 8007168:	3001      	adds	r0, #1
 800716a:	d1f2      	bne.n	8007152 <sbrk_aligned+0x22>
 800716c:	e7ef      	b.n	800714e <sbrk_aligned+0x1e>
 800716e:	bf00      	nop
 8007170:	200013dc 	.word	0x200013dc

08007174 <_malloc_r>:
 8007174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007178:	1ccd      	adds	r5, r1, #3
 800717a:	f025 0503 	bic.w	r5, r5, #3
 800717e:	3508      	adds	r5, #8
 8007180:	2d0c      	cmp	r5, #12
 8007182:	bf38      	it	cc
 8007184:	250c      	movcc	r5, #12
 8007186:	2d00      	cmp	r5, #0
 8007188:	4606      	mov	r6, r0
 800718a:	db01      	blt.n	8007190 <_malloc_r+0x1c>
 800718c:	42a9      	cmp	r1, r5
 800718e:	d904      	bls.n	800719a <_malloc_r+0x26>
 8007190:	230c      	movs	r3, #12
 8007192:	6033      	str	r3, [r6, #0]
 8007194:	2000      	movs	r0, #0
 8007196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800719a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007270 <_malloc_r+0xfc>
 800719e:	f000 f869 	bl	8007274 <__malloc_lock>
 80071a2:	f8d8 3000 	ldr.w	r3, [r8]
 80071a6:	461c      	mov	r4, r3
 80071a8:	bb44      	cbnz	r4, 80071fc <_malloc_r+0x88>
 80071aa:	4629      	mov	r1, r5
 80071ac:	4630      	mov	r0, r6
 80071ae:	f7ff ffbf 	bl	8007130 <sbrk_aligned>
 80071b2:	1c43      	adds	r3, r0, #1
 80071b4:	4604      	mov	r4, r0
 80071b6:	d158      	bne.n	800726a <_malloc_r+0xf6>
 80071b8:	f8d8 4000 	ldr.w	r4, [r8]
 80071bc:	4627      	mov	r7, r4
 80071be:	2f00      	cmp	r7, #0
 80071c0:	d143      	bne.n	800724a <_malloc_r+0xd6>
 80071c2:	2c00      	cmp	r4, #0
 80071c4:	d04b      	beq.n	800725e <_malloc_r+0xea>
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	4639      	mov	r1, r7
 80071ca:	4630      	mov	r0, r6
 80071cc:	eb04 0903 	add.w	r9, r4, r3
 80071d0:	f000 fefc 	bl	8007fcc <_sbrk_r>
 80071d4:	4581      	cmp	r9, r0
 80071d6:	d142      	bne.n	800725e <_malloc_r+0xea>
 80071d8:	6821      	ldr	r1, [r4, #0]
 80071da:	1a6d      	subs	r5, r5, r1
 80071dc:	4629      	mov	r1, r5
 80071de:	4630      	mov	r0, r6
 80071e0:	f7ff ffa6 	bl	8007130 <sbrk_aligned>
 80071e4:	3001      	adds	r0, #1
 80071e6:	d03a      	beq.n	800725e <_malloc_r+0xea>
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	442b      	add	r3, r5
 80071ec:	6023      	str	r3, [r4, #0]
 80071ee:	f8d8 3000 	ldr.w	r3, [r8]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	bb62      	cbnz	r2, 8007250 <_malloc_r+0xdc>
 80071f6:	f8c8 7000 	str.w	r7, [r8]
 80071fa:	e00f      	b.n	800721c <_malloc_r+0xa8>
 80071fc:	6822      	ldr	r2, [r4, #0]
 80071fe:	1b52      	subs	r2, r2, r5
 8007200:	d420      	bmi.n	8007244 <_malloc_r+0xd0>
 8007202:	2a0b      	cmp	r2, #11
 8007204:	d917      	bls.n	8007236 <_malloc_r+0xc2>
 8007206:	1961      	adds	r1, r4, r5
 8007208:	42a3      	cmp	r3, r4
 800720a:	6025      	str	r5, [r4, #0]
 800720c:	bf18      	it	ne
 800720e:	6059      	strne	r1, [r3, #4]
 8007210:	6863      	ldr	r3, [r4, #4]
 8007212:	bf08      	it	eq
 8007214:	f8c8 1000 	streq.w	r1, [r8]
 8007218:	5162      	str	r2, [r4, r5]
 800721a:	604b      	str	r3, [r1, #4]
 800721c:	4630      	mov	r0, r6
 800721e:	f000 f82f 	bl	8007280 <__malloc_unlock>
 8007222:	f104 000b 	add.w	r0, r4, #11
 8007226:	1d23      	adds	r3, r4, #4
 8007228:	f020 0007 	bic.w	r0, r0, #7
 800722c:	1ac2      	subs	r2, r0, r3
 800722e:	bf1c      	itt	ne
 8007230:	1a1b      	subne	r3, r3, r0
 8007232:	50a3      	strne	r3, [r4, r2]
 8007234:	e7af      	b.n	8007196 <_malloc_r+0x22>
 8007236:	6862      	ldr	r2, [r4, #4]
 8007238:	42a3      	cmp	r3, r4
 800723a:	bf0c      	ite	eq
 800723c:	f8c8 2000 	streq.w	r2, [r8]
 8007240:	605a      	strne	r2, [r3, #4]
 8007242:	e7eb      	b.n	800721c <_malloc_r+0xa8>
 8007244:	4623      	mov	r3, r4
 8007246:	6864      	ldr	r4, [r4, #4]
 8007248:	e7ae      	b.n	80071a8 <_malloc_r+0x34>
 800724a:	463c      	mov	r4, r7
 800724c:	687f      	ldr	r7, [r7, #4]
 800724e:	e7b6      	b.n	80071be <_malloc_r+0x4a>
 8007250:	461a      	mov	r2, r3
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	42a3      	cmp	r3, r4
 8007256:	d1fb      	bne.n	8007250 <_malloc_r+0xdc>
 8007258:	2300      	movs	r3, #0
 800725a:	6053      	str	r3, [r2, #4]
 800725c:	e7de      	b.n	800721c <_malloc_r+0xa8>
 800725e:	230c      	movs	r3, #12
 8007260:	6033      	str	r3, [r6, #0]
 8007262:	4630      	mov	r0, r6
 8007264:	f000 f80c 	bl	8007280 <__malloc_unlock>
 8007268:	e794      	b.n	8007194 <_malloc_r+0x20>
 800726a:	6005      	str	r5, [r0, #0]
 800726c:	e7d6      	b.n	800721c <_malloc_r+0xa8>
 800726e:	bf00      	nop
 8007270:	200013e0 	.word	0x200013e0

08007274 <__malloc_lock>:
 8007274:	4801      	ldr	r0, [pc, #4]	@ (800727c <__malloc_lock+0x8>)
 8007276:	f000 bef6 	b.w	8008066 <__retarget_lock_acquire_recursive>
 800727a:	bf00      	nop
 800727c:	20001524 	.word	0x20001524

08007280 <__malloc_unlock>:
 8007280:	4801      	ldr	r0, [pc, #4]	@ (8007288 <__malloc_unlock+0x8>)
 8007282:	f000 bef1 	b.w	8008068 <__retarget_lock_release_recursive>
 8007286:	bf00      	nop
 8007288:	20001524 	.word	0x20001524

0800728c <__cvt>:
 800728c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007290:	ec57 6b10 	vmov	r6, r7, d0
 8007294:	2f00      	cmp	r7, #0
 8007296:	460c      	mov	r4, r1
 8007298:	4619      	mov	r1, r3
 800729a:	463b      	mov	r3, r7
 800729c:	bfbb      	ittet	lt
 800729e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80072a2:	461f      	movlt	r7, r3
 80072a4:	2300      	movge	r3, #0
 80072a6:	232d      	movlt	r3, #45	@ 0x2d
 80072a8:	700b      	strb	r3, [r1, #0]
 80072aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072ac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80072b0:	4691      	mov	r9, r2
 80072b2:	f023 0820 	bic.w	r8, r3, #32
 80072b6:	bfbc      	itt	lt
 80072b8:	4632      	movlt	r2, r6
 80072ba:	4616      	movlt	r6, r2
 80072bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80072c0:	d005      	beq.n	80072ce <__cvt+0x42>
 80072c2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80072c6:	d100      	bne.n	80072ca <__cvt+0x3e>
 80072c8:	3401      	adds	r4, #1
 80072ca:	2102      	movs	r1, #2
 80072cc:	e000      	b.n	80072d0 <__cvt+0x44>
 80072ce:	2103      	movs	r1, #3
 80072d0:	ab03      	add	r3, sp, #12
 80072d2:	9301      	str	r3, [sp, #4]
 80072d4:	ab02      	add	r3, sp, #8
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	ec47 6b10 	vmov	d0, r6, r7
 80072dc:	4653      	mov	r3, sl
 80072de:	4622      	mov	r2, r4
 80072e0:	f000 ff5a 	bl	8008198 <_dtoa_r>
 80072e4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80072e8:	4605      	mov	r5, r0
 80072ea:	d119      	bne.n	8007320 <__cvt+0x94>
 80072ec:	f019 0f01 	tst.w	r9, #1
 80072f0:	d00e      	beq.n	8007310 <__cvt+0x84>
 80072f2:	eb00 0904 	add.w	r9, r0, r4
 80072f6:	2200      	movs	r2, #0
 80072f8:	2300      	movs	r3, #0
 80072fa:	4630      	mov	r0, r6
 80072fc:	4639      	mov	r1, r7
 80072fe:	f7f9 fbf3 	bl	8000ae8 <__aeabi_dcmpeq>
 8007302:	b108      	cbz	r0, 8007308 <__cvt+0x7c>
 8007304:	f8cd 900c 	str.w	r9, [sp, #12]
 8007308:	2230      	movs	r2, #48	@ 0x30
 800730a:	9b03      	ldr	r3, [sp, #12]
 800730c:	454b      	cmp	r3, r9
 800730e:	d31e      	bcc.n	800734e <__cvt+0xc2>
 8007310:	9b03      	ldr	r3, [sp, #12]
 8007312:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007314:	1b5b      	subs	r3, r3, r5
 8007316:	4628      	mov	r0, r5
 8007318:	6013      	str	r3, [r2, #0]
 800731a:	b004      	add	sp, #16
 800731c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007320:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007324:	eb00 0904 	add.w	r9, r0, r4
 8007328:	d1e5      	bne.n	80072f6 <__cvt+0x6a>
 800732a:	7803      	ldrb	r3, [r0, #0]
 800732c:	2b30      	cmp	r3, #48	@ 0x30
 800732e:	d10a      	bne.n	8007346 <__cvt+0xba>
 8007330:	2200      	movs	r2, #0
 8007332:	2300      	movs	r3, #0
 8007334:	4630      	mov	r0, r6
 8007336:	4639      	mov	r1, r7
 8007338:	f7f9 fbd6 	bl	8000ae8 <__aeabi_dcmpeq>
 800733c:	b918      	cbnz	r0, 8007346 <__cvt+0xba>
 800733e:	f1c4 0401 	rsb	r4, r4, #1
 8007342:	f8ca 4000 	str.w	r4, [sl]
 8007346:	f8da 3000 	ldr.w	r3, [sl]
 800734a:	4499      	add	r9, r3
 800734c:	e7d3      	b.n	80072f6 <__cvt+0x6a>
 800734e:	1c59      	adds	r1, r3, #1
 8007350:	9103      	str	r1, [sp, #12]
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	e7d9      	b.n	800730a <__cvt+0x7e>

08007356 <__exponent>:
 8007356:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007358:	2900      	cmp	r1, #0
 800735a:	bfba      	itte	lt
 800735c:	4249      	neglt	r1, r1
 800735e:	232d      	movlt	r3, #45	@ 0x2d
 8007360:	232b      	movge	r3, #43	@ 0x2b
 8007362:	2909      	cmp	r1, #9
 8007364:	7002      	strb	r2, [r0, #0]
 8007366:	7043      	strb	r3, [r0, #1]
 8007368:	dd29      	ble.n	80073be <__exponent+0x68>
 800736a:	f10d 0307 	add.w	r3, sp, #7
 800736e:	461d      	mov	r5, r3
 8007370:	270a      	movs	r7, #10
 8007372:	461a      	mov	r2, r3
 8007374:	fbb1 f6f7 	udiv	r6, r1, r7
 8007378:	fb07 1416 	mls	r4, r7, r6, r1
 800737c:	3430      	adds	r4, #48	@ 0x30
 800737e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007382:	460c      	mov	r4, r1
 8007384:	2c63      	cmp	r4, #99	@ 0x63
 8007386:	f103 33ff 	add.w	r3, r3, #4294967295
 800738a:	4631      	mov	r1, r6
 800738c:	dcf1      	bgt.n	8007372 <__exponent+0x1c>
 800738e:	3130      	adds	r1, #48	@ 0x30
 8007390:	1e94      	subs	r4, r2, #2
 8007392:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007396:	1c41      	adds	r1, r0, #1
 8007398:	4623      	mov	r3, r4
 800739a:	42ab      	cmp	r3, r5
 800739c:	d30a      	bcc.n	80073b4 <__exponent+0x5e>
 800739e:	f10d 0309 	add.w	r3, sp, #9
 80073a2:	1a9b      	subs	r3, r3, r2
 80073a4:	42ac      	cmp	r4, r5
 80073a6:	bf88      	it	hi
 80073a8:	2300      	movhi	r3, #0
 80073aa:	3302      	adds	r3, #2
 80073ac:	4403      	add	r3, r0
 80073ae:	1a18      	subs	r0, r3, r0
 80073b0:	b003      	add	sp, #12
 80073b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80073b8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80073bc:	e7ed      	b.n	800739a <__exponent+0x44>
 80073be:	2330      	movs	r3, #48	@ 0x30
 80073c0:	3130      	adds	r1, #48	@ 0x30
 80073c2:	7083      	strb	r3, [r0, #2]
 80073c4:	70c1      	strb	r1, [r0, #3]
 80073c6:	1d03      	adds	r3, r0, #4
 80073c8:	e7f1      	b.n	80073ae <__exponent+0x58>
	...

080073cc <_printf_float>:
 80073cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d0:	b08d      	sub	sp, #52	@ 0x34
 80073d2:	460c      	mov	r4, r1
 80073d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80073d8:	4616      	mov	r6, r2
 80073da:	461f      	mov	r7, r3
 80073dc:	4605      	mov	r5, r0
 80073de:	f000 fdbd 	bl	8007f5c <_localeconv_r>
 80073e2:	6803      	ldr	r3, [r0, #0]
 80073e4:	9304      	str	r3, [sp, #16]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7f8 ff52 	bl	8000290 <strlen>
 80073ec:	2300      	movs	r3, #0
 80073ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80073f0:	f8d8 3000 	ldr.w	r3, [r8]
 80073f4:	9005      	str	r0, [sp, #20]
 80073f6:	3307      	adds	r3, #7
 80073f8:	f023 0307 	bic.w	r3, r3, #7
 80073fc:	f103 0208 	add.w	r2, r3, #8
 8007400:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007404:	f8d4 b000 	ldr.w	fp, [r4]
 8007408:	f8c8 2000 	str.w	r2, [r8]
 800740c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007410:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007414:	9307      	str	r3, [sp, #28]
 8007416:	f8cd 8018 	str.w	r8, [sp, #24]
 800741a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800741e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007422:	4b9c      	ldr	r3, [pc, #624]	@ (8007694 <_printf_float+0x2c8>)
 8007424:	f04f 32ff 	mov.w	r2, #4294967295
 8007428:	f7f9 fb90 	bl	8000b4c <__aeabi_dcmpun>
 800742c:	bb70      	cbnz	r0, 800748c <_printf_float+0xc0>
 800742e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007432:	4b98      	ldr	r3, [pc, #608]	@ (8007694 <_printf_float+0x2c8>)
 8007434:	f04f 32ff 	mov.w	r2, #4294967295
 8007438:	f7f9 fb6a 	bl	8000b10 <__aeabi_dcmple>
 800743c:	bb30      	cbnz	r0, 800748c <_printf_float+0xc0>
 800743e:	2200      	movs	r2, #0
 8007440:	2300      	movs	r3, #0
 8007442:	4640      	mov	r0, r8
 8007444:	4649      	mov	r1, r9
 8007446:	f7f9 fb59 	bl	8000afc <__aeabi_dcmplt>
 800744a:	b110      	cbz	r0, 8007452 <_printf_float+0x86>
 800744c:	232d      	movs	r3, #45	@ 0x2d
 800744e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007452:	4a91      	ldr	r2, [pc, #580]	@ (8007698 <_printf_float+0x2cc>)
 8007454:	4b91      	ldr	r3, [pc, #580]	@ (800769c <_printf_float+0x2d0>)
 8007456:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800745a:	bf8c      	ite	hi
 800745c:	4690      	movhi	r8, r2
 800745e:	4698      	movls	r8, r3
 8007460:	2303      	movs	r3, #3
 8007462:	6123      	str	r3, [r4, #16]
 8007464:	f02b 0304 	bic.w	r3, fp, #4
 8007468:	6023      	str	r3, [r4, #0]
 800746a:	f04f 0900 	mov.w	r9, #0
 800746e:	9700      	str	r7, [sp, #0]
 8007470:	4633      	mov	r3, r6
 8007472:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007474:	4621      	mov	r1, r4
 8007476:	4628      	mov	r0, r5
 8007478:	f000 f9d2 	bl	8007820 <_printf_common>
 800747c:	3001      	adds	r0, #1
 800747e:	f040 808d 	bne.w	800759c <_printf_float+0x1d0>
 8007482:	f04f 30ff 	mov.w	r0, #4294967295
 8007486:	b00d      	add	sp, #52	@ 0x34
 8007488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800748c:	4642      	mov	r2, r8
 800748e:	464b      	mov	r3, r9
 8007490:	4640      	mov	r0, r8
 8007492:	4649      	mov	r1, r9
 8007494:	f7f9 fb5a 	bl	8000b4c <__aeabi_dcmpun>
 8007498:	b140      	cbz	r0, 80074ac <_printf_float+0xe0>
 800749a:	464b      	mov	r3, r9
 800749c:	2b00      	cmp	r3, #0
 800749e:	bfbc      	itt	lt
 80074a0:	232d      	movlt	r3, #45	@ 0x2d
 80074a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80074a6:	4a7e      	ldr	r2, [pc, #504]	@ (80076a0 <_printf_float+0x2d4>)
 80074a8:	4b7e      	ldr	r3, [pc, #504]	@ (80076a4 <_printf_float+0x2d8>)
 80074aa:	e7d4      	b.n	8007456 <_printf_float+0x8a>
 80074ac:	6863      	ldr	r3, [r4, #4]
 80074ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80074b2:	9206      	str	r2, [sp, #24]
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	d13b      	bne.n	8007530 <_printf_float+0x164>
 80074b8:	2306      	movs	r3, #6
 80074ba:	6063      	str	r3, [r4, #4]
 80074bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80074c0:	2300      	movs	r3, #0
 80074c2:	6022      	str	r2, [r4, #0]
 80074c4:	9303      	str	r3, [sp, #12]
 80074c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80074c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80074cc:	ab09      	add	r3, sp, #36	@ 0x24
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	6861      	ldr	r1, [r4, #4]
 80074d2:	ec49 8b10 	vmov	d0, r8, r9
 80074d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80074da:	4628      	mov	r0, r5
 80074dc:	f7ff fed6 	bl	800728c <__cvt>
 80074e0:	9b06      	ldr	r3, [sp, #24]
 80074e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80074e4:	2b47      	cmp	r3, #71	@ 0x47
 80074e6:	4680      	mov	r8, r0
 80074e8:	d129      	bne.n	800753e <_printf_float+0x172>
 80074ea:	1cc8      	adds	r0, r1, #3
 80074ec:	db02      	blt.n	80074f4 <_printf_float+0x128>
 80074ee:	6863      	ldr	r3, [r4, #4]
 80074f0:	4299      	cmp	r1, r3
 80074f2:	dd41      	ble.n	8007578 <_printf_float+0x1ac>
 80074f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80074f8:	fa5f fa8a 	uxtb.w	sl, sl
 80074fc:	3901      	subs	r1, #1
 80074fe:	4652      	mov	r2, sl
 8007500:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007504:	9109      	str	r1, [sp, #36]	@ 0x24
 8007506:	f7ff ff26 	bl	8007356 <__exponent>
 800750a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800750c:	1813      	adds	r3, r2, r0
 800750e:	2a01      	cmp	r2, #1
 8007510:	4681      	mov	r9, r0
 8007512:	6123      	str	r3, [r4, #16]
 8007514:	dc02      	bgt.n	800751c <_printf_float+0x150>
 8007516:	6822      	ldr	r2, [r4, #0]
 8007518:	07d2      	lsls	r2, r2, #31
 800751a:	d501      	bpl.n	8007520 <_printf_float+0x154>
 800751c:	3301      	adds	r3, #1
 800751e:	6123      	str	r3, [r4, #16]
 8007520:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007524:	2b00      	cmp	r3, #0
 8007526:	d0a2      	beq.n	800746e <_printf_float+0xa2>
 8007528:	232d      	movs	r3, #45	@ 0x2d
 800752a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800752e:	e79e      	b.n	800746e <_printf_float+0xa2>
 8007530:	9a06      	ldr	r2, [sp, #24]
 8007532:	2a47      	cmp	r2, #71	@ 0x47
 8007534:	d1c2      	bne.n	80074bc <_printf_float+0xf0>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1c0      	bne.n	80074bc <_printf_float+0xf0>
 800753a:	2301      	movs	r3, #1
 800753c:	e7bd      	b.n	80074ba <_printf_float+0xee>
 800753e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007542:	d9db      	bls.n	80074fc <_printf_float+0x130>
 8007544:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007548:	d118      	bne.n	800757c <_printf_float+0x1b0>
 800754a:	2900      	cmp	r1, #0
 800754c:	6863      	ldr	r3, [r4, #4]
 800754e:	dd0b      	ble.n	8007568 <_printf_float+0x19c>
 8007550:	6121      	str	r1, [r4, #16]
 8007552:	b913      	cbnz	r3, 800755a <_printf_float+0x18e>
 8007554:	6822      	ldr	r2, [r4, #0]
 8007556:	07d0      	lsls	r0, r2, #31
 8007558:	d502      	bpl.n	8007560 <_printf_float+0x194>
 800755a:	3301      	adds	r3, #1
 800755c:	440b      	add	r3, r1
 800755e:	6123      	str	r3, [r4, #16]
 8007560:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007562:	f04f 0900 	mov.w	r9, #0
 8007566:	e7db      	b.n	8007520 <_printf_float+0x154>
 8007568:	b913      	cbnz	r3, 8007570 <_printf_float+0x1a4>
 800756a:	6822      	ldr	r2, [r4, #0]
 800756c:	07d2      	lsls	r2, r2, #31
 800756e:	d501      	bpl.n	8007574 <_printf_float+0x1a8>
 8007570:	3302      	adds	r3, #2
 8007572:	e7f4      	b.n	800755e <_printf_float+0x192>
 8007574:	2301      	movs	r3, #1
 8007576:	e7f2      	b.n	800755e <_printf_float+0x192>
 8007578:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800757c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800757e:	4299      	cmp	r1, r3
 8007580:	db05      	blt.n	800758e <_printf_float+0x1c2>
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	6121      	str	r1, [r4, #16]
 8007586:	07d8      	lsls	r0, r3, #31
 8007588:	d5ea      	bpl.n	8007560 <_printf_float+0x194>
 800758a:	1c4b      	adds	r3, r1, #1
 800758c:	e7e7      	b.n	800755e <_printf_float+0x192>
 800758e:	2900      	cmp	r1, #0
 8007590:	bfd4      	ite	le
 8007592:	f1c1 0202 	rsble	r2, r1, #2
 8007596:	2201      	movgt	r2, #1
 8007598:	4413      	add	r3, r2
 800759a:	e7e0      	b.n	800755e <_printf_float+0x192>
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	055a      	lsls	r2, r3, #21
 80075a0:	d407      	bmi.n	80075b2 <_printf_float+0x1e6>
 80075a2:	6923      	ldr	r3, [r4, #16]
 80075a4:	4642      	mov	r2, r8
 80075a6:	4631      	mov	r1, r6
 80075a8:	4628      	mov	r0, r5
 80075aa:	47b8      	blx	r7
 80075ac:	3001      	adds	r0, #1
 80075ae:	d12b      	bne.n	8007608 <_printf_float+0x23c>
 80075b0:	e767      	b.n	8007482 <_printf_float+0xb6>
 80075b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075b6:	f240 80dd 	bls.w	8007774 <_printf_float+0x3a8>
 80075ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80075be:	2200      	movs	r2, #0
 80075c0:	2300      	movs	r3, #0
 80075c2:	f7f9 fa91 	bl	8000ae8 <__aeabi_dcmpeq>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d033      	beq.n	8007632 <_printf_float+0x266>
 80075ca:	4a37      	ldr	r2, [pc, #220]	@ (80076a8 <_printf_float+0x2dc>)
 80075cc:	2301      	movs	r3, #1
 80075ce:	4631      	mov	r1, r6
 80075d0:	4628      	mov	r0, r5
 80075d2:	47b8      	blx	r7
 80075d4:	3001      	adds	r0, #1
 80075d6:	f43f af54 	beq.w	8007482 <_printf_float+0xb6>
 80075da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80075de:	4543      	cmp	r3, r8
 80075e0:	db02      	blt.n	80075e8 <_printf_float+0x21c>
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	07d8      	lsls	r0, r3, #31
 80075e6:	d50f      	bpl.n	8007608 <_printf_float+0x23c>
 80075e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075ec:	4631      	mov	r1, r6
 80075ee:	4628      	mov	r0, r5
 80075f0:	47b8      	blx	r7
 80075f2:	3001      	adds	r0, #1
 80075f4:	f43f af45 	beq.w	8007482 <_printf_float+0xb6>
 80075f8:	f04f 0900 	mov.w	r9, #0
 80075fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8007600:	f104 0a1a 	add.w	sl, r4, #26
 8007604:	45c8      	cmp	r8, r9
 8007606:	dc09      	bgt.n	800761c <_printf_float+0x250>
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	079b      	lsls	r3, r3, #30
 800760c:	f100 8103 	bmi.w	8007816 <_printf_float+0x44a>
 8007610:	68e0      	ldr	r0, [r4, #12]
 8007612:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007614:	4298      	cmp	r0, r3
 8007616:	bfb8      	it	lt
 8007618:	4618      	movlt	r0, r3
 800761a:	e734      	b.n	8007486 <_printf_float+0xba>
 800761c:	2301      	movs	r3, #1
 800761e:	4652      	mov	r2, sl
 8007620:	4631      	mov	r1, r6
 8007622:	4628      	mov	r0, r5
 8007624:	47b8      	blx	r7
 8007626:	3001      	adds	r0, #1
 8007628:	f43f af2b 	beq.w	8007482 <_printf_float+0xb6>
 800762c:	f109 0901 	add.w	r9, r9, #1
 8007630:	e7e8      	b.n	8007604 <_printf_float+0x238>
 8007632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007634:	2b00      	cmp	r3, #0
 8007636:	dc39      	bgt.n	80076ac <_printf_float+0x2e0>
 8007638:	4a1b      	ldr	r2, [pc, #108]	@ (80076a8 <_printf_float+0x2dc>)
 800763a:	2301      	movs	r3, #1
 800763c:	4631      	mov	r1, r6
 800763e:	4628      	mov	r0, r5
 8007640:	47b8      	blx	r7
 8007642:	3001      	adds	r0, #1
 8007644:	f43f af1d 	beq.w	8007482 <_printf_float+0xb6>
 8007648:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800764c:	ea59 0303 	orrs.w	r3, r9, r3
 8007650:	d102      	bne.n	8007658 <_printf_float+0x28c>
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	07d9      	lsls	r1, r3, #31
 8007656:	d5d7      	bpl.n	8007608 <_printf_float+0x23c>
 8007658:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800765c:	4631      	mov	r1, r6
 800765e:	4628      	mov	r0, r5
 8007660:	47b8      	blx	r7
 8007662:	3001      	adds	r0, #1
 8007664:	f43f af0d 	beq.w	8007482 <_printf_float+0xb6>
 8007668:	f04f 0a00 	mov.w	sl, #0
 800766c:	f104 0b1a 	add.w	fp, r4, #26
 8007670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007672:	425b      	negs	r3, r3
 8007674:	4553      	cmp	r3, sl
 8007676:	dc01      	bgt.n	800767c <_printf_float+0x2b0>
 8007678:	464b      	mov	r3, r9
 800767a:	e793      	b.n	80075a4 <_printf_float+0x1d8>
 800767c:	2301      	movs	r3, #1
 800767e:	465a      	mov	r2, fp
 8007680:	4631      	mov	r1, r6
 8007682:	4628      	mov	r0, r5
 8007684:	47b8      	blx	r7
 8007686:	3001      	adds	r0, #1
 8007688:	f43f aefb 	beq.w	8007482 <_printf_float+0xb6>
 800768c:	f10a 0a01 	add.w	sl, sl, #1
 8007690:	e7ee      	b.n	8007670 <_printf_float+0x2a4>
 8007692:	bf00      	nop
 8007694:	7fefffff 	.word	0x7fefffff
 8007698:	08010e9c 	.word	0x08010e9c
 800769c:	08010e98 	.word	0x08010e98
 80076a0:	08010ea4 	.word	0x08010ea4
 80076a4:	08010ea0 	.word	0x08010ea0
 80076a8:	08010ea8 	.word	0x08010ea8
 80076ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80076b2:	4553      	cmp	r3, sl
 80076b4:	bfa8      	it	ge
 80076b6:	4653      	movge	r3, sl
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	4699      	mov	r9, r3
 80076bc:	dc36      	bgt.n	800772c <_printf_float+0x360>
 80076be:	f04f 0b00 	mov.w	fp, #0
 80076c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076c6:	f104 021a 	add.w	r2, r4, #26
 80076ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076cc:	9306      	str	r3, [sp, #24]
 80076ce:	eba3 0309 	sub.w	r3, r3, r9
 80076d2:	455b      	cmp	r3, fp
 80076d4:	dc31      	bgt.n	800773a <_printf_float+0x36e>
 80076d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d8:	459a      	cmp	sl, r3
 80076da:	dc3a      	bgt.n	8007752 <_printf_float+0x386>
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	07da      	lsls	r2, r3, #31
 80076e0:	d437      	bmi.n	8007752 <_printf_float+0x386>
 80076e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e4:	ebaa 0903 	sub.w	r9, sl, r3
 80076e8:	9b06      	ldr	r3, [sp, #24]
 80076ea:	ebaa 0303 	sub.w	r3, sl, r3
 80076ee:	4599      	cmp	r9, r3
 80076f0:	bfa8      	it	ge
 80076f2:	4699      	movge	r9, r3
 80076f4:	f1b9 0f00 	cmp.w	r9, #0
 80076f8:	dc33      	bgt.n	8007762 <_printf_float+0x396>
 80076fa:	f04f 0800 	mov.w	r8, #0
 80076fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007702:	f104 0b1a 	add.w	fp, r4, #26
 8007706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007708:	ebaa 0303 	sub.w	r3, sl, r3
 800770c:	eba3 0309 	sub.w	r3, r3, r9
 8007710:	4543      	cmp	r3, r8
 8007712:	f77f af79 	ble.w	8007608 <_printf_float+0x23c>
 8007716:	2301      	movs	r3, #1
 8007718:	465a      	mov	r2, fp
 800771a:	4631      	mov	r1, r6
 800771c:	4628      	mov	r0, r5
 800771e:	47b8      	blx	r7
 8007720:	3001      	adds	r0, #1
 8007722:	f43f aeae 	beq.w	8007482 <_printf_float+0xb6>
 8007726:	f108 0801 	add.w	r8, r8, #1
 800772a:	e7ec      	b.n	8007706 <_printf_float+0x33a>
 800772c:	4642      	mov	r2, r8
 800772e:	4631      	mov	r1, r6
 8007730:	4628      	mov	r0, r5
 8007732:	47b8      	blx	r7
 8007734:	3001      	adds	r0, #1
 8007736:	d1c2      	bne.n	80076be <_printf_float+0x2f2>
 8007738:	e6a3      	b.n	8007482 <_printf_float+0xb6>
 800773a:	2301      	movs	r3, #1
 800773c:	4631      	mov	r1, r6
 800773e:	4628      	mov	r0, r5
 8007740:	9206      	str	r2, [sp, #24]
 8007742:	47b8      	blx	r7
 8007744:	3001      	adds	r0, #1
 8007746:	f43f ae9c 	beq.w	8007482 <_printf_float+0xb6>
 800774a:	9a06      	ldr	r2, [sp, #24]
 800774c:	f10b 0b01 	add.w	fp, fp, #1
 8007750:	e7bb      	b.n	80076ca <_printf_float+0x2fe>
 8007752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007756:	4631      	mov	r1, r6
 8007758:	4628      	mov	r0, r5
 800775a:	47b8      	blx	r7
 800775c:	3001      	adds	r0, #1
 800775e:	d1c0      	bne.n	80076e2 <_printf_float+0x316>
 8007760:	e68f      	b.n	8007482 <_printf_float+0xb6>
 8007762:	9a06      	ldr	r2, [sp, #24]
 8007764:	464b      	mov	r3, r9
 8007766:	4442      	add	r2, r8
 8007768:	4631      	mov	r1, r6
 800776a:	4628      	mov	r0, r5
 800776c:	47b8      	blx	r7
 800776e:	3001      	adds	r0, #1
 8007770:	d1c3      	bne.n	80076fa <_printf_float+0x32e>
 8007772:	e686      	b.n	8007482 <_printf_float+0xb6>
 8007774:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007778:	f1ba 0f01 	cmp.w	sl, #1
 800777c:	dc01      	bgt.n	8007782 <_printf_float+0x3b6>
 800777e:	07db      	lsls	r3, r3, #31
 8007780:	d536      	bpl.n	80077f0 <_printf_float+0x424>
 8007782:	2301      	movs	r3, #1
 8007784:	4642      	mov	r2, r8
 8007786:	4631      	mov	r1, r6
 8007788:	4628      	mov	r0, r5
 800778a:	47b8      	blx	r7
 800778c:	3001      	adds	r0, #1
 800778e:	f43f ae78 	beq.w	8007482 <_printf_float+0xb6>
 8007792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007796:	4631      	mov	r1, r6
 8007798:	4628      	mov	r0, r5
 800779a:	47b8      	blx	r7
 800779c:	3001      	adds	r0, #1
 800779e:	f43f ae70 	beq.w	8007482 <_printf_float+0xb6>
 80077a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077a6:	2200      	movs	r2, #0
 80077a8:	2300      	movs	r3, #0
 80077aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077ae:	f7f9 f99b 	bl	8000ae8 <__aeabi_dcmpeq>
 80077b2:	b9c0      	cbnz	r0, 80077e6 <_printf_float+0x41a>
 80077b4:	4653      	mov	r3, sl
 80077b6:	f108 0201 	add.w	r2, r8, #1
 80077ba:	4631      	mov	r1, r6
 80077bc:	4628      	mov	r0, r5
 80077be:	47b8      	blx	r7
 80077c0:	3001      	adds	r0, #1
 80077c2:	d10c      	bne.n	80077de <_printf_float+0x412>
 80077c4:	e65d      	b.n	8007482 <_printf_float+0xb6>
 80077c6:	2301      	movs	r3, #1
 80077c8:	465a      	mov	r2, fp
 80077ca:	4631      	mov	r1, r6
 80077cc:	4628      	mov	r0, r5
 80077ce:	47b8      	blx	r7
 80077d0:	3001      	adds	r0, #1
 80077d2:	f43f ae56 	beq.w	8007482 <_printf_float+0xb6>
 80077d6:	f108 0801 	add.w	r8, r8, #1
 80077da:	45d0      	cmp	r8, sl
 80077dc:	dbf3      	blt.n	80077c6 <_printf_float+0x3fa>
 80077de:	464b      	mov	r3, r9
 80077e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80077e4:	e6df      	b.n	80075a6 <_printf_float+0x1da>
 80077e6:	f04f 0800 	mov.w	r8, #0
 80077ea:	f104 0b1a 	add.w	fp, r4, #26
 80077ee:	e7f4      	b.n	80077da <_printf_float+0x40e>
 80077f0:	2301      	movs	r3, #1
 80077f2:	4642      	mov	r2, r8
 80077f4:	e7e1      	b.n	80077ba <_printf_float+0x3ee>
 80077f6:	2301      	movs	r3, #1
 80077f8:	464a      	mov	r2, r9
 80077fa:	4631      	mov	r1, r6
 80077fc:	4628      	mov	r0, r5
 80077fe:	47b8      	blx	r7
 8007800:	3001      	adds	r0, #1
 8007802:	f43f ae3e 	beq.w	8007482 <_printf_float+0xb6>
 8007806:	f108 0801 	add.w	r8, r8, #1
 800780a:	68e3      	ldr	r3, [r4, #12]
 800780c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800780e:	1a5b      	subs	r3, r3, r1
 8007810:	4543      	cmp	r3, r8
 8007812:	dcf0      	bgt.n	80077f6 <_printf_float+0x42a>
 8007814:	e6fc      	b.n	8007610 <_printf_float+0x244>
 8007816:	f04f 0800 	mov.w	r8, #0
 800781a:	f104 0919 	add.w	r9, r4, #25
 800781e:	e7f4      	b.n	800780a <_printf_float+0x43e>

08007820 <_printf_common>:
 8007820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007824:	4616      	mov	r6, r2
 8007826:	4698      	mov	r8, r3
 8007828:	688a      	ldr	r2, [r1, #8]
 800782a:	690b      	ldr	r3, [r1, #16]
 800782c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007830:	4293      	cmp	r3, r2
 8007832:	bfb8      	it	lt
 8007834:	4613      	movlt	r3, r2
 8007836:	6033      	str	r3, [r6, #0]
 8007838:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800783c:	4607      	mov	r7, r0
 800783e:	460c      	mov	r4, r1
 8007840:	b10a      	cbz	r2, 8007846 <_printf_common+0x26>
 8007842:	3301      	adds	r3, #1
 8007844:	6033      	str	r3, [r6, #0]
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	0699      	lsls	r1, r3, #26
 800784a:	bf42      	ittt	mi
 800784c:	6833      	ldrmi	r3, [r6, #0]
 800784e:	3302      	addmi	r3, #2
 8007850:	6033      	strmi	r3, [r6, #0]
 8007852:	6825      	ldr	r5, [r4, #0]
 8007854:	f015 0506 	ands.w	r5, r5, #6
 8007858:	d106      	bne.n	8007868 <_printf_common+0x48>
 800785a:	f104 0a19 	add.w	sl, r4, #25
 800785e:	68e3      	ldr	r3, [r4, #12]
 8007860:	6832      	ldr	r2, [r6, #0]
 8007862:	1a9b      	subs	r3, r3, r2
 8007864:	42ab      	cmp	r3, r5
 8007866:	dc26      	bgt.n	80078b6 <_printf_common+0x96>
 8007868:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800786c:	6822      	ldr	r2, [r4, #0]
 800786e:	3b00      	subs	r3, #0
 8007870:	bf18      	it	ne
 8007872:	2301      	movne	r3, #1
 8007874:	0692      	lsls	r2, r2, #26
 8007876:	d42b      	bmi.n	80078d0 <_printf_common+0xb0>
 8007878:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800787c:	4641      	mov	r1, r8
 800787e:	4638      	mov	r0, r7
 8007880:	47c8      	blx	r9
 8007882:	3001      	adds	r0, #1
 8007884:	d01e      	beq.n	80078c4 <_printf_common+0xa4>
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	6922      	ldr	r2, [r4, #16]
 800788a:	f003 0306 	and.w	r3, r3, #6
 800788e:	2b04      	cmp	r3, #4
 8007890:	bf02      	ittt	eq
 8007892:	68e5      	ldreq	r5, [r4, #12]
 8007894:	6833      	ldreq	r3, [r6, #0]
 8007896:	1aed      	subeq	r5, r5, r3
 8007898:	68a3      	ldr	r3, [r4, #8]
 800789a:	bf0c      	ite	eq
 800789c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078a0:	2500      	movne	r5, #0
 80078a2:	4293      	cmp	r3, r2
 80078a4:	bfc4      	itt	gt
 80078a6:	1a9b      	subgt	r3, r3, r2
 80078a8:	18ed      	addgt	r5, r5, r3
 80078aa:	2600      	movs	r6, #0
 80078ac:	341a      	adds	r4, #26
 80078ae:	42b5      	cmp	r5, r6
 80078b0:	d11a      	bne.n	80078e8 <_printf_common+0xc8>
 80078b2:	2000      	movs	r0, #0
 80078b4:	e008      	b.n	80078c8 <_printf_common+0xa8>
 80078b6:	2301      	movs	r3, #1
 80078b8:	4652      	mov	r2, sl
 80078ba:	4641      	mov	r1, r8
 80078bc:	4638      	mov	r0, r7
 80078be:	47c8      	blx	r9
 80078c0:	3001      	adds	r0, #1
 80078c2:	d103      	bne.n	80078cc <_printf_common+0xac>
 80078c4:	f04f 30ff 	mov.w	r0, #4294967295
 80078c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078cc:	3501      	adds	r5, #1
 80078ce:	e7c6      	b.n	800785e <_printf_common+0x3e>
 80078d0:	18e1      	adds	r1, r4, r3
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	2030      	movs	r0, #48	@ 0x30
 80078d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80078da:	4422      	add	r2, r4
 80078dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078e4:	3302      	adds	r3, #2
 80078e6:	e7c7      	b.n	8007878 <_printf_common+0x58>
 80078e8:	2301      	movs	r3, #1
 80078ea:	4622      	mov	r2, r4
 80078ec:	4641      	mov	r1, r8
 80078ee:	4638      	mov	r0, r7
 80078f0:	47c8      	blx	r9
 80078f2:	3001      	adds	r0, #1
 80078f4:	d0e6      	beq.n	80078c4 <_printf_common+0xa4>
 80078f6:	3601      	adds	r6, #1
 80078f8:	e7d9      	b.n	80078ae <_printf_common+0x8e>
	...

080078fc <_printf_i>:
 80078fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007900:	7e0f      	ldrb	r7, [r1, #24]
 8007902:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007904:	2f78      	cmp	r7, #120	@ 0x78
 8007906:	4691      	mov	r9, r2
 8007908:	4680      	mov	r8, r0
 800790a:	460c      	mov	r4, r1
 800790c:	469a      	mov	sl, r3
 800790e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007912:	d807      	bhi.n	8007924 <_printf_i+0x28>
 8007914:	2f62      	cmp	r7, #98	@ 0x62
 8007916:	d80a      	bhi.n	800792e <_printf_i+0x32>
 8007918:	2f00      	cmp	r7, #0
 800791a:	f000 80d1 	beq.w	8007ac0 <_printf_i+0x1c4>
 800791e:	2f58      	cmp	r7, #88	@ 0x58
 8007920:	f000 80b8 	beq.w	8007a94 <_printf_i+0x198>
 8007924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007928:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800792c:	e03a      	b.n	80079a4 <_printf_i+0xa8>
 800792e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007932:	2b15      	cmp	r3, #21
 8007934:	d8f6      	bhi.n	8007924 <_printf_i+0x28>
 8007936:	a101      	add	r1, pc, #4	@ (adr r1, 800793c <_printf_i+0x40>)
 8007938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800793c:	08007995 	.word	0x08007995
 8007940:	080079a9 	.word	0x080079a9
 8007944:	08007925 	.word	0x08007925
 8007948:	08007925 	.word	0x08007925
 800794c:	08007925 	.word	0x08007925
 8007950:	08007925 	.word	0x08007925
 8007954:	080079a9 	.word	0x080079a9
 8007958:	08007925 	.word	0x08007925
 800795c:	08007925 	.word	0x08007925
 8007960:	08007925 	.word	0x08007925
 8007964:	08007925 	.word	0x08007925
 8007968:	08007aa7 	.word	0x08007aa7
 800796c:	080079d3 	.word	0x080079d3
 8007970:	08007a61 	.word	0x08007a61
 8007974:	08007925 	.word	0x08007925
 8007978:	08007925 	.word	0x08007925
 800797c:	08007ac9 	.word	0x08007ac9
 8007980:	08007925 	.word	0x08007925
 8007984:	080079d3 	.word	0x080079d3
 8007988:	08007925 	.word	0x08007925
 800798c:	08007925 	.word	0x08007925
 8007990:	08007a69 	.word	0x08007a69
 8007994:	6833      	ldr	r3, [r6, #0]
 8007996:	1d1a      	adds	r2, r3, #4
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6032      	str	r2, [r6, #0]
 800799c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079a4:	2301      	movs	r3, #1
 80079a6:	e09c      	b.n	8007ae2 <_printf_i+0x1e6>
 80079a8:	6833      	ldr	r3, [r6, #0]
 80079aa:	6820      	ldr	r0, [r4, #0]
 80079ac:	1d19      	adds	r1, r3, #4
 80079ae:	6031      	str	r1, [r6, #0]
 80079b0:	0606      	lsls	r6, r0, #24
 80079b2:	d501      	bpl.n	80079b8 <_printf_i+0xbc>
 80079b4:	681d      	ldr	r5, [r3, #0]
 80079b6:	e003      	b.n	80079c0 <_printf_i+0xc4>
 80079b8:	0645      	lsls	r5, r0, #25
 80079ba:	d5fb      	bpl.n	80079b4 <_printf_i+0xb8>
 80079bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079c0:	2d00      	cmp	r5, #0
 80079c2:	da03      	bge.n	80079cc <_printf_i+0xd0>
 80079c4:	232d      	movs	r3, #45	@ 0x2d
 80079c6:	426d      	negs	r5, r5
 80079c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079cc:	4858      	ldr	r0, [pc, #352]	@ (8007b30 <_printf_i+0x234>)
 80079ce:	230a      	movs	r3, #10
 80079d0:	e011      	b.n	80079f6 <_printf_i+0xfa>
 80079d2:	6821      	ldr	r1, [r4, #0]
 80079d4:	6833      	ldr	r3, [r6, #0]
 80079d6:	0608      	lsls	r0, r1, #24
 80079d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80079dc:	d402      	bmi.n	80079e4 <_printf_i+0xe8>
 80079de:	0649      	lsls	r1, r1, #25
 80079e0:	bf48      	it	mi
 80079e2:	b2ad      	uxthmi	r5, r5
 80079e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80079e6:	4852      	ldr	r0, [pc, #328]	@ (8007b30 <_printf_i+0x234>)
 80079e8:	6033      	str	r3, [r6, #0]
 80079ea:	bf14      	ite	ne
 80079ec:	230a      	movne	r3, #10
 80079ee:	2308      	moveq	r3, #8
 80079f0:	2100      	movs	r1, #0
 80079f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80079f6:	6866      	ldr	r6, [r4, #4]
 80079f8:	60a6      	str	r6, [r4, #8]
 80079fa:	2e00      	cmp	r6, #0
 80079fc:	db05      	blt.n	8007a0a <_printf_i+0x10e>
 80079fe:	6821      	ldr	r1, [r4, #0]
 8007a00:	432e      	orrs	r6, r5
 8007a02:	f021 0104 	bic.w	r1, r1, #4
 8007a06:	6021      	str	r1, [r4, #0]
 8007a08:	d04b      	beq.n	8007aa2 <_printf_i+0x1a6>
 8007a0a:	4616      	mov	r6, r2
 8007a0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a10:	fb03 5711 	mls	r7, r3, r1, r5
 8007a14:	5dc7      	ldrb	r7, [r0, r7]
 8007a16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a1a:	462f      	mov	r7, r5
 8007a1c:	42bb      	cmp	r3, r7
 8007a1e:	460d      	mov	r5, r1
 8007a20:	d9f4      	bls.n	8007a0c <_printf_i+0x110>
 8007a22:	2b08      	cmp	r3, #8
 8007a24:	d10b      	bne.n	8007a3e <_printf_i+0x142>
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	07df      	lsls	r7, r3, #31
 8007a2a:	d508      	bpl.n	8007a3e <_printf_i+0x142>
 8007a2c:	6923      	ldr	r3, [r4, #16]
 8007a2e:	6861      	ldr	r1, [r4, #4]
 8007a30:	4299      	cmp	r1, r3
 8007a32:	bfde      	ittt	le
 8007a34:	2330      	movle	r3, #48	@ 0x30
 8007a36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a3e:	1b92      	subs	r2, r2, r6
 8007a40:	6122      	str	r2, [r4, #16]
 8007a42:	f8cd a000 	str.w	sl, [sp]
 8007a46:	464b      	mov	r3, r9
 8007a48:	aa03      	add	r2, sp, #12
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	4640      	mov	r0, r8
 8007a4e:	f7ff fee7 	bl	8007820 <_printf_common>
 8007a52:	3001      	adds	r0, #1
 8007a54:	d14a      	bne.n	8007aec <_printf_i+0x1f0>
 8007a56:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5a:	b004      	add	sp, #16
 8007a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	f043 0320 	orr.w	r3, r3, #32
 8007a66:	6023      	str	r3, [r4, #0]
 8007a68:	4832      	ldr	r0, [pc, #200]	@ (8007b34 <_printf_i+0x238>)
 8007a6a:	2778      	movs	r7, #120	@ 0x78
 8007a6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	6831      	ldr	r1, [r6, #0]
 8007a74:	061f      	lsls	r7, r3, #24
 8007a76:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a7a:	d402      	bmi.n	8007a82 <_printf_i+0x186>
 8007a7c:	065f      	lsls	r7, r3, #25
 8007a7e:	bf48      	it	mi
 8007a80:	b2ad      	uxthmi	r5, r5
 8007a82:	6031      	str	r1, [r6, #0]
 8007a84:	07d9      	lsls	r1, r3, #31
 8007a86:	bf44      	itt	mi
 8007a88:	f043 0320 	orrmi.w	r3, r3, #32
 8007a8c:	6023      	strmi	r3, [r4, #0]
 8007a8e:	b11d      	cbz	r5, 8007a98 <_printf_i+0x19c>
 8007a90:	2310      	movs	r3, #16
 8007a92:	e7ad      	b.n	80079f0 <_printf_i+0xf4>
 8007a94:	4826      	ldr	r0, [pc, #152]	@ (8007b30 <_printf_i+0x234>)
 8007a96:	e7e9      	b.n	8007a6c <_printf_i+0x170>
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	f023 0320 	bic.w	r3, r3, #32
 8007a9e:	6023      	str	r3, [r4, #0]
 8007aa0:	e7f6      	b.n	8007a90 <_printf_i+0x194>
 8007aa2:	4616      	mov	r6, r2
 8007aa4:	e7bd      	b.n	8007a22 <_printf_i+0x126>
 8007aa6:	6833      	ldr	r3, [r6, #0]
 8007aa8:	6825      	ldr	r5, [r4, #0]
 8007aaa:	6961      	ldr	r1, [r4, #20]
 8007aac:	1d18      	adds	r0, r3, #4
 8007aae:	6030      	str	r0, [r6, #0]
 8007ab0:	062e      	lsls	r6, r5, #24
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	d501      	bpl.n	8007aba <_printf_i+0x1be>
 8007ab6:	6019      	str	r1, [r3, #0]
 8007ab8:	e002      	b.n	8007ac0 <_printf_i+0x1c4>
 8007aba:	0668      	lsls	r0, r5, #25
 8007abc:	d5fb      	bpl.n	8007ab6 <_printf_i+0x1ba>
 8007abe:	8019      	strh	r1, [r3, #0]
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	6123      	str	r3, [r4, #16]
 8007ac4:	4616      	mov	r6, r2
 8007ac6:	e7bc      	b.n	8007a42 <_printf_i+0x146>
 8007ac8:	6833      	ldr	r3, [r6, #0]
 8007aca:	1d1a      	adds	r2, r3, #4
 8007acc:	6032      	str	r2, [r6, #0]
 8007ace:	681e      	ldr	r6, [r3, #0]
 8007ad0:	6862      	ldr	r2, [r4, #4]
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f7f8 fb8b 	bl	80001f0 <memchr>
 8007ada:	b108      	cbz	r0, 8007ae0 <_printf_i+0x1e4>
 8007adc:	1b80      	subs	r0, r0, r6
 8007ade:	6060      	str	r0, [r4, #4]
 8007ae0:	6863      	ldr	r3, [r4, #4]
 8007ae2:	6123      	str	r3, [r4, #16]
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007aea:	e7aa      	b.n	8007a42 <_printf_i+0x146>
 8007aec:	6923      	ldr	r3, [r4, #16]
 8007aee:	4632      	mov	r2, r6
 8007af0:	4649      	mov	r1, r9
 8007af2:	4640      	mov	r0, r8
 8007af4:	47d0      	blx	sl
 8007af6:	3001      	adds	r0, #1
 8007af8:	d0ad      	beq.n	8007a56 <_printf_i+0x15a>
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	079b      	lsls	r3, r3, #30
 8007afe:	d413      	bmi.n	8007b28 <_printf_i+0x22c>
 8007b00:	68e0      	ldr	r0, [r4, #12]
 8007b02:	9b03      	ldr	r3, [sp, #12]
 8007b04:	4298      	cmp	r0, r3
 8007b06:	bfb8      	it	lt
 8007b08:	4618      	movlt	r0, r3
 8007b0a:	e7a6      	b.n	8007a5a <_printf_i+0x15e>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	4632      	mov	r2, r6
 8007b10:	4649      	mov	r1, r9
 8007b12:	4640      	mov	r0, r8
 8007b14:	47d0      	blx	sl
 8007b16:	3001      	adds	r0, #1
 8007b18:	d09d      	beq.n	8007a56 <_printf_i+0x15a>
 8007b1a:	3501      	adds	r5, #1
 8007b1c:	68e3      	ldr	r3, [r4, #12]
 8007b1e:	9903      	ldr	r1, [sp, #12]
 8007b20:	1a5b      	subs	r3, r3, r1
 8007b22:	42ab      	cmp	r3, r5
 8007b24:	dcf2      	bgt.n	8007b0c <_printf_i+0x210>
 8007b26:	e7eb      	b.n	8007b00 <_printf_i+0x204>
 8007b28:	2500      	movs	r5, #0
 8007b2a:	f104 0619 	add.w	r6, r4, #25
 8007b2e:	e7f5      	b.n	8007b1c <_printf_i+0x220>
 8007b30:	08010eaa 	.word	0x08010eaa
 8007b34:	08010ebb 	.word	0x08010ebb

08007b38 <std>:
 8007b38:	2300      	movs	r3, #0
 8007b3a:	b510      	push	{r4, lr}
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b46:	6083      	str	r3, [r0, #8]
 8007b48:	8181      	strh	r1, [r0, #12]
 8007b4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b4c:	81c2      	strh	r2, [r0, #14]
 8007b4e:	6183      	str	r3, [r0, #24]
 8007b50:	4619      	mov	r1, r3
 8007b52:	2208      	movs	r2, #8
 8007b54:	305c      	adds	r0, #92	@ 0x5c
 8007b56:	f000 f9f9 	bl	8007f4c <memset>
 8007b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b90 <std+0x58>)
 8007b5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b94 <std+0x5c>)
 8007b60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b62:	4b0d      	ldr	r3, [pc, #52]	@ (8007b98 <std+0x60>)
 8007b64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b66:	4b0d      	ldr	r3, [pc, #52]	@ (8007b9c <std+0x64>)
 8007b68:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba0 <std+0x68>)
 8007b6c:	6224      	str	r4, [r4, #32]
 8007b6e:	429c      	cmp	r4, r3
 8007b70:	d006      	beq.n	8007b80 <std+0x48>
 8007b72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b76:	4294      	cmp	r4, r2
 8007b78:	d002      	beq.n	8007b80 <std+0x48>
 8007b7a:	33d0      	adds	r3, #208	@ 0xd0
 8007b7c:	429c      	cmp	r4, r3
 8007b7e:	d105      	bne.n	8007b8c <std+0x54>
 8007b80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b88:	f000 ba6c 	b.w	8008064 <__retarget_lock_init_recursive>
 8007b8c:	bd10      	pop	{r4, pc}
 8007b8e:	bf00      	nop
 8007b90:	08007d9d 	.word	0x08007d9d
 8007b94:	08007dbf 	.word	0x08007dbf
 8007b98:	08007df7 	.word	0x08007df7
 8007b9c:	08007e1b 	.word	0x08007e1b
 8007ba0:	200013e4 	.word	0x200013e4

08007ba4 <stdio_exit_handler>:
 8007ba4:	4a02      	ldr	r2, [pc, #8]	@ (8007bb0 <stdio_exit_handler+0xc>)
 8007ba6:	4903      	ldr	r1, [pc, #12]	@ (8007bb4 <stdio_exit_handler+0x10>)
 8007ba8:	4803      	ldr	r0, [pc, #12]	@ (8007bb8 <stdio_exit_handler+0x14>)
 8007baa:	f000 b869 	b.w	8007c80 <_fwalk_sglue>
 8007bae:	bf00      	nop
 8007bb0:	20000924 	.word	0x20000924
 8007bb4:	0800984d 	.word	0x0800984d
 8007bb8:	20000934 	.word	0x20000934

08007bbc <cleanup_stdio>:
 8007bbc:	6841      	ldr	r1, [r0, #4]
 8007bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf0 <cleanup_stdio+0x34>)
 8007bc0:	4299      	cmp	r1, r3
 8007bc2:	b510      	push	{r4, lr}
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	d001      	beq.n	8007bcc <cleanup_stdio+0x10>
 8007bc8:	f001 fe40 	bl	800984c <_fflush_r>
 8007bcc:	68a1      	ldr	r1, [r4, #8]
 8007bce:	4b09      	ldr	r3, [pc, #36]	@ (8007bf4 <cleanup_stdio+0x38>)
 8007bd0:	4299      	cmp	r1, r3
 8007bd2:	d002      	beq.n	8007bda <cleanup_stdio+0x1e>
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f001 fe39 	bl	800984c <_fflush_r>
 8007bda:	68e1      	ldr	r1, [r4, #12]
 8007bdc:	4b06      	ldr	r3, [pc, #24]	@ (8007bf8 <cleanup_stdio+0x3c>)
 8007bde:	4299      	cmp	r1, r3
 8007be0:	d004      	beq.n	8007bec <cleanup_stdio+0x30>
 8007be2:	4620      	mov	r0, r4
 8007be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007be8:	f001 be30 	b.w	800984c <_fflush_r>
 8007bec:	bd10      	pop	{r4, pc}
 8007bee:	bf00      	nop
 8007bf0:	200013e4 	.word	0x200013e4
 8007bf4:	2000144c 	.word	0x2000144c
 8007bf8:	200014b4 	.word	0x200014b4

08007bfc <global_stdio_init.part.0>:
 8007bfc:	b510      	push	{r4, lr}
 8007bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8007c2c <global_stdio_init.part.0+0x30>)
 8007c00:	4c0b      	ldr	r4, [pc, #44]	@ (8007c30 <global_stdio_init.part.0+0x34>)
 8007c02:	4a0c      	ldr	r2, [pc, #48]	@ (8007c34 <global_stdio_init.part.0+0x38>)
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	4620      	mov	r0, r4
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2104      	movs	r1, #4
 8007c0c:	f7ff ff94 	bl	8007b38 <std>
 8007c10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c14:	2201      	movs	r2, #1
 8007c16:	2109      	movs	r1, #9
 8007c18:	f7ff ff8e 	bl	8007b38 <std>
 8007c1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c20:	2202      	movs	r2, #2
 8007c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c26:	2112      	movs	r1, #18
 8007c28:	f7ff bf86 	b.w	8007b38 <std>
 8007c2c:	2000151c 	.word	0x2000151c
 8007c30:	200013e4 	.word	0x200013e4
 8007c34:	08007ba5 	.word	0x08007ba5

08007c38 <__sfp_lock_acquire>:
 8007c38:	4801      	ldr	r0, [pc, #4]	@ (8007c40 <__sfp_lock_acquire+0x8>)
 8007c3a:	f000 ba14 	b.w	8008066 <__retarget_lock_acquire_recursive>
 8007c3e:	bf00      	nop
 8007c40:	20001525 	.word	0x20001525

08007c44 <__sfp_lock_release>:
 8007c44:	4801      	ldr	r0, [pc, #4]	@ (8007c4c <__sfp_lock_release+0x8>)
 8007c46:	f000 ba0f 	b.w	8008068 <__retarget_lock_release_recursive>
 8007c4a:	bf00      	nop
 8007c4c:	20001525 	.word	0x20001525

08007c50 <__sinit>:
 8007c50:	b510      	push	{r4, lr}
 8007c52:	4604      	mov	r4, r0
 8007c54:	f7ff fff0 	bl	8007c38 <__sfp_lock_acquire>
 8007c58:	6a23      	ldr	r3, [r4, #32]
 8007c5a:	b11b      	cbz	r3, 8007c64 <__sinit+0x14>
 8007c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c60:	f7ff bff0 	b.w	8007c44 <__sfp_lock_release>
 8007c64:	4b04      	ldr	r3, [pc, #16]	@ (8007c78 <__sinit+0x28>)
 8007c66:	6223      	str	r3, [r4, #32]
 8007c68:	4b04      	ldr	r3, [pc, #16]	@ (8007c7c <__sinit+0x2c>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1f5      	bne.n	8007c5c <__sinit+0xc>
 8007c70:	f7ff ffc4 	bl	8007bfc <global_stdio_init.part.0>
 8007c74:	e7f2      	b.n	8007c5c <__sinit+0xc>
 8007c76:	bf00      	nop
 8007c78:	08007bbd 	.word	0x08007bbd
 8007c7c:	2000151c 	.word	0x2000151c

08007c80 <_fwalk_sglue>:
 8007c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c84:	4607      	mov	r7, r0
 8007c86:	4688      	mov	r8, r1
 8007c88:	4614      	mov	r4, r2
 8007c8a:	2600      	movs	r6, #0
 8007c8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c90:	f1b9 0901 	subs.w	r9, r9, #1
 8007c94:	d505      	bpl.n	8007ca2 <_fwalk_sglue+0x22>
 8007c96:	6824      	ldr	r4, [r4, #0]
 8007c98:	2c00      	cmp	r4, #0
 8007c9a:	d1f7      	bne.n	8007c8c <_fwalk_sglue+0xc>
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ca2:	89ab      	ldrh	r3, [r5, #12]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d907      	bls.n	8007cb8 <_fwalk_sglue+0x38>
 8007ca8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cac:	3301      	adds	r3, #1
 8007cae:	d003      	beq.n	8007cb8 <_fwalk_sglue+0x38>
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	47c0      	blx	r8
 8007cb6:	4306      	orrs	r6, r0
 8007cb8:	3568      	adds	r5, #104	@ 0x68
 8007cba:	e7e9      	b.n	8007c90 <_fwalk_sglue+0x10>

08007cbc <iprintf>:
 8007cbc:	b40f      	push	{r0, r1, r2, r3}
 8007cbe:	b507      	push	{r0, r1, r2, lr}
 8007cc0:	4906      	ldr	r1, [pc, #24]	@ (8007cdc <iprintf+0x20>)
 8007cc2:	ab04      	add	r3, sp, #16
 8007cc4:	6808      	ldr	r0, [r1, #0]
 8007cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cca:	6881      	ldr	r1, [r0, #8]
 8007ccc:	9301      	str	r3, [sp, #4]
 8007cce:	f001 fc21 	bl	8009514 <_vfiprintf_r>
 8007cd2:	b003      	add	sp, #12
 8007cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cd8:	b004      	add	sp, #16
 8007cda:	4770      	bx	lr
 8007cdc:	20000930 	.word	0x20000930

08007ce0 <_puts_r>:
 8007ce0:	6a03      	ldr	r3, [r0, #32]
 8007ce2:	b570      	push	{r4, r5, r6, lr}
 8007ce4:	6884      	ldr	r4, [r0, #8]
 8007ce6:	4605      	mov	r5, r0
 8007ce8:	460e      	mov	r6, r1
 8007cea:	b90b      	cbnz	r3, 8007cf0 <_puts_r+0x10>
 8007cec:	f7ff ffb0 	bl	8007c50 <__sinit>
 8007cf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cf2:	07db      	lsls	r3, r3, #31
 8007cf4:	d405      	bmi.n	8007d02 <_puts_r+0x22>
 8007cf6:	89a3      	ldrh	r3, [r4, #12]
 8007cf8:	0598      	lsls	r0, r3, #22
 8007cfa:	d402      	bmi.n	8007d02 <_puts_r+0x22>
 8007cfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cfe:	f000 f9b2 	bl	8008066 <__retarget_lock_acquire_recursive>
 8007d02:	89a3      	ldrh	r3, [r4, #12]
 8007d04:	0719      	lsls	r1, r3, #28
 8007d06:	d502      	bpl.n	8007d0e <_puts_r+0x2e>
 8007d08:	6923      	ldr	r3, [r4, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d135      	bne.n	8007d7a <_puts_r+0x9a>
 8007d0e:	4621      	mov	r1, r4
 8007d10:	4628      	mov	r0, r5
 8007d12:	f000 f8c5 	bl	8007ea0 <__swsetup_r>
 8007d16:	b380      	cbz	r0, 8007d7a <_puts_r+0x9a>
 8007d18:	f04f 35ff 	mov.w	r5, #4294967295
 8007d1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d1e:	07da      	lsls	r2, r3, #31
 8007d20:	d405      	bmi.n	8007d2e <_puts_r+0x4e>
 8007d22:	89a3      	ldrh	r3, [r4, #12]
 8007d24:	059b      	lsls	r3, r3, #22
 8007d26:	d402      	bmi.n	8007d2e <_puts_r+0x4e>
 8007d28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d2a:	f000 f99d 	bl	8008068 <__retarget_lock_release_recursive>
 8007d2e:	4628      	mov	r0, r5
 8007d30:	bd70      	pop	{r4, r5, r6, pc}
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	da04      	bge.n	8007d40 <_puts_r+0x60>
 8007d36:	69a2      	ldr	r2, [r4, #24]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	dc17      	bgt.n	8007d6c <_puts_r+0x8c>
 8007d3c:	290a      	cmp	r1, #10
 8007d3e:	d015      	beq.n	8007d6c <_puts_r+0x8c>
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	1c5a      	adds	r2, r3, #1
 8007d44:	6022      	str	r2, [r4, #0]
 8007d46:	7019      	strb	r1, [r3, #0]
 8007d48:	68a3      	ldr	r3, [r4, #8]
 8007d4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	60a3      	str	r3, [r4, #8]
 8007d52:	2900      	cmp	r1, #0
 8007d54:	d1ed      	bne.n	8007d32 <_puts_r+0x52>
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	da11      	bge.n	8007d7e <_puts_r+0x9e>
 8007d5a:	4622      	mov	r2, r4
 8007d5c:	210a      	movs	r1, #10
 8007d5e:	4628      	mov	r0, r5
 8007d60:	f000 f85f 	bl	8007e22 <__swbuf_r>
 8007d64:	3001      	adds	r0, #1
 8007d66:	d0d7      	beq.n	8007d18 <_puts_r+0x38>
 8007d68:	250a      	movs	r5, #10
 8007d6a:	e7d7      	b.n	8007d1c <_puts_r+0x3c>
 8007d6c:	4622      	mov	r2, r4
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f000 f857 	bl	8007e22 <__swbuf_r>
 8007d74:	3001      	adds	r0, #1
 8007d76:	d1e7      	bne.n	8007d48 <_puts_r+0x68>
 8007d78:	e7ce      	b.n	8007d18 <_puts_r+0x38>
 8007d7a:	3e01      	subs	r6, #1
 8007d7c:	e7e4      	b.n	8007d48 <_puts_r+0x68>
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	1c5a      	adds	r2, r3, #1
 8007d82:	6022      	str	r2, [r4, #0]
 8007d84:	220a      	movs	r2, #10
 8007d86:	701a      	strb	r2, [r3, #0]
 8007d88:	e7ee      	b.n	8007d68 <_puts_r+0x88>
	...

08007d8c <puts>:
 8007d8c:	4b02      	ldr	r3, [pc, #8]	@ (8007d98 <puts+0xc>)
 8007d8e:	4601      	mov	r1, r0
 8007d90:	6818      	ldr	r0, [r3, #0]
 8007d92:	f7ff bfa5 	b.w	8007ce0 <_puts_r>
 8007d96:	bf00      	nop
 8007d98:	20000930 	.word	0x20000930

08007d9c <__sread>:
 8007d9c:	b510      	push	{r4, lr}
 8007d9e:	460c      	mov	r4, r1
 8007da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da4:	f000 f900 	bl	8007fa8 <_read_r>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	bfab      	itete	ge
 8007dac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007dae:	89a3      	ldrhlt	r3, [r4, #12]
 8007db0:	181b      	addge	r3, r3, r0
 8007db2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007db6:	bfac      	ite	ge
 8007db8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007dba:	81a3      	strhlt	r3, [r4, #12]
 8007dbc:	bd10      	pop	{r4, pc}

08007dbe <__swrite>:
 8007dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc2:	461f      	mov	r7, r3
 8007dc4:	898b      	ldrh	r3, [r1, #12]
 8007dc6:	05db      	lsls	r3, r3, #23
 8007dc8:	4605      	mov	r5, r0
 8007dca:	460c      	mov	r4, r1
 8007dcc:	4616      	mov	r6, r2
 8007dce:	d505      	bpl.n	8007ddc <__swrite+0x1e>
 8007dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f000 f8d4 	bl	8007f84 <_lseek_r>
 8007ddc:	89a3      	ldrh	r3, [r4, #12]
 8007dde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007de2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007de6:	81a3      	strh	r3, [r4, #12]
 8007de8:	4632      	mov	r2, r6
 8007dea:	463b      	mov	r3, r7
 8007dec:	4628      	mov	r0, r5
 8007dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007df2:	f000 b8fb 	b.w	8007fec <_write_r>

08007df6 <__sseek>:
 8007df6:	b510      	push	{r4, lr}
 8007df8:	460c      	mov	r4, r1
 8007dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dfe:	f000 f8c1 	bl	8007f84 <_lseek_r>
 8007e02:	1c43      	adds	r3, r0, #1
 8007e04:	89a3      	ldrh	r3, [r4, #12]
 8007e06:	bf15      	itete	ne
 8007e08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e12:	81a3      	strheq	r3, [r4, #12]
 8007e14:	bf18      	it	ne
 8007e16:	81a3      	strhne	r3, [r4, #12]
 8007e18:	bd10      	pop	{r4, pc}

08007e1a <__sclose>:
 8007e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e1e:	f000 b8a1 	b.w	8007f64 <_close_r>

08007e22 <__swbuf_r>:
 8007e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e24:	460e      	mov	r6, r1
 8007e26:	4614      	mov	r4, r2
 8007e28:	4605      	mov	r5, r0
 8007e2a:	b118      	cbz	r0, 8007e34 <__swbuf_r+0x12>
 8007e2c:	6a03      	ldr	r3, [r0, #32]
 8007e2e:	b90b      	cbnz	r3, 8007e34 <__swbuf_r+0x12>
 8007e30:	f7ff ff0e 	bl	8007c50 <__sinit>
 8007e34:	69a3      	ldr	r3, [r4, #24]
 8007e36:	60a3      	str	r3, [r4, #8]
 8007e38:	89a3      	ldrh	r3, [r4, #12]
 8007e3a:	071a      	lsls	r2, r3, #28
 8007e3c:	d501      	bpl.n	8007e42 <__swbuf_r+0x20>
 8007e3e:	6923      	ldr	r3, [r4, #16]
 8007e40:	b943      	cbnz	r3, 8007e54 <__swbuf_r+0x32>
 8007e42:	4621      	mov	r1, r4
 8007e44:	4628      	mov	r0, r5
 8007e46:	f000 f82b 	bl	8007ea0 <__swsetup_r>
 8007e4a:	b118      	cbz	r0, 8007e54 <__swbuf_r+0x32>
 8007e4c:	f04f 37ff 	mov.w	r7, #4294967295
 8007e50:	4638      	mov	r0, r7
 8007e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e54:	6823      	ldr	r3, [r4, #0]
 8007e56:	6922      	ldr	r2, [r4, #16]
 8007e58:	1a98      	subs	r0, r3, r2
 8007e5a:	6963      	ldr	r3, [r4, #20]
 8007e5c:	b2f6      	uxtb	r6, r6
 8007e5e:	4283      	cmp	r3, r0
 8007e60:	4637      	mov	r7, r6
 8007e62:	dc05      	bgt.n	8007e70 <__swbuf_r+0x4e>
 8007e64:	4621      	mov	r1, r4
 8007e66:	4628      	mov	r0, r5
 8007e68:	f001 fcf0 	bl	800984c <_fflush_r>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d1ed      	bne.n	8007e4c <__swbuf_r+0x2a>
 8007e70:	68a3      	ldr	r3, [r4, #8]
 8007e72:	3b01      	subs	r3, #1
 8007e74:	60a3      	str	r3, [r4, #8]
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	1c5a      	adds	r2, r3, #1
 8007e7a:	6022      	str	r2, [r4, #0]
 8007e7c:	701e      	strb	r6, [r3, #0]
 8007e7e:	6962      	ldr	r2, [r4, #20]
 8007e80:	1c43      	adds	r3, r0, #1
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d004      	beq.n	8007e90 <__swbuf_r+0x6e>
 8007e86:	89a3      	ldrh	r3, [r4, #12]
 8007e88:	07db      	lsls	r3, r3, #31
 8007e8a:	d5e1      	bpl.n	8007e50 <__swbuf_r+0x2e>
 8007e8c:	2e0a      	cmp	r6, #10
 8007e8e:	d1df      	bne.n	8007e50 <__swbuf_r+0x2e>
 8007e90:	4621      	mov	r1, r4
 8007e92:	4628      	mov	r0, r5
 8007e94:	f001 fcda 	bl	800984c <_fflush_r>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d0d9      	beq.n	8007e50 <__swbuf_r+0x2e>
 8007e9c:	e7d6      	b.n	8007e4c <__swbuf_r+0x2a>
	...

08007ea0 <__swsetup_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	4b29      	ldr	r3, [pc, #164]	@ (8007f48 <__swsetup_r+0xa8>)
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	6818      	ldr	r0, [r3, #0]
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	b118      	cbz	r0, 8007eb4 <__swsetup_r+0x14>
 8007eac:	6a03      	ldr	r3, [r0, #32]
 8007eae:	b90b      	cbnz	r3, 8007eb4 <__swsetup_r+0x14>
 8007eb0:	f7ff fece 	bl	8007c50 <__sinit>
 8007eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eb8:	0719      	lsls	r1, r3, #28
 8007eba:	d422      	bmi.n	8007f02 <__swsetup_r+0x62>
 8007ebc:	06da      	lsls	r2, r3, #27
 8007ebe:	d407      	bmi.n	8007ed0 <__swsetup_r+0x30>
 8007ec0:	2209      	movs	r2, #9
 8007ec2:	602a      	str	r2, [r5, #0]
 8007ec4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ec8:	81a3      	strh	r3, [r4, #12]
 8007eca:	f04f 30ff 	mov.w	r0, #4294967295
 8007ece:	e033      	b.n	8007f38 <__swsetup_r+0x98>
 8007ed0:	0758      	lsls	r0, r3, #29
 8007ed2:	d512      	bpl.n	8007efa <__swsetup_r+0x5a>
 8007ed4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ed6:	b141      	cbz	r1, 8007eea <__swsetup_r+0x4a>
 8007ed8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007edc:	4299      	cmp	r1, r3
 8007ede:	d002      	beq.n	8007ee6 <__swsetup_r+0x46>
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	f000 ff29 	bl	8008d38 <_free_r>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007eea:	89a3      	ldrh	r3, [r4, #12]
 8007eec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ef0:	81a3      	strh	r3, [r4, #12]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	6063      	str	r3, [r4, #4]
 8007ef6:	6923      	ldr	r3, [r4, #16]
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	89a3      	ldrh	r3, [r4, #12]
 8007efc:	f043 0308 	orr.w	r3, r3, #8
 8007f00:	81a3      	strh	r3, [r4, #12]
 8007f02:	6923      	ldr	r3, [r4, #16]
 8007f04:	b94b      	cbnz	r3, 8007f1a <__swsetup_r+0x7a>
 8007f06:	89a3      	ldrh	r3, [r4, #12]
 8007f08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f10:	d003      	beq.n	8007f1a <__swsetup_r+0x7a>
 8007f12:	4621      	mov	r1, r4
 8007f14:	4628      	mov	r0, r5
 8007f16:	f001 fce7 	bl	80098e8 <__smakebuf_r>
 8007f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f1e:	f013 0201 	ands.w	r2, r3, #1
 8007f22:	d00a      	beq.n	8007f3a <__swsetup_r+0x9a>
 8007f24:	2200      	movs	r2, #0
 8007f26:	60a2      	str	r2, [r4, #8]
 8007f28:	6962      	ldr	r2, [r4, #20]
 8007f2a:	4252      	negs	r2, r2
 8007f2c:	61a2      	str	r2, [r4, #24]
 8007f2e:	6922      	ldr	r2, [r4, #16]
 8007f30:	b942      	cbnz	r2, 8007f44 <__swsetup_r+0xa4>
 8007f32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f36:	d1c5      	bne.n	8007ec4 <__swsetup_r+0x24>
 8007f38:	bd38      	pop	{r3, r4, r5, pc}
 8007f3a:	0799      	lsls	r1, r3, #30
 8007f3c:	bf58      	it	pl
 8007f3e:	6962      	ldrpl	r2, [r4, #20]
 8007f40:	60a2      	str	r2, [r4, #8]
 8007f42:	e7f4      	b.n	8007f2e <__swsetup_r+0x8e>
 8007f44:	2000      	movs	r0, #0
 8007f46:	e7f7      	b.n	8007f38 <__swsetup_r+0x98>
 8007f48:	20000930 	.word	0x20000930

08007f4c <memset>:
 8007f4c:	4402      	add	r2, r0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d100      	bne.n	8007f56 <memset+0xa>
 8007f54:	4770      	bx	lr
 8007f56:	f803 1b01 	strb.w	r1, [r3], #1
 8007f5a:	e7f9      	b.n	8007f50 <memset+0x4>

08007f5c <_localeconv_r>:
 8007f5c:	4800      	ldr	r0, [pc, #0]	@ (8007f60 <_localeconv_r+0x4>)
 8007f5e:	4770      	bx	lr
 8007f60:	20000a70 	.word	0x20000a70

08007f64 <_close_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	4d06      	ldr	r5, [pc, #24]	@ (8007f80 <_close_r+0x1c>)
 8007f68:	2300      	movs	r3, #0
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	4608      	mov	r0, r1
 8007f6e:	602b      	str	r3, [r5, #0]
 8007f70:	f7f9 fc2d 	bl	80017ce <_close>
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	d102      	bne.n	8007f7e <_close_r+0x1a>
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	b103      	cbz	r3, 8007f7e <_close_r+0x1a>
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	bd38      	pop	{r3, r4, r5, pc}
 8007f80:	20001520 	.word	0x20001520

08007f84 <_lseek_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4d07      	ldr	r5, [pc, #28]	@ (8007fa4 <_lseek_r+0x20>)
 8007f88:	4604      	mov	r4, r0
 8007f8a:	4608      	mov	r0, r1
 8007f8c:	4611      	mov	r1, r2
 8007f8e:	2200      	movs	r2, #0
 8007f90:	602a      	str	r2, [r5, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	f7f9 fc42 	bl	800181c <_lseek>
 8007f98:	1c43      	adds	r3, r0, #1
 8007f9a:	d102      	bne.n	8007fa2 <_lseek_r+0x1e>
 8007f9c:	682b      	ldr	r3, [r5, #0]
 8007f9e:	b103      	cbz	r3, 8007fa2 <_lseek_r+0x1e>
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	bd38      	pop	{r3, r4, r5, pc}
 8007fa4:	20001520 	.word	0x20001520

08007fa8 <_read_r>:
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	4d07      	ldr	r5, [pc, #28]	@ (8007fc8 <_read_r+0x20>)
 8007fac:	4604      	mov	r4, r0
 8007fae:	4608      	mov	r0, r1
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	602a      	str	r2, [r5, #0]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f7f9 fc3d 	bl	8001836 <_read>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	d102      	bne.n	8007fc6 <_read_r+0x1e>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	b103      	cbz	r3, 8007fc6 <_read_r+0x1e>
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	20001520 	.word	0x20001520

08007fcc <_sbrk_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4d06      	ldr	r5, [pc, #24]	@ (8007fe8 <_sbrk_r+0x1c>)
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	602b      	str	r3, [r5, #0]
 8007fd8:	f7f9 fc3a 	bl	8001850 <_sbrk>
 8007fdc:	1c43      	adds	r3, r0, #1
 8007fde:	d102      	bne.n	8007fe6 <_sbrk_r+0x1a>
 8007fe0:	682b      	ldr	r3, [r5, #0]
 8007fe2:	b103      	cbz	r3, 8007fe6 <_sbrk_r+0x1a>
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}
 8007fe8:	20001520 	.word	0x20001520

08007fec <_write_r>:
 8007fec:	b538      	push	{r3, r4, r5, lr}
 8007fee:	4d07      	ldr	r5, [pc, #28]	@ (800800c <_write_r+0x20>)
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	4608      	mov	r0, r1
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	602a      	str	r2, [r5, #0]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	f001 fee8 	bl	8009dd0 <_write>
 8008000:	1c43      	adds	r3, r0, #1
 8008002:	d102      	bne.n	800800a <_write_r+0x1e>
 8008004:	682b      	ldr	r3, [r5, #0]
 8008006:	b103      	cbz	r3, 800800a <_write_r+0x1e>
 8008008:	6023      	str	r3, [r4, #0]
 800800a:	bd38      	pop	{r3, r4, r5, pc}
 800800c:	20001520 	.word	0x20001520

08008010 <__errno>:
 8008010:	4b01      	ldr	r3, [pc, #4]	@ (8008018 <__errno+0x8>)
 8008012:	6818      	ldr	r0, [r3, #0]
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	20000930 	.word	0x20000930

0800801c <__libc_init_array>:
 800801c:	b570      	push	{r4, r5, r6, lr}
 800801e:	4d0d      	ldr	r5, [pc, #52]	@ (8008054 <__libc_init_array+0x38>)
 8008020:	4c0d      	ldr	r4, [pc, #52]	@ (8008058 <__libc_init_array+0x3c>)
 8008022:	1b64      	subs	r4, r4, r5
 8008024:	10a4      	asrs	r4, r4, #2
 8008026:	2600      	movs	r6, #0
 8008028:	42a6      	cmp	r6, r4
 800802a:	d109      	bne.n	8008040 <__libc_init_array+0x24>
 800802c:	4d0b      	ldr	r5, [pc, #44]	@ (800805c <__libc_init_array+0x40>)
 800802e:	4c0c      	ldr	r4, [pc, #48]	@ (8008060 <__libc_init_array+0x44>)
 8008030:	f001 fed8 	bl	8009de4 <_init>
 8008034:	1b64      	subs	r4, r4, r5
 8008036:	10a4      	asrs	r4, r4, #2
 8008038:	2600      	movs	r6, #0
 800803a:	42a6      	cmp	r6, r4
 800803c:	d105      	bne.n	800804a <__libc_init_array+0x2e>
 800803e:	bd70      	pop	{r4, r5, r6, pc}
 8008040:	f855 3b04 	ldr.w	r3, [r5], #4
 8008044:	4798      	blx	r3
 8008046:	3601      	adds	r6, #1
 8008048:	e7ee      	b.n	8008028 <__libc_init_array+0xc>
 800804a:	f855 3b04 	ldr.w	r3, [r5], #4
 800804e:	4798      	blx	r3
 8008050:	3601      	adds	r6, #1
 8008052:	e7f2      	b.n	800803a <__libc_init_array+0x1e>
 8008054:	0801122c 	.word	0x0801122c
 8008058:	0801122c 	.word	0x0801122c
 800805c:	0801122c 	.word	0x0801122c
 8008060:	08011230 	.word	0x08011230

08008064 <__retarget_lock_init_recursive>:
 8008064:	4770      	bx	lr

08008066 <__retarget_lock_acquire_recursive>:
 8008066:	4770      	bx	lr

08008068 <__retarget_lock_release_recursive>:
 8008068:	4770      	bx	lr

0800806a <memcpy>:
 800806a:	440a      	add	r2, r1
 800806c:	4291      	cmp	r1, r2
 800806e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008072:	d100      	bne.n	8008076 <memcpy+0xc>
 8008074:	4770      	bx	lr
 8008076:	b510      	push	{r4, lr}
 8008078:	f811 4b01 	ldrb.w	r4, [r1], #1
 800807c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008080:	4291      	cmp	r1, r2
 8008082:	d1f9      	bne.n	8008078 <memcpy+0xe>
 8008084:	bd10      	pop	{r4, pc}

08008086 <quorem>:
 8008086:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808a:	6903      	ldr	r3, [r0, #16]
 800808c:	690c      	ldr	r4, [r1, #16]
 800808e:	42a3      	cmp	r3, r4
 8008090:	4607      	mov	r7, r0
 8008092:	db7e      	blt.n	8008192 <quorem+0x10c>
 8008094:	3c01      	subs	r4, #1
 8008096:	f101 0814 	add.w	r8, r1, #20
 800809a:	00a3      	lsls	r3, r4, #2
 800809c:	f100 0514 	add.w	r5, r0, #20
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080a6:	9301      	str	r3, [sp, #4]
 80080a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080b0:	3301      	adds	r3, #1
 80080b2:	429a      	cmp	r2, r3
 80080b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80080bc:	d32e      	bcc.n	800811c <quorem+0x96>
 80080be:	f04f 0a00 	mov.w	sl, #0
 80080c2:	46c4      	mov	ip, r8
 80080c4:	46ae      	mov	lr, r5
 80080c6:	46d3      	mov	fp, sl
 80080c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80080cc:	b298      	uxth	r0, r3
 80080ce:	fb06 a000 	mla	r0, r6, r0, sl
 80080d2:	0c02      	lsrs	r2, r0, #16
 80080d4:	0c1b      	lsrs	r3, r3, #16
 80080d6:	fb06 2303 	mla	r3, r6, r3, r2
 80080da:	f8de 2000 	ldr.w	r2, [lr]
 80080de:	b280      	uxth	r0, r0
 80080e0:	b292      	uxth	r2, r2
 80080e2:	1a12      	subs	r2, r2, r0
 80080e4:	445a      	add	r2, fp
 80080e6:	f8de 0000 	ldr.w	r0, [lr]
 80080ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80080f4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80080f8:	b292      	uxth	r2, r2
 80080fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80080fe:	45e1      	cmp	r9, ip
 8008100:	f84e 2b04 	str.w	r2, [lr], #4
 8008104:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008108:	d2de      	bcs.n	80080c8 <quorem+0x42>
 800810a:	9b00      	ldr	r3, [sp, #0]
 800810c:	58eb      	ldr	r3, [r5, r3]
 800810e:	b92b      	cbnz	r3, 800811c <quorem+0x96>
 8008110:	9b01      	ldr	r3, [sp, #4]
 8008112:	3b04      	subs	r3, #4
 8008114:	429d      	cmp	r5, r3
 8008116:	461a      	mov	r2, r3
 8008118:	d32f      	bcc.n	800817a <quorem+0xf4>
 800811a:	613c      	str	r4, [r7, #16]
 800811c:	4638      	mov	r0, r7
 800811e:	f001 f8c7 	bl	80092b0 <__mcmp>
 8008122:	2800      	cmp	r0, #0
 8008124:	db25      	blt.n	8008172 <quorem+0xec>
 8008126:	4629      	mov	r1, r5
 8008128:	2000      	movs	r0, #0
 800812a:	f858 2b04 	ldr.w	r2, [r8], #4
 800812e:	f8d1 c000 	ldr.w	ip, [r1]
 8008132:	fa1f fe82 	uxth.w	lr, r2
 8008136:	fa1f f38c 	uxth.w	r3, ip
 800813a:	eba3 030e 	sub.w	r3, r3, lr
 800813e:	4403      	add	r3, r0
 8008140:	0c12      	lsrs	r2, r2, #16
 8008142:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008146:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800814a:	b29b      	uxth	r3, r3
 800814c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008150:	45c1      	cmp	r9, r8
 8008152:	f841 3b04 	str.w	r3, [r1], #4
 8008156:	ea4f 4022 	mov.w	r0, r2, asr #16
 800815a:	d2e6      	bcs.n	800812a <quorem+0xa4>
 800815c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008160:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008164:	b922      	cbnz	r2, 8008170 <quorem+0xea>
 8008166:	3b04      	subs	r3, #4
 8008168:	429d      	cmp	r5, r3
 800816a:	461a      	mov	r2, r3
 800816c:	d30b      	bcc.n	8008186 <quorem+0x100>
 800816e:	613c      	str	r4, [r7, #16]
 8008170:	3601      	adds	r6, #1
 8008172:	4630      	mov	r0, r6
 8008174:	b003      	add	sp, #12
 8008176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817a:	6812      	ldr	r2, [r2, #0]
 800817c:	3b04      	subs	r3, #4
 800817e:	2a00      	cmp	r2, #0
 8008180:	d1cb      	bne.n	800811a <quorem+0x94>
 8008182:	3c01      	subs	r4, #1
 8008184:	e7c6      	b.n	8008114 <quorem+0x8e>
 8008186:	6812      	ldr	r2, [r2, #0]
 8008188:	3b04      	subs	r3, #4
 800818a:	2a00      	cmp	r2, #0
 800818c:	d1ef      	bne.n	800816e <quorem+0xe8>
 800818e:	3c01      	subs	r4, #1
 8008190:	e7ea      	b.n	8008168 <quorem+0xe2>
 8008192:	2000      	movs	r0, #0
 8008194:	e7ee      	b.n	8008174 <quorem+0xee>
	...

08008198 <_dtoa_r>:
 8008198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819c:	69c7      	ldr	r7, [r0, #28]
 800819e:	b097      	sub	sp, #92	@ 0x5c
 80081a0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80081a4:	ec55 4b10 	vmov	r4, r5, d0
 80081a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80081aa:	9107      	str	r1, [sp, #28]
 80081ac:	4681      	mov	r9, r0
 80081ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80081b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80081b2:	b97f      	cbnz	r7, 80081d4 <_dtoa_r+0x3c>
 80081b4:	2010      	movs	r0, #16
 80081b6:	f7fe ffb3 	bl	8007120 <malloc>
 80081ba:	4602      	mov	r2, r0
 80081bc:	f8c9 001c 	str.w	r0, [r9, #28]
 80081c0:	b920      	cbnz	r0, 80081cc <_dtoa_r+0x34>
 80081c2:	4ba9      	ldr	r3, [pc, #676]	@ (8008468 <_dtoa_r+0x2d0>)
 80081c4:	21ef      	movs	r1, #239	@ 0xef
 80081c6:	48a9      	ldr	r0, [pc, #676]	@ (800846c <_dtoa_r+0x2d4>)
 80081c8:	f001 fbec 	bl	80099a4 <__assert_func>
 80081cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80081d0:	6007      	str	r7, [r0, #0]
 80081d2:	60c7      	str	r7, [r0, #12]
 80081d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80081d8:	6819      	ldr	r1, [r3, #0]
 80081da:	b159      	cbz	r1, 80081f4 <_dtoa_r+0x5c>
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	604a      	str	r2, [r1, #4]
 80081e0:	2301      	movs	r3, #1
 80081e2:	4093      	lsls	r3, r2
 80081e4:	608b      	str	r3, [r1, #8]
 80081e6:	4648      	mov	r0, r9
 80081e8:	f000 fe30 	bl	8008e4c <_Bfree>
 80081ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80081f0:	2200      	movs	r2, #0
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	1e2b      	subs	r3, r5, #0
 80081f6:	bfb9      	ittee	lt
 80081f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80081fc:	9305      	strlt	r3, [sp, #20]
 80081fe:	2300      	movge	r3, #0
 8008200:	6033      	strge	r3, [r6, #0]
 8008202:	9f05      	ldr	r7, [sp, #20]
 8008204:	4b9a      	ldr	r3, [pc, #616]	@ (8008470 <_dtoa_r+0x2d8>)
 8008206:	bfbc      	itt	lt
 8008208:	2201      	movlt	r2, #1
 800820a:	6032      	strlt	r2, [r6, #0]
 800820c:	43bb      	bics	r3, r7
 800820e:	d112      	bne.n	8008236 <_dtoa_r+0x9e>
 8008210:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008212:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800821c:	4323      	orrs	r3, r4
 800821e:	f000 855a 	beq.w	8008cd6 <_dtoa_r+0xb3e>
 8008222:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008224:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008484 <_dtoa_r+0x2ec>
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 855c 	beq.w	8008ce6 <_dtoa_r+0xb4e>
 800822e:	f10a 0303 	add.w	r3, sl, #3
 8008232:	f000 bd56 	b.w	8008ce2 <_dtoa_r+0xb4a>
 8008236:	ed9d 7b04 	vldr	d7, [sp, #16]
 800823a:	2200      	movs	r2, #0
 800823c:	ec51 0b17 	vmov	r0, r1, d7
 8008240:	2300      	movs	r3, #0
 8008242:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008246:	f7f8 fc4f 	bl	8000ae8 <__aeabi_dcmpeq>
 800824a:	4680      	mov	r8, r0
 800824c:	b158      	cbz	r0, 8008266 <_dtoa_r+0xce>
 800824e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008250:	2301      	movs	r3, #1
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008256:	b113      	cbz	r3, 800825e <_dtoa_r+0xc6>
 8008258:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800825a:	4b86      	ldr	r3, [pc, #536]	@ (8008474 <_dtoa_r+0x2dc>)
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008488 <_dtoa_r+0x2f0>
 8008262:	f000 bd40 	b.w	8008ce6 <_dtoa_r+0xb4e>
 8008266:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800826a:	aa14      	add	r2, sp, #80	@ 0x50
 800826c:	a915      	add	r1, sp, #84	@ 0x54
 800826e:	4648      	mov	r0, r9
 8008270:	f001 f8ce 	bl	8009410 <__d2b>
 8008274:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008278:	9002      	str	r0, [sp, #8]
 800827a:	2e00      	cmp	r6, #0
 800827c:	d078      	beq.n	8008370 <_dtoa_r+0x1d8>
 800827e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008280:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008288:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800828c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008290:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008294:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008298:	4619      	mov	r1, r3
 800829a:	2200      	movs	r2, #0
 800829c:	4b76      	ldr	r3, [pc, #472]	@ (8008478 <_dtoa_r+0x2e0>)
 800829e:	f7f8 f803 	bl	80002a8 <__aeabi_dsub>
 80082a2:	a36b      	add	r3, pc, #428	@ (adr r3, 8008450 <_dtoa_r+0x2b8>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f7f8 f9b6 	bl	8000618 <__aeabi_dmul>
 80082ac:	a36a      	add	r3, pc, #424	@ (adr r3, 8008458 <_dtoa_r+0x2c0>)
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	f7f7 fffb 	bl	80002ac <__adddf3>
 80082b6:	4604      	mov	r4, r0
 80082b8:	4630      	mov	r0, r6
 80082ba:	460d      	mov	r5, r1
 80082bc:	f7f8 f942 	bl	8000544 <__aeabi_i2d>
 80082c0:	a367      	add	r3, pc, #412	@ (adr r3, 8008460 <_dtoa_r+0x2c8>)
 80082c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c6:	f7f8 f9a7 	bl	8000618 <__aeabi_dmul>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4620      	mov	r0, r4
 80082d0:	4629      	mov	r1, r5
 80082d2:	f7f7 ffeb 	bl	80002ac <__adddf3>
 80082d6:	4604      	mov	r4, r0
 80082d8:	460d      	mov	r5, r1
 80082da:	f7f8 fc4d 	bl	8000b78 <__aeabi_d2iz>
 80082de:	2200      	movs	r2, #0
 80082e0:	4607      	mov	r7, r0
 80082e2:	2300      	movs	r3, #0
 80082e4:	4620      	mov	r0, r4
 80082e6:	4629      	mov	r1, r5
 80082e8:	f7f8 fc08 	bl	8000afc <__aeabi_dcmplt>
 80082ec:	b140      	cbz	r0, 8008300 <_dtoa_r+0x168>
 80082ee:	4638      	mov	r0, r7
 80082f0:	f7f8 f928 	bl	8000544 <__aeabi_i2d>
 80082f4:	4622      	mov	r2, r4
 80082f6:	462b      	mov	r3, r5
 80082f8:	f7f8 fbf6 	bl	8000ae8 <__aeabi_dcmpeq>
 80082fc:	b900      	cbnz	r0, 8008300 <_dtoa_r+0x168>
 80082fe:	3f01      	subs	r7, #1
 8008300:	2f16      	cmp	r7, #22
 8008302:	d852      	bhi.n	80083aa <_dtoa_r+0x212>
 8008304:	4b5d      	ldr	r3, [pc, #372]	@ (800847c <_dtoa_r+0x2e4>)
 8008306:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008312:	f7f8 fbf3 	bl	8000afc <__aeabi_dcmplt>
 8008316:	2800      	cmp	r0, #0
 8008318:	d049      	beq.n	80083ae <_dtoa_r+0x216>
 800831a:	3f01      	subs	r7, #1
 800831c:	2300      	movs	r3, #0
 800831e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008320:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008322:	1b9b      	subs	r3, r3, r6
 8008324:	1e5a      	subs	r2, r3, #1
 8008326:	bf45      	ittet	mi
 8008328:	f1c3 0301 	rsbmi	r3, r3, #1
 800832c:	9300      	strmi	r3, [sp, #0]
 800832e:	2300      	movpl	r3, #0
 8008330:	2300      	movmi	r3, #0
 8008332:	9206      	str	r2, [sp, #24]
 8008334:	bf54      	ite	pl
 8008336:	9300      	strpl	r3, [sp, #0]
 8008338:	9306      	strmi	r3, [sp, #24]
 800833a:	2f00      	cmp	r7, #0
 800833c:	db39      	blt.n	80083b2 <_dtoa_r+0x21a>
 800833e:	9b06      	ldr	r3, [sp, #24]
 8008340:	970d      	str	r7, [sp, #52]	@ 0x34
 8008342:	443b      	add	r3, r7
 8008344:	9306      	str	r3, [sp, #24]
 8008346:	2300      	movs	r3, #0
 8008348:	9308      	str	r3, [sp, #32]
 800834a:	9b07      	ldr	r3, [sp, #28]
 800834c:	2b09      	cmp	r3, #9
 800834e:	d863      	bhi.n	8008418 <_dtoa_r+0x280>
 8008350:	2b05      	cmp	r3, #5
 8008352:	bfc4      	itt	gt
 8008354:	3b04      	subgt	r3, #4
 8008356:	9307      	strgt	r3, [sp, #28]
 8008358:	9b07      	ldr	r3, [sp, #28]
 800835a:	f1a3 0302 	sub.w	r3, r3, #2
 800835e:	bfcc      	ite	gt
 8008360:	2400      	movgt	r4, #0
 8008362:	2401      	movle	r4, #1
 8008364:	2b03      	cmp	r3, #3
 8008366:	d863      	bhi.n	8008430 <_dtoa_r+0x298>
 8008368:	e8df f003 	tbb	[pc, r3]
 800836c:	2b375452 	.word	0x2b375452
 8008370:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008374:	441e      	add	r6, r3
 8008376:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800837a:	2b20      	cmp	r3, #32
 800837c:	bfc1      	itttt	gt
 800837e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008382:	409f      	lslgt	r7, r3
 8008384:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008388:	fa24 f303 	lsrgt.w	r3, r4, r3
 800838c:	bfd6      	itet	le
 800838e:	f1c3 0320 	rsble	r3, r3, #32
 8008392:	ea47 0003 	orrgt.w	r0, r7, r3
 8008396:	fa04 f003 	lslle.w	r0, r4, r3
 800839a:	f7f8 f8c3 	bl	8000524 <__aeabi_ui2d>
 800839e:	2201      	movs	r2, #1
 80083a0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80083a4:	3e01      	subs	r6, #1
 80083a6:	9212      	str	r2, [sp, #72]	@ 0x48
 80083a8:	e776      	b.n	8008298 <_dtoa_r+0x100>
 80083aa:	2301      	movs	r3, #1
 80083ac:	e7b7      	b.n	800831e <_dtoa_r+0x186>
 80083ae:	9010      	str	r0, [sp, #64]	@ 0x40
 80083b0:	e7b6      	b.n	8008320 <_dtoa_r+0x188>
 80083b2:	9b00      	ldr	r3, [sp, #0]
 80083b4:	1bdb      	subs	r3, r3, r7
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	427b      	negs	r3, r7
 80083ba:	9308      	str	r3, [sp, #32]
 80083bc:	2300      	movs	r3, #0
 80083be:	930d      	str	r3, [sp, #52]	@ 0x34
 80083c0:	e7c3      	b.n	800834a <_dtoa_r+0x1b2>
 80083c2:	2301      	movs	r3, #1
 80083c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80083c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083c8:	eb07 0b03 	add.w	fp, r7, r3
 80083cc:	f10b 0301 	add.w	r3, fp, #1
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	9303      	str	r3, [sp, #12]
 80083d4:	bfb8      	it	lt
 80083d6:	2301      	movlt	r3, #1
 80083d8:	e006      	b.n	80083e8 <_dtoa_r+0x250>
 80083da:	2301      	movs	r3, #1
 80083dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80083de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	dd28      	ble.n	8008436 <_dtoa_r+0x29e>
 80083e4:	469b      	mov	fp, r3
 80083e6:	9303      	str	r3, [sp, #12]
 80083e8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80083ec:	2100      	movs	r1, #0
 80083ee:	2204      	movs	r2, #4
 80083f0:	f102 0514 	add.w	r5, r2, #20
 80083f4:	429d      	cmp	r5, r3
 80083f6:	d926      	bls.n	8008446 <_dtoa_r+0x2ae>
 80083f8:	6041      	str	r1, [r0, #4]
 80083fa:	4648      	mov	r0, r9
 80083fc:	f000 fce6 	bl	8008dcc <_Balloc>
 8008400:	4682      	mov	sl, r0
 8008402:	2800      	cmp	r0, #0
 8008404:	d142      	bne.n	800848c <_dtoa_r+0x2f4>
 8008406:	4b1e      	ldr	r3, [pc, #120]	@ (8008480 <_dtoa_r+0x2e8>)
 8008408:	4602      	mov	r2, r0
 800840a:	f240 11af 	movw	r1, #431	@ 0x1af
 800840e:	e6da      	b.n	80081c6 <_dtoa_r+0x2e>
 8008410:	2300      	movs	r3, #0
 8008412:	e7e3      	b.n	80083dc <_dtoa_r+0x244>
 8008414:	2300      	movs	r3, #0
 8008416:	e7d5      	b.n	80083c4 <_dtoa_r+0x22c>
 8008418:	2401      	movs	r4, #1
 800841a:	2300      	movs	r3, #0
 800841c:	9307      	str	r3, [sp, #28]
 800841e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008420:	f04f 3bff 	mov.w	fp, #4294967295
 8008424:	2200      	movs	r2, #0
 8008426:	f8cd b00c 	str.w	fp, [sp, #12]
 800842a:	2312      	movs	r3, #18
 800842c:	920c      	str	r2, [sp, #48]	@ 0x30
 800842e:	e7db      	b.n	80083e8 <_dtoa_r+0x250>
 8008430:	2301      	movs	r3, #1
 8008432:	9309      	str	r3, [sp, #36]	@ 0x24
 8008434:	e7f4      	b.n	8008420 <_dtoa_r+0x288>
 8008436:	f04f 0b01 	mov.w	fp, #1
 800843a:	f8cd b00c 	str.w	fp, [sp, #12]
 800843e:	465b      	mov	r3, fp
 8008440:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008444:	e7d0      	b.n	80083e8 <_dtoa_r+0x250>
 8008446:	3101      	adds	r1, #1
 8008448:	0052      	lsls	r2, r2, #1
 800844a:	e7d1      	b.n	80083f0 <_dtoa_r+0x258>
 800844c:	f3af 8000 	nop.w
 8008450:	636f4361 	.word	0x636f4361
 8008454:	3fd287a7 	.word	0x3fd287a7
 8008458:	8b60c8b3 	.word	0x8b60c8b3
 800845c:	3fc68a28 	.word	0x3fc68a28
 8008460:	509f79fb 	.word	0x509f79fb
 8008464:	3fd34413 	.word	0x3fd34413
 8008468:	08010ed9 	.word	0x08010ed9
 800846c:	08010ef0 	.word	0x08010ef0
 8008470:	7ff00000 	.word	0x7ff00000
 8008474:	08010ea9 	.word	0x08010ea9
 8008478:	3ff80000 	.word	0x3ff80000
 800847c:	08011040 	.word	0x08011040
 8008480:	08010f48 	.word	0x08010f48
 8008484:	08010ed5 	.word	0x08010ed5
 8008488:	08010ea8 	.word	0x08010ea8
 800848c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008490:	6018      	str	r0, [r3, #0]
 8008492:	9b03      	ldr	r3, [sp, #12]
 8008494:	2b0e      	cmp	r3, #14
 8008496:	f200 80a1 	bhi.w	80085dc <_dtoa_r+0x444>
 800849a:	2c00      	cmp	r4, #0
 800849c:	f000 809e 	beq.w	80085dc <_dtoa_r+0x444>
 80084a0:	2f00      	cmp	r7, #0
 80084a2:	dd33      	ble.n	800850c <_dtoa_r+0x374>
 80084a4:	4b9c      	ldr	r3, [pc, #624]	@ (8008718 <_dtoa_r+0x580>)
 80084a6:	f007 020f 	and.w	r2, r7, #15
 80084aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084ae:	ed93 7b00 	vldr	d7, [r3]
 80084b2:	05f8      	lsls	r0, r7, #23
 80084b4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80084b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80084bc:	d516      	bpl.n	80084ec <_dtoa_r+0x354>
 80084be:	4b97      	ldr	r3, [pc, #604]	@ (800871c <_dtoa_r+0x584>)
 80084c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80084c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084c8:	f7f8 f9d0 	bl	800086c <__aeabi_ddiv>
 80084cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084d0:	f004 040f 	and.w	r4, r4, #15
 80084d4:	2603      	movs	r6, #3
 80084d6:	4d91      	ldr	r5, [pc, #580]	@ (800871c <_dtoa_r+0x584>)
 80084d8:	b954      	cbnz	r4, 80084f0 <_dtoa_r+0x358>
 80084da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80084de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084e2:	f7f8 f9c3 	bl	800086c <__aeabi_ddiv>
 80084e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084ea:	e028      	b.n	800853e <_dtoa_r+0x3a6>
 80084ec:	2602      	movs	r6, #2
 80084ee:	e7f2      	b.n	80084d6 <_dtoa_r+0x33e>
 80084f0:	07e1      	lsls	r1, r4, #31
 80084f2:	d508      	bpl.n	8008506 <_dtoa_r+0x36e>
 80084f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80084f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084fc:	f7f8 f88c 	bl	8000618 <__aeabi_dmul>
 8008500:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008504:	3601      	adds	r6, #1
 8008506:	1064      	asrs	r4, r4, #1
 8008508:	3508      	adds	r5, #8
 800850a:	e7e5      	b.n	80084d8 <_dtoa_r+0x340>
 800850c:	f000 80af 	beq.w	800866e <_dtoa_r+0x4d6>
 8008510:	427c      	negs	r4, r7
 8008512:	4b81      	ldr	r3, [pc, #516]	@ (8008718 <_dtoa_r+0x580>)
 8008514:	4d81      	ldr	r5, [pc, #516]	@ (800871c <_dtoa_r+0x584>)
 8008516:	f004 020f 	and.w	r2, r4, #15
 800851a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800851e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008522:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008526:	f7f8 f877 	bl	8000618 <__aeabi_dmul>
 800852a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800852e:	1124      	asrs	r4, r4, #4
 8008530:	2300      	movs	r3, #0
 8008532:	2602      	movs	r6, #2
 8008534:	2c00      	cmp	r4, #0
 8008536:	f040 808f 	bne.w	8008658 <_dtoa_r+0x4c0>
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1d3      	bne.n	80084e6 <_dtoa_r+0x34e>
 800853e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008540:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	f000 8094 	beq.w	8008672 <_dtoa_r+0x4da>
 800854a:	4b75      	ldr	r3, [pc, #468]	@ (8008720 <_dtoa_r+0x588>)
 800854c:	2200      	movs	r2, #0
 800854e:	4620      	mov	r0, r4
 8008550:	4629      	mov	r1, r5
 8008552:	f7f8 fad3 	bl	8000afc <__aeabi_dcmplt>
 8008556:	2800      	cmp	r0, #0
 8008558:	f000 808b 	beq.w	8008672 <_dtoa_r+0x4da>
 800855c:	9b03      	ldr	r3, [sp, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 8087 	beq.w	8008672 <_dtoa_r+0x4da>
 8008564:	f1bb 0f00 	cmp.w	fp, #0
 8008568:	dd34      	ble.n	80085d4 <_dtoa_r+0x43c>
 800856a:	4620      	mov	r0, r4
 800856c:	4b6d      	ldr	r3, [pc, #436]	@ (8008724 <_dtoa_r+0x58c>)
 800856e:	2200      	movs	r2, #0
 8008570:	4629      	mov	r1, r5
 8008572:	f7f8 f851 	bl	8000618 <__aeabi_dmul>
 8008576:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800857a:	f107 38ff 	add.w	r8, r7, #4294967295
 800857e:	3601      	adds	r6, #1
 8008580:	465c      	mov	r4, fp
 8008582:	4630      	mov	r0, r6
 8008584:	f7f7 ffde 	bl	8000544 <__aeabi_i2d>
 8008588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800858c:	f7f8 f844 	bl	8000618 <__aeabi_dmul>
 8008590:	4b65      	ldr	r3, [pc, #404]	@ (8008728 <_dtoa_r+0x590>)
 8008592:	2200      	movs	r2, #0
 8008594:	f7f7 fe8a 	bl	80002ac <__adddf3>
 8008598:	4605      	mov	r5, r0
 800859a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800859e:	2c00      	cmp	r4, #0
 80085a0:	d16a      	bne.n	8008678 <_dtoa_r+0x4e0>
 80085a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085a6:	4b61      	ldr	r3, [pc, #388]	@ (800872c <_dtoa_r+0x594>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	f7f7 fe7d 	bl	80002a8 <__aeabi_dsub>
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085b6:	462a      	mov	r2, r5
 80085b8:	4633      	mov	r3, r6
 80085ba:	f7f8 fabd 	bl	8000b38 <__aeabi_dcmpgt>
 80085be:	2800      	cmp	r0, #0
 80085c0:	f040 8298 	bne.w	8008af4 <_dtoa_r+0x95c>
 80085c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085c8:	462a      	mov	r2, r5
 80085ca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80085ce:	f7f8 fa95 	bl	8000afc <__aeabi_dcmplt>
 80085d2:	bb38      	cbnz	r0, 8008624 <_dtoa_r+0x48c>
 80085d4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80085d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80085dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f2c0 8157 	blt.w	8008892 <_dtoa_r+0x6fa>
 80085e4:	2f0e      	cmp	r7, #14
 80085e6:	f300 8154 	bgt.w	8008892 <_dtoa_r+0x6fa>
 80085ea:	4b4b      	ldr	r3, [pc, #300]	@ (8008718 <_dtoa_r+0x580>)
 80085ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085f0:	ed93 7b00 	vldr	d7, [r3]
 80085f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	ed8d 7b00 	vstr	d7, [sp]
 80085fc:	f280 80e5 	bge.w	80087ca <_dtoa_r+0x632>
 8008600:	9b03      	ldr	r3, [sp, #12]
 8008602:	2b00      	cmp	r3, #0
 8008604:	f300 80e1 	bgt.w	80087ca <_dtoa_r+0x632>
 8008608:	d10c      	bne.n	8008624 <_dtoa_r+0x48c>
 800860a:	4b48      	ldr	r3, [pc, #288]	@ (800872c <_dtoa_r+0x594>)
 800860c:	2200      	movs	r2, #0
 800860e:	ec51 0b17 	vmov	r0, r1, d7
 8008612:	f7f8 f801 	bl	8000618 <__aeabi_dmul>
 8008616:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800861a:	f7f8 fa83 	bl	8000b24 <__aeabi_dcmpge>
 800861e:	2800      	cmp	r0, #0
 8008620:	f000 8266 	beq.w	8008af0 <_dtoa_r+0x958>
 8008624:	2400      	movs	r4, #0
 8008626:	4625      	mov	r5, r4
 8008628:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800862a:	4656      	mov	r6, sl
 800862c:	ea6f 0803 	mvn.w	r8, r3
 8008630:	2700      	movs	r7, #0
 8008632:	4621      	mov	r1, r4
 8008634:	4648      	mov	r0, r9
 8008636:	f000 fc09 	bl	8008e4c <_Bfree>
 800863a:	2d00      	cmp	r5, #0
 800863c:	f000 80bd 	beq.w	80087ba <_dtoa_r+0x622>
 8008640:	b12f      	cbz	r7, 800864e <_dtoa_r+0x4b6>
 8008642:	42af      	cmp	r7, r5
 8008644:	d003      	beq.n	800864e <_dtoa_r+0x4b6>
 8008646:	4639      	mov	r1, r7
 8008648:	4648      	mov	r0, r9
 800864a:	f000 fbff 	bl	8008e4c <_Bfree>
 800864e:	4629      	mov	r1, r5
 8008650:	4648      	mov	r0, r9
 8008652:	f000 fbfb 	bl	8008e4c <_Bfree>
 8008656:	e0b0      	b.n	80087ba <_dtoa_r+0x622>
 8008658:	07e2      	lsls	r2, r4, #31
 800865a:	d505      	bpl.n	8008668 <_dtoa_r+0x4d0>
 800865c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008660:	f7f7 ffda 	bl	8000618 <__aeabi_dmul>
 8008664:	3601      	adds	r6, #1
 8008666:	2301      	movs	r3, #1
 8008668:	1064      	asrs	r4, r4, #1
 800866a:	3508      	adds	r5, #8
 800866c:	e762      	b.n	8008534 <_dtoa_r+0x39c>
 800866e:	2602      	movs	r6, #2
 8008670:	e765      	b.n	800853e <_dtoa_r+0x3a6>
 8008672:	9c03      	ldr	r4, [sp, #12]
 8008674:	46b8      	mov	r8, r7
 8008676:	e784      	b.n	8008582 <_dtoa_r+0x3ea>
 8008678:	4b27      	ldr	r3, [pc, #156]	@ (8008718 <_dtoa_r+0x580>)
 800867a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800867c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008680:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008684:	4454      	add	r4, sl
 8008686:	2900      	cmp	r1, #0
 8008688:	d054      	beq.n	8008734 <_dtoa_r+0x59c>
 800868a:	4929      	ldr	r1, [pc, #164]	@ (8008730 <_dtoa_r+0x598>)
 800868c:	2000      	movs	r0, #0
 800868e:	f7f8 f8ed 	bl	800086c <__aeabi_ddiv>
 8008692:	4633      	mov	r3, r6
 8008694:	462a      	mov	r2, r5
 8008696:	f7f7 fe07 	bl	80002a8 <__aeabi_dsub>
 800869a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800869e:	4656      	mov	r6, sl
 80086a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086a4:	f7f8 fa68 	bl	8000b78 <__aeabi_d2iz>
 80086a8:	4605      	mov	r5, r0
 80086aa:	f7f7 ff4b 	bl	8000544 <__aeabi_i2d>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086b6:	f7f7 fdf7 	bl	80002a8 <__aeabi_dsub>
 80086ba:	3530      	adds	r5, #48	@ 0x30
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086c4:	f806 5b01 	strb.w	r5, [r6], #1
 80086c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80086cc:	f7f8 fa16 	bl	8000afc <__aeabi_dcmplt>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d172      	bne.n	80087ba <_dtoa_r+0x622>
 80086d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086d8:	4911      	ldr	r1, [pc, #68]	@ (8008720 <_dtoa_r+0x588>)
 80086da:	2000      	movs	r0, #0
 80086dc:	f7f7 fde4 	bl	80002a8 <__aeabi_dsub>
 80086e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80086e4:	f7f8 fa0a 	bl	8000afc <__aeabi_dcmplt>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	f040 80b4 	bne.w	8008856 <_dtoa_r+0x6be>
 80086ee:	42a6      	cmp	r6, r4
 80086f0:	f43f af70 	beq.w	80085d4 <_dtoa_r+0x43c>
 80086f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80086f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008724 <_dtoa_r+0x58c>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	f7f7 ff8c 	bl	8000618 <__aeabi_dmul>
 8008700:	4b08      	ldr	r3, [pc, #32]	@ (8008724 <_dtoa_r+0x58c>)
 8008702:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008706:	2200      	movs	r2, #0
 8008708:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800870c:	f7f7 ff84 	bl	8000618 <__aeabi_dmul>
 8008710:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008714:	e7c4      	b.n	80086a0 <_dtoa_r+0x508>
 8008716:	bf00      	nop
 8008718:	08011040 	.word	0x08011040
 800871c:	08011018 	.word	0x08011018
 8008720:	3ff00000 	.word	0x3ff00000
 8008724:	40240000 	.word	0x40240000
 8008728:	401c0000 	.word	0x401c0000
 800872c:	40140000 	.word	0x40140000
 8008730:	3fe00000 	.word	0x3fe00000
 8008734:	4631      	mov	r1, r6
 8008736:	4628      	mov	r0, r5
 8008738:	f7f7 ff6e 	bl	8000618 <__aeabi_dmul>
 800873c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008740:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008742:	4656      	mov	r6, sl
 8008744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008748:	f7f8 fa16 	bl	8000b78 <__aeabi_d2iz>
 800874c:	4605      	mov	r5, r0
 800874e:	f7f7 fef9 	bl	8000544 <__aeabi_i2d>
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800875a:	f7f7 fda5 	bl	80002a8 <__aeabi_dsub>
 800875e:	3530      	adds	r5, #48	@ 0x30
 8008760:	f806 5b01 	strb.w	r5, [r6], #1
 8008764:	4602      	mov	r2, r0
 8008766:	460b      	mov	r3, r1
 8008768:	42a6      	cmp	r6, r4
 800876a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800876e:	f04f 0200 	mov.w	r2, #0
 8008772:	d124      	bne.n	80087be <_dtoa_r+0x626>
 8008774:	4baf      	ldr	r3, [pc, #700]	@ (8008a34 <_dtoa_r+0x89c>)
 8008776:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800877a:	f7f7 fd97 	bl	80002ac <__adddf3>
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008786:	f7f8 f9d7 	bl	8000b38 <__aeabi_dcmpgt>
 800878a:	2800      	cmp	r0, #0
 800878c:	d163      	bne.n	8008856 <_dtoa_r+0x6be>
 800878e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008792:	49a8      	ldr	r1, [pc, #672]	@ (8008a34 <_dtoa_r+0x89c>)
 8008794:	2000      	movs	r0, #0
 8008796:	f7f7 fd87 	bl	80002a8 <__aeabi_dsub>
 800879a:	4602      	mov	r2, r0
 800879c:	460b      	mov	r3, r1
 800879e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087a2:	f7f8 f9ab 	bl	8000afc <__aeabi_dcmplt>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f43f af14 	beq.w	80085d4 <_dtoa_r+0x43c>
 80087ac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80087ae:	1e73      	subs	r3, r6, #1
 80087b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80087b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80087b6:	2b30      	cmp	r3, #48	@ 0x30
 80087b8:	d0f8      	beq.n	80087ac <_dtoa_r+0x614>
 80087ba:	4647      	mov	r7, r8
 80087bc:	e03b      	b.n	8008836 <_dtoa_r+0x69e>
 80087be:	4b9e      	ldr	r3, [pc, #632]	@ (8008a38 <_dtoa_r+0x8a0>)
 80087c0:	f7f7 ff2a 	bl	8000618 <__aeabi_dmul>
 80087c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087c8:	e7bc      	b.n	8008744 <_dtoa_r+0x5ac>
 80087ca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80087ce:	4656      	mov	r6, sl
 80087d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087d4:	4620      	mov	r0, r4
 80087d6:	4629      	mov	r1, r5
 80087d8:	f7f8 f848 	bl	800086c <__aeabi_ddiv>
 80087dc:	f7f8 f9cc 	bl	8000b78 <__aeabi_d2iz>
 80087e0:	4680      	mov	r8, r0
 80087e2:	f7f7 feaf 	bl	8000544 <__aeabi_i2d>
 80087e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087ea:	f7f7 ff15 	bl	8000618 <__aeabi_dmul>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	4620      	mov	r0, r4
 80087f4:	4629      	mov	r1, r5
 80087f6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80087fa:	f7f7 fd55 	bl	80002a8 <__aeabi_dsub>
 80087fe:	f806 4b01 	strb.w	r4, [r6], #1
 8008802:	9d03      	ldr	r5, [sp, #12]
 8008804:	eba6 040a 	sub.w	r4, r6, sl
 8008808:	42a5      	cmp	r5, r4
 800880a:	4602      	mov	r2, r0
 800880c:	460b      	mov	r3, r1
 800880e:	d133      	bne.n	8008878 <_dtoa_r+0x6e0>
 8008810:	f7f7 fd4c 	bl	80002ac <__adddf3>
 8008814:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008818:	4604      	mov	r4, r0
 800881a:	460d      	mov	r5, r1
 800881c:	f7f8 f98c 	bl	8000b38 <__aeabi_dcmpgt>
 8008820:	b9c0      	cbnz	r0, 8008854 <_dtoa_r+0x6bc>
 8008822:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008826:	4620      	mov	r0, r4
 8008828:	4629      	mov	r1, r5
 800882a:	f7f8 f95d 	bl	8000ae8 <__aeabi_dcmpeq>
 800882e:	b110      	cbz	r0, 8008836 <_dtoa_r+0x69e>
 8008830:	f018 0f01 	tst.w	r8, #1
 8008834:	d10e      	bne.n	8008854 <_dtoa_r+0x6bc>
 8008836:	9902      	ldr	r1, [sp, #8]
 8008838:	4648      	mov	r0, r9
 800883a:	f000 fb07 	bl	8008e4c <_Bfree>
 800883e:	2300      	movs	r3, #0
 8008840:	7033      	strb	r3, [r6, #0]
 8008842:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008844:	3701      	adds	r7, #1
 8008846:	601f      	str	r7, [r3, #0]
 8008848:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 824b 	beq.w	8008ce6 <_dtoa_r+0xb4e>
 8008850:	601e      	str	r6, [r3, #0]
 8008852:	e248      	b.n	8008ce6 <_dtoa_r+0xb4e>
 8008854:	46b8      	mov	r8, r7
 8008856:	4633      	mov	r3, r6
 8008858:	461e      	mov	r6, r3
 800885a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800885e:	2a39      	cmp	r2, #57	@ 0x39
 8008860:	d106      	bne.n	8008870 <_dtoa_r+0x6d8>
 8008862:	459a      	cmp	sl, r3
 8008864:	d1f8      	bne.n	8008858 <_dtoa_r+0x6c0>
 8008866:	2230      	movs	r2, #48	@ 0x30
 8008868:	f108 0801 	add.w	r8, r8, #1
 800886c:	f88a 2000 	strb.w	r2, [sl]
 8008870:	781a      	ldrb	r2, [r3, #0]
 8008872:	3201      	adds	r2, #1
 8008874:	701a      	strb	r2, [r3, #0]
 8008876:	e7a0      	b.n	80087ba <_dtoa_r+0x622>
 8008878:	4b6f      	ldr	r3, [pc, #444]	@ (8008a38 <_dtoa_r+0x8a0>)
 800887a:	2200      	movs	r2, #0
 800887c:	f7f7 fecc 	bl	8000618 <__aeabi_dmul>
 8008880:	2200      	movs	r2, #0
 8008882:	2300      	movs	r3, #0
 8008884:	4604      	mov	r4, r0
 8008886:	460d      	mov	r5, r1
 8008888:	f7f8 f92e 	bl	8000ae8 <__aeabi_dcmpeq>
 800888c:	2800      	cmp	r0, #0
 800888e:	d09f      	beq.n	80087d0 <_dtoa_r+0x638>
 8008890:	e7d1      	b.n	8008836 <_dtoa_r+0x69e>
 8008892:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008894:	2a00      	cmp	r2, #0
 8008896:	f000 80ea 	beq.w	8008a6e <_dtoa_r+0x8d6>
 800889a:	9a07      	ldr	r2, [sp, #28]
 800889c:	2a01      	cmp	r2, #1
 800889e:	f300 80cd 	bgt.w	8008a3c <_dtoa_r+0x8a4>
 80088a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80088a4:	2a00      	cmp	r2, #0
 80088a6:	f000 80c1 	beq.w	8008a2c <_dtoa_r+0x894>
 80088aa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80088ae:	9c08      	ldr	r4, [sp, #32]
 80088b0:	9e00      	ldr	r6, [sp, #0]
 80088b2:	9a00      	ldr	r2, [sp, #0]
 80088b4:	441a      	add	r2, r3
 80088b6:	9200      	str	r2, [sp, #0]
 80088b8:	9a06      	ldr	r2, [sp, #24]
 80088ba:	2101      	movs	r1, #1
 80088bc:	441a      	add	r2, r3
 80088be:	4648      	mov	r0, r9
 80088c0:	9206      	str	r2, [sp, #24]
 80088c2:	f000 fb77 	bl	8008fb4 <__i2b>
 80088c6:	4605      	mov	r5, r0
 80088c8:	b166      	cbz	r6, 80088e4 <_dtoa_r+0x74c>
 80088ca:	9b06      	ldr	r3, [sp, #24]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	dd09      	ble.n	80088e4 <_dtoa_r+0x74c>
 80088d0:	42b3      	cmp	r3, r6
 80088d2:	9a00      	ldr	r2, [sp, #0]
 80088d4:	bfa8      	it	ge
 80088d6:	4633      	movge	r3, r6
 80088d8:	1ad2      	subs	r2, r2, r3
 80088da:	9200      	str	r2, [sp, #0]
 80088dc:	9a06      	ldr	r2, [sp, #24]
 80088de:	1af6      	subs	r6, r6, r3
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	9306      	str	r3, [sp, #24]
 80088e4:	9b08      	ldr	r3, [sp, #32]
 80088e6:	b30b      	cbz	r3, 800892c <_dtoa_r+0x794>
 80088e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 80c6 	beq.w	8008a7c <_dtoa_r+0x8e4>
 80088f0:	2c00      	cmp	r4, #0
 80088f2:	f000 80c0 	beq.w	8008a76 <_dtoa_r+0x8de>
 80088f6:	4629      	mov	r1, r5
 80088f8:	4622      	mov	r2, r4
 80088fa:	4648      	mov	r0, r9
 80088fc:	f000 fc12 	bl	8009124 <__pow5mult>
 8008900:	9a02      	ldr	r2, [sp, #8]
 8008902:	4601      	mov	r1, r0
 8008904:	4605      	mov	r5, r0
 8008906:	4648      	mov	r0, r9
 8008908:	f000 fb6a 	bl	8008fe0 <__multiply>
 800890c:	9902      	ldr	r1, [sp, #8]
 800890e:	4680      	mov	r8, r0
 8008910:	4648      	mov	r0, r9
 8008912:	f000 fa9b 	bl	8008e4c <_Bfree>
 8008916:	9b08      	ldr	r3, [sp, #32]
 8008918:	1b1b      	subs	r3, r3, r4
 800891a:	9308      	str	r3, [sp, #32]
 800891c:	f000 80b1 	beq.w	8008a82 <_dtoa_r+0x8ea>
 8008920:	9a08      	ldr	r2, [sp, #32]
 8008922:	4641      	mov	r1, r8
 8008924:	4648      	mov	r0, r9
 8008926:	f000 fbfd 	bl	8009124 <__pow5mult>
 800892a:	9002      	str	r0, [sp, #8]
 800892c:	2101      	movs	r1, #1
 800892e:	4648      	mov	r0, r9
 8008930:	f000 fb40 	bl	8008fb4 <__i2b>
 8008934:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008936:	4604      	mov	r4, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 81d8 	beq.w	8008cee <_dtoa_r+0xb56>
 800893e:	461a      	mov	r2, r3
 8008940:	4601      	mov	r1, r0
 8008942:	4648      	mov	r0, r9
 8008944:	f000 fbee 	bl	8009124 <__pow5mult>
 8008948:	9b07      	ldr	r3, [sp, #28]
 800894a:	2b01      	cmp	r3, #1
 800894c:	4604      	mov	r4, r0
 800894e:	f300 809f 	bgt.w	8008a90 <_dtoa_r+0x8f8>
 8008952:	9b04      	ldr	r3, [sp, #16]
 8008954:	2b00      	cmp	r3, #0
 8008956:	f040 8097 	bne.w	8008a88 <_dtoa_r+0x8f0>
 800895a:	9b05      	ldr	r3, [sp, #20]
 800895c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008960:	2b00      	cmp	r3, #0
 8008962:	f040 8093 	bne.w	8008a8c <_dtoa_r+0x8f4>
 8008966:	9b05      	ldr	r3, [sp, #20]
 8008968:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800896c:	0d1b      	lsrs	r3, r3, #20
 800896e:	051b      	lsls	r3, r3, #20
 8008970:	b133      	cbz	r3, 8008980 <_dtoa_r+0x7e8>
 8008972:	9b00      	ldr	r3, [sp, #0]
 8008974:	3301      	adds	r3, #1
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	9b06      	ldr	r3, [sp, #24]
 800897a:	3301      	adds	r3, #1
 800897c:	9306      	str	r3, [sp, #24]
 800897e:	2301      	movs	r3, #1
 8008980:	9308      	str	r3, [sp, #32]
 8008982:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008984:	2b00      	cmp	r3, #0
 8008986:	f000 81b8 	beq.w	8008cfa <_dtoa_r+0xb62>
 800898a:	6923      	ldr	r3, [r4, #16]
 800898c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008990:	6918      	ldr	r0, [r3, #16]
 8008992:	f000 fac3 	bl	8008f1c <__hi0bits>
 8008996:	f1c0 0020 	rsb	r0, r0, #32
 800899a:	9b06      	ldr	r3, [sp, #24]
 800899c:	4418      	add	r0, r3
 800899e:	f010 001f 	ands.w	r0, r0, #31
 80089a2:	f000 8082 	beq.w	8008aaa <_dtoa_r+0x912>
 80089a6:	f1c0 0320 	rsb	r3, r0, #32
 80089aa:	2b04      	cmp	r3, #4
 80089ac:	dd73      	ble.n	8008a96 <_dtoa_r+0x8fe>
 80089ae:	9b00      	ldr	r3, [sp, #0]
 80089b0:	f1c0 001c 	rsb	r0, r0, #28
 80089b4:	4403      	add	r3, r0
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	9b06      	ldr	r3, [sp, #24]
 80089ba:	4403      	add	r3, r0
 80089bc:	4406      	add	r6, r0
 80089be:	9306      	str	r3, [sp, #24]
 80089c0:	9b00      	ldr	r3, [sp, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	dd05      	ble.n	80089d2 <_dtoa_r+0x83a>
 80089c6:	9902      	ldr	r1, [sp, #8]
 80089c8:	461a      	mov	r2, r3
 80089ca:	4648      	mov	r0, r9
 80089cc:	f000 fc04 	bl	80091d8 <__lshift>
 80089d0:	9002      	str	r0, [sp, #8]
 80089d2:	9b06      	ldr	r3, [sp, #24]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	dd05      	ble.n	80089e4 <_dtoa_r+0x84c>
 80089d8:	4621      	mov	r1, r4
 80089da:	461a      	mov	r2, r3
 80089dc:	4648      	mov	r0, r9
 80089de:	f000 fbfb 	bl	80091d8 <__lshift>
 80089e2:	4604      	mov	r4, r0
 80089e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d061      	beq.n	8008aae <_dtoa_r+0x916>
 80089ea:	9802      	ldr	r0, [sp, #8]
 80089ec:	4621      	mov	r1, r4
 80089ee:	f000 fc5f 	bl	80092b0 <__mcmp>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	da5b      	bge.n	8008aae <_dtoa_r+0x916>
 80089f6:	2300      	movs	r3, #0
 80089f8:	9902      	ldr	r1, [sp, #8]
 80089fa:	220a      	movs	r2, #10
 80089fc:	4648      	mov	r0, r9
 80089fe:	f000 fa47 	bl	8008e90 <__multadd>
 8008a02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a04:	9002      	str	r0, [sp, #8]
 8008a06:	f107 38ff 	add.w	r8, r7, #4294967295
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f000 8177 	beq.w	8008cfe <_dtoa_r+0xb66>
 8008a10:	4629      	mov	r1, r5
 8008a12:	2300      	movs	r3, #0
 8008a14:	220a      	movs	r2, #10
 8008a16:	4648      	mov	r0, r9
 8008a18:	f000 fa3a 	bl	8008e90 <__multadd>
 8008a1c:	f1bb 0f00 	cmp.w	fp, #0
 8008a20:	4605      	mov	r5, r0
 8008a22:	dc6f      	bgt.n	8008b04 <_dtoa_r+0x96c>
 8008a24:	9b07      	ldr	r3, [sp, #28]
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	dc49      	bgt.n	8008abe <_dtoa_r+0x926>
 8008a2a:	e06b      	b.n	8008b04 <_dtoa_r+0x96c>
 8008a2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008a2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008a32:	e73c      	b.n	80088ae <_dtoa_r+0x716>
 8008a34:	3fe00000 	.word	0x3fe00000
 8008a38:	40240000 	.word	0x40240000
 8008a3c:	9b03      	ldr	r3, [sp, #12]
 8008a3e:	1e5c      	subs	r4, r3, #1
 8008a40:	9b08      	ldr	r3, [sp, #32]
 8008a42:	42a3      	cmp	r3, r4
 8008a44:	db09      	blt.n	8008a5a <_dtoa_r+0x8c2>
 8008a46:	1b1c      	subs	r4, r3, r4
 8008a48:	9b03      	ldr	r3, [sp, #12]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f6bf af30 	bge.w	80088b0 <_dtoa_r+0x718>
 8008a50:	9b00      	ldr	r3, [sp, #0]
 8008a52:	9a03      	ldr	r2, [sp, #12]
 8008a54:	1a9e      	subs	r6, r3, r2
 8008a56:	2300      	movs	r3, #0
 8008a58:	e72b      	b.n	80088b2 <_dtoa_r+0x71a>
 8008a5a:	9b08      	ldr	r3, [sp, #32]
 8008a5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008a5e:	9408      	str	r4, [sp, #32]
 8008a60:	1ae3      	subs	r3, r4, r3
 8008a62:	441a      	add	r2, r3
 8008a64:	9e00      	ldr	r6, [sp, #0]
 8008a66:	9b03      	ldr	r3, [sp, #12]
 8008a68:	920d      	str	r2, [sp, #52]	@ 0x34
 8008a6a:	2400      	movs	r4, #0
 8008a6c:	e721      	b.n	80088b2 <_dtoa_r+0x71a>
 8008a6e:	9c08      	ldr	r4, [sp, #32]
 8008a70:	9e00      	ldr	r6, [sp, #0]
 8008a72:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008a74:	e728      	b.n	80088c8 <_dtoa_r+0x730>
 8008a76:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008a7a:	e751      	b.n	8008920 <_dtoa_r+0x788>
 8008a7c:	9a08      	ldr	r2, [sp, #32]
 8008a7e:	9902      	ldr	r1, [sp, #8]
 8008a80:	e750      	b.n	8008924 <_dtoa_r+0x78c>
 8008a82:	f8cd 8008 	str.w	r8, [sp, #8]
 8008a86:	e751      	b.n	800892c <_dtoa_r+0x794>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	e779      	b.n	8008980 <_dtoa_r+0x7e8>
 8008a8c:	9b04      	ldr	r3, [sp, #16]
 8008a8e:	e777      	b.n	8008980 <_dtoa_r+0x7e8>
 8008a90:	2300      	movs	r3, #0
 8008a92:	9308      	str	r3, [sp, #32]
 8008a94:	e779      	b.n	800898a <_dtoa_r+0x7f2>
 8008a96:	d093      	beq.n	80089c0 <_dtoa_r+0x828>
 8008a98:	9a00      	ldr	r2, [sp, #0]
 8008a9a:	331c      	adds	r3, #28
 8008a9c:	441a      	add	r2, r3
 8008a9e:	9200      	str	r2, [sp, #0]
 8008aa0:	9a06      	ldr	r2, [sp, #24]
 8008aa2:	441a      	add	r2, r3
 8008aa4:	441e      	add	r6, r3
 8008aa6:	9206      	str	r2, [sp, #24]
 8008aa8:	e78a      	b.n	80089c0 <_dtoa_r+0x828>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	e7f4      	b.n	8008a98 <_dtoa_r+0x900>
 8008aae:	9b03      	ldr	r3, [sp, #12]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	46b8      	mov	r8, r7
 8008ab4:	dc20      	bgt.n	8008af8 <_dtoa_r+0x960>
 8008ab6:	469b      	mov	fp, r3
 8008ab8:	9b07      	ldr	r3, [sp, #28]
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	dd1e      	ble.n	8008afc <_dtoa_r+0x964>
 8008abe:	f1bb 0f00 	cmp.w	fp, #0
 8008ac2:	f47f adb1 	bne.w	8008628 <_dtoa_r+0x490>
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	465b      	mov	r3, fp
 8008aca:	2205      	movs	r2, #5
 8008acc:	4648      	mov	r0, r9
 8008ace:	f000 f9df 	bl	8008e90 <__multadd>
 8008ad2:	4601      	mov	r1, r0
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	9802      	ldr	r0, [sp, #8]
 8008ad8:	f000 fbea 	bl	80092b0 <__mcmp>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	f77f ada3 	ble.w	8008628 <_dtoa_r+0x490>
 8008ae2:	4656      	mov	r6, sl
 8008ae4:	2331      	movs	r3, #49	@ 0x31
 8008ae6:	f806 3b01 	strb.w	r3, [r6], #1
 8008aea:	f108 0801 	add.w	r8, r8, #1
 8008aee:	e59f      	b.n	8008630 <_dtoa_r+0x498>
 8008af0:	9c03      	ldr	r4, [sp, #12]
 8008af2:	46b8      	mov	r8, r7
 8008af4:	4625      	mov	r5, r4
 8008af6:	e7f4      	b.n	8008ae2 <_dtoa_r+0x94a>
 8008af8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 8101 	beq.w	8008d06 <_dtoa_r+0xb6e>
 8008b04:	2e00      	cmp	r6, #0
 8008b06:	dd05      	ble.n	8008b14 <_dtoa_r+0x97c>
 8008b08:	4629      	mov	r1, r5
 8008b0a:	4632      	mov	r2, r6
 8008b0c:	4648      	mov	r0, r9
 8008b0e:	f000 fb63 	bl	80091d8 <__lshift>
 8008b12:	4605      	mov	r5, r0
 8008b14:	9b08      	ldr	r3, [sp, #32]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d05c      	beq.n	8008bd4 <_dtoa_r+0xa3c>
 8008b1a:	6869      	ldr	r1, [r5, #4]
 8008b1c:	4648      	mov	r0, r9
 8008b1e:	f000 f955 	bl	8008dcc <_Balloc>
 8008b22:	4606      	mov	r6, r0
 8008b24:	b928      	cbnz	r0, 8008b32 <_dtoa_r+0x99a>
 8008b26:	4b82      	ldr	r3, [pc, #520]	@ (8008d30 <_dtoa_r+0xb98>)
 8008b28:	4602      	mov	r2, r0
 8008b2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008b2e:	f7ff bb4a 	b.w	80081c6 <_dtoa_r+0x2e>
 8008b32:	692a      	ldr	r2, [r5, #16]
 8008b34:	3202      	adds	r2, #2
 8008b36:	0092      	lsls	r2, r2, #2
 8008b38:	f105 010c 	add.w	r1, r5, #12
 8008b3c:	300c      	adds	r0, #12
 8008b3e:	f7ff fa94 	bl	800806a <memcpy>
 8008b42:	2201      	movs	r2, #1
 8008b44:	4631      	mov	r1, r6
 8008b46:	4648      	mov	r0, r9
 8008b48:	f000 fb46 	bl	80091d8 <__lshift>
 8008b4c:	f10a 0301 	add.w	r3, sl, #1
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	eb0a 030b 	add.w	r3, sl, fp
 8008b56:	9308      	str	r3, [sp, #32]
 8008b58:	9b04      	ldr	r3, [sp, #16]
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	462f      	mov	r7, r5
 8008b60:	9306      	str	r3, [sp, #24]
 8008b62:	4605      	mov	r5, r0
 8008b64:	9b00      	ldr	r3, [sp, #0]
 8008b66:	9802      	ldr	r0, [sp, #8]
 8008b68:	4621      	mov	r1, r4
 8008b6a:	f103 3bff 	add.w	fp, r3, #4294967295
 8008b6e:	f7ff fa8a 	bl	8008086 <quorem>
 8008b72:	4603      	mov	r3, r0
 8008b74:	3330      	adds	r3, #48	@ 0x30
 8008b76:	9003      	str	r0, [sp, #12]
 8008b78:	4639      	mov	r1, r7
 8008b7a:	9802      	ldr	r0, [sp, #8]
 8008b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b7e:	f000 fb97 	bl	80092b0 <__mcmp>
 8008b82:	462a      	mov	r2, r5
 8008b84:	9004      	str	r0, [sp, #16]
 8008b86:	4621      	mov	r1, r4
 8008b88:	4648      	mov	r0, r9
 8008b8a:	f000 fbad 	bl	80092e8 <__mdiff>
 8008b8e:	68c2      	ldr	r2, [r0, #12]
 8008b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b92:	4606      	mov	r6, r0
 8008b94:	bb02      	cbnz	r2, 8008bd8 <_dtoa_r+0xa40>
 8008b96:	4601      	mov	r1, r0
 8008b98:	9802      	ldr	r0, [sp, #8]
 8008b9a:	f000 fb89 	bl	80092b0 <__mcmp>
 8008b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	4648      	mov	r0, r9
 8008ba6:	920c      	str	r2, [sp, #48]	@ 0x30
 8008ba8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008baa:	f000 f94f 	bl	8008e4c <_Bfree>
 8008bae:	9b07      	ldr	r3, [sp, #28]
 8008bb0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008bb2:	9e00      	ldr	r6, [sp, #0]
 8008bb4:	ea42 0103 	orr.w	r1, r2, r3
 8008bb8:	9b06      	ldr	r3, [sp, #24]
 8008bba:	4319      	orrs	r1, r3
 8008bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bbe:	d10d      	bne.n	8008bdc <_dtoa_r+0xa44>
 8008bc0:	2b39      	cmp	r3, #57	@ 0x39
 8008bc2:	d027      	beq.n	8008c14 <_dtoa_r+0xa7c>
 8008bc4:	9a04      	ldr	r2, [sp, #16]
 8008bc6:	2a00      	cmp	r2, #0
 8008bc8:	dd01      	ble.n	8008bce <_dtoa_r+0xa36>
 8008bca:	9b03      	ldr	r3, [sp, #12]
 8008bcc:	3331      	adds	r3, #49	@ 0x31
 8008bce:	f88b 3000 	strb.w	r3, [fp]
 8008bd2:	e52e      	b.n	8008632 <_dtoa_r+0x49a>
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	e7b9      	b.n	8008b4c <_dtoa_r+0x9b4>
 8008bd8:	2201      	movs	r2, #1
 8008bda:	e7e2      	b.n	8008ba2 <_dtoa_r+0xa0a>
 8008bdc:	9904      	ldr	r1, [sp, #16]
 8008bde:	2900      	cmp	r1, #0
 8008be0:	db04      	blt.n	8008bec <_dtoa_r+0xa54>
 8008be2:	9807      	ldr	r0, [sp, #28]
 8008be4:	4301      	orrs	r1, r0
 8008be6:	9806      	ldr	r0, [sp, #24]
 8008be8:	4301      	orrs	r1, r0
 8008bea:	d120      	bne.n	8008c2e <_dtoa_r+0xa96>
 8008bec:	2a00      	cmp	r2, #0
 8008bee:	ddee      	ble.n	8008bce <_dtoa_r+0xa36>
 8008bf0:	9902      	ldr	r1, [sp, #8]
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	4648      	mov	r0, r9
 8008bf8:	f000 faee 	bl	80091d8 <__lshift>
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	9002      	str	r0, [sp, #8]
 8008c00:	f000 fb56 	bl	80092b0 <__mcmp>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	9b00      	ldr	r3, [sp, #0]
 8008c08:	dc02      	bgt.n	8008c10 <_dtoa_r+0xa78>
 8008c0a:	d1e0      	bne.n	8008bce <_dtoa_r+0xa36>
 8008c0c:	07da      	lsls	r2, r3, #31
 8008c0e:	d5de      	bpl.n	8008bce <_dtoa_r+0xa36>
 8008c10:	2b39      	cmp	r3, #57	@ 0x39
 8008c12:	d1da      	bne.n	8008bca <_dtoa_r+0xa32>
 8008c14:	2339      	movs	r3, #57	@ 0x39
 8008c16:	f88b 3000 	strb.w	r3, [fp]
 8008c1a:	4633      	mov	r3, r6
 8008c1c:	461e      	mov	r6, r3
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c24:	2a39      	cmp	r2, #57	@ 0x39
 8008c26:	d04e      	beq.n	8008cc6 <_dtoa_r+0xb2e>
 8008c28:	3201      	adds	r2, #1
 8008c2a:	701a      	strb	r2, [r3, #0]
 8008c2c:	e501      	b.n	8008632 <_dtoa_r+0x49a>
 8008c2e:	2a00      	cmp	r2, #0
 8008c30:	dd03      	ble.n	8008c3a <_dtoa_r+0xaa2>
 8008c32:	2b39      	cmp	r3, #57	@ 0x39
 8008c34:	d0ee      	beq.n	8008c14 <_dtoa_r+0xa7c>
 8008c36:	3301      	adds	r3, #1
 8008c38:	e7c9      	b.n	8008bce <_dtoa_r+0xa36>
 8008c3a:	9a00      	ldr	r2, [sp, #0]
 8008c3c:	9908      	ldr	r1, [sp, #32]
 8008c3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c42:	428a      	cmp	r2, r1
 8008c44:	d028      	beq.n	8008c98 <_dtoa_r+0xb00>
 8008c46:	9902      	ldr	r1, [sp, #8]
 8008c48:	2300      	movs	r3, #0
 8008c4a:	220a      	movs	r2, #10
 8008c4c:	4648      	mov	r0, r9
 8008c4e:	f000 f91f 	bl	8008e90 <__multadd>
 8008c52:	42af      	cmp	r7, r5
 8008c54:	9002      	str	r0, [sp, #8]
 8008c56:	f04f 0300 	mov.w	r3, #0
 8008c5a:	f04f 020a 	mov.w	r2, #10
 8008c5e:	4639      	mov	r1, r7
 8008c60:	4648      	mov	r0, r9
 8008c62:	d107      	bne.n	8008c74 <_dtoa_r+0xadc>
 8008c64:	f000 f914 	bl	8008e90 <__multadd>
 8008c68:	4607      	mov	r7, r0
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	9b00      	ldr	r3, [sp, #0]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	e777      	b.n	8008b64 <_dtoa_r+0x9cc>
 8008c74:	f000 f90c 	bl	8008e90 <__multadd>
 8008c78:	4629      	mov	r1, r5
 8008c7a:	4607      	mov	r7, r0
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	220a      	movs	r2, #10
 8008c80:	4648      	mov	r0, r9
 8008c82:	f000 f905 	bl	8008e90 <__multadd>
 8008c86:	4605      	mov	r5, r0
 8008c88:	e7f0      	b.n	8008c6c <_dtoa_r+0xad4>
 8008c8a:	f1bb 0f00 	cmp.w	fp, #0
 8008c8e:	bfcc      	ite	gt
 8008c90:	465e      	movgt	r6, fp
 8008c92:	2601      	movle	r6, #1
 8008c94:	4456      	add	r6, sl
 8008c96:	2700      	movs	r7, #0
 8008c98:	9902      	ldr	r1, [sp, #8]
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	4648      	mov	r0, r9
 8008ca0:	f000 fa9a 	bl	80091d8 <__lshift>
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	9002      	str	r0, [sp, #8]
 8008ca8:	f000 fb02 	bl	80092b0 <__mcmp>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	dcb4      	bgt.n	8008c1a <_dtoa_r+0xa82>
 8008cb0:	d102      	bne.n	8008cb8 <_dtoa_r+0xb20>
 8008cb2:	9b00      	ldr	r3, [sp, #0]
 8008cb4:	07db      	lsls	r3, r3, #31
 8008cb6:	d4b0      	bmi.n	8008c1a <_dtoa_r+0xa82>
 8008cb8:	4633      	mov	r3, r6
 8008cba:	461e      	mov	r6, r3
 8008cbc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cc0:	2a30      	cmp	r2, #48	@ 0x30
 8008cc2:	d0fa      	beq.n	8008cba <_dtoa_r+0xb22>
 8008cc4:	e4b5      	b.n	8008632 <_dtoa_r+0x49a>
 8008cc6:	459a      	cmp	sl, r3
 8008cc8:	d1a8      	bne.n	8008c1c <_dtoa_r+0xa84>
 8008cca:	2331      	movs	r3, #49	@ 0x31
 8008ccc:	f108 0801 	add.w	r8, r8, #1
 8008cd0:	f88a 3000 	strb.w	r3, [sl]
 8008cd4:	e4ad      	b.n	8008632 <_dtoa_r+0x49a>
 8008cd6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008cd8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008d34 <_dtoa_r+0xb9c>
 8008cdc:	b11b      	cbz	r3, 8008ce6 <_dtoa_r+0xb4e>
 8008cde:	f10a 0308 	add.w	r3, sl, #8
 8008ce2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008ce4:	6013      	str	r3, [r2, #0]
 8008ce6:	4650      	mov	r0, sl
 8008ce8:	b017      	add	sp, #92	@ 0x5c
 8008cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cee:	9b07      	ldr	r3, [sp, #28]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	f77f ae2e 	ble.w	8008952 <_dtoa_r+0x7ba>
 8008cf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cf8:	9308      	str	r3, [sp, #32]
 8008cfa:	2001      	movs	r0, #1
 8008cfc:	e64d      	b.n	800899a <_dtoa_r+0x802>
 8008cfe:	f1bb 0f00 	cmp.w	fp, #0
 8008d02:	f77f aed9 	ble.w	8008ab8 <_dtoa_r+0x920>
 8008d06:	4656      	mov	r6, sl
 8008d08:	9802      	ldr	r0, [sp, #8]
 8008d0a:	4621      	mov	r1, r4
 8008d0c:	f7ff f9bb 	bl	8008086 <quorem>
 8008d10:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008d14:	f806 3b01 	strb.w	r3, [r6], #1
 8008d18:	eba6 020a 	sub.w	r2, r6, sl
 8008d1c:	4593      	cmp	fp, r2
 8008d1e:	ddb4      	ble.n	8008c8a <_dtoa_r+0xaf2>
 8008d20:	9902      	ldr	r1, [sp, #8]
 8008d22:	2300      	movs	r3, #0
 8008d24:	220a      	movs	r2, #10
 8008d26:	4648      	mov	r0, r9
 8008d28:	f000 f8b2 	bl	8008e90 <__multadd>
 8008d2c:	9002      	str	r0, [sp, #8]
 8008d2e:	e7eb      	b.n	8008d08 <_dtoa_r+0xb70>
 8008d30:	08010f48 	.word	0x08010f48
 8008d34:	08010ecc 	.word	0x08010ecc

08008d38 <_free_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	2900      	cmp	r1, #0
 8008d3e:	d041      	beq.n	8008dc4 <_free_r+0x8c>
 8008d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d44:	1f0c      	subs	r4, r1, #4
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	bfb8      	it	lt
 8008d4a:	18e4      	addlt	r4, r4, r3
 8008d4c:	f7fe fa92 	bl	8007274 <__malloc_lock>
 8008d50:	4a1d      	ldr	r2, [pc, #116]	@ (8008dc8 <_free_r+0x90>)
 8008d52:	6813      	ldr	r3, [r2, #0]
 8008d54:	b933      	cbnz	r3, 8008d64 <_free_r+0x2c>
 8008d56:	6063      	str	r3, [r4, #4]
 8008d58:	6014      	str	r4, [r2, #0]
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d60:	f7fe ba8e 	b.w	8007280 <__malloc_unlock>
 8008d64:	42a3      	cmp	r3, r4
 8008d66:	d908      	bls.n	8008d7a <_free_r+0x42>
 8008d68:	6820      	ldr	r0, [r4, #0]
 8008d6a:	1821      	adds	r1, r4, r0
 8008d6c:	428b      	cmp	r3, r1
 8008d6e:	bf01      	itttt	eq
 8008d70:	6819      	ldreq	r1, [r3, #0]
 8008d72:	685b      	ldreq	r3, [r3, #4]
 8008d74:	1809      	addeq	r1, r1, r0
 8008d76:	6021      	streq	r1, [r4, #0]
 8008d78:	e7ed      	b.n	8008d56 <_free_r+0x1e>
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	b10b      	cbz	r3, 8008d84 <_free_r+0x4c>
 8008d80:	42a3      	cmp	r3, r4
 8008d82:	d9fa      	bls.n	8008d7a <_free_r+0x42>
 8008d84:	6811      	ldr	r1, [r2, #0]
 8008d86:	1850      	adds	r0, r2, r1
 8008d88:	42a0      	cmp	r0, r4
 8008d8a:	d10b      	bne.n	8008da4 <_free_r+0x6c>
 8008d8c:	6820      	ldr	r0, [r4, #0]
 8008d8e:	4401      	add	r1, r0
 8008d90:	1850      	adds	r0, r2, r1
 8008d92:	4283      	cmp	r3, r0
 8008d94:	6011      	str	r1, [r2, #0]
 8008d96:	d1e0      	bne.n	8008d5a <_free_r+0x22>
 8008d98:	6818      	ldr	r0, [r3, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	6053      	str	r3, [r2, #4]
 8008d9e:	4408      	add	r0, r1
 8008da0:	6010      	str	r0, [r2, #0]
 8008da2:	e7da      	b.n	8008d5a <_free_r+0x22>
 8008da4:	d902      	bls.n	8008dac <_free_r+0x74>
 8008da6:	230c      	movs	r3, #12
 8008da8:	602b      	str	r3, [r5, #0]
 8008daa:	e7d6      	b.n	8008d5a <_free_r+0x22>
 8008dac:	6820      	ldr	r0, [r4, #0]
 8008dae:	1821      	adds	r1, r4, r0
 8008db0:	428b      	cmp	r3, r1
 8008db2:	bf04      	itt	eq
 8008db4:	6819      	ldreq	r1, [r3, #0]
 8008db6:	685b      	ldreq	r3, [r3, #4]
 8008db8:	6063      	str	r3, [r4, #4]
 8008dba:	bf04      	itt	eq
 8008dbc:	1809      	addeq	r1, r1, r0
 8008dbe:	6021      	streq	r1, [r4, #0]
 8008dc0:	6054      	str	r4, [r2, #4]
 8008dc2:	e7ca      	b.n	8008d5a <_free_r+0x22>
 8008dc4:	bd38      	pop	{r3, r4, r5, pc}
 8008dc6:	bf00      	nop
 8008dc8:	200013e0 	.word	0x200013e0

08008dcc <_Balloc>:
 8008dcc:	b570      	push	{r4, r5, r6, lr}
 8008dce:	69c6      	ldr	r6, [r0, #28]
 8008dd0:	4604      	mov	r4, r0
 8008dd2:	460d      	mov	r5, r1
 8008dd4:	b976      	cbnz	r6, 8008df4 <_Balloc+0x28>
 8008dd6:	2010      	movs	r0, #16
 8008dd8:	f7fe f9a2 	bl	8007120 <malloc>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	61e0      	str	r0, [r4, #28]
 8008de0:	b920      	cbnz	r0, 8008dec <_Balloc+0x20>
 8008de2:	4b18      	ldr	r3, [pc, #96]	@ (8008e44 <_Balloc+0x78>)
 8008de4:	4818      	ldr	r0, [pc, #96]	@ (8008e48 <_Balloc+0x7c>)
 8008de6:	216b      	movs	r1, #107	@ 0x6b
 8008de8:	f000 fddc 	bl	80099a4 <__assert_func>
 8008dec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008df0:	6006      	str	r6, [r0, #0]
 8008df2:	60c6      	str	r6, [r0, #12]
 8008df4:	69e6      	ldr	r6, [r4, #28]
 8008df6:	68f3      	ldr	r3, [r6, #12]
 8008df8:	b183      	cbz	r3, 8008e1c <_Balloc+0x50>
 8008dfa:	69e3      	ldr	r3, [r4, #28]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e02:	b9b8      	cbnz	r0, 8008e34 <_Balloc+0x68>
 8008e04:	2101      	movs	r1, #1
 8008e06:	fa01 f605 	lsl.w	r6, r1, r5
 8008e0a:	1d72      	adds	r2, r6, #5
 8008e0c:	0092      	lsls	r2, r2, #2
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f000 fde6 	bl	80099e0 <_calloc_r>
 8008e14:	b160      	cbz	r0, 8008e30 <_Balloc+0x64>
 8008e16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e1a:	e00e      	b.n	8008e3a <_Balloc+0x6e>
 8008e1c:	2221      	movs	r2, #33	@ 0x21
 8008e1e:	2104      	movs	r1, #4
 8008e20:	4620      	mov	r0, r4
 8008e22:	f000 fddd 	bl	80099e0 <_calloc_r>
 8008e26:	69e3      	ldr	r3, [r4, #28]
 8008e28:	60f0      	str	r0, [r6, #12]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1e4      	bne.n	8008dfa <_Balloc+0x2e>
 8008e30:	2000      	movs	r0, #0
 8008e32:	bd70      	pop	{r4, r5, r6, pc}
 8008e34:	6802      	ldr	r2, [r0, #0]
 8008e36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e40:	e7f7      	b.n	8008e32 <_Balloc+0x66>
 8008e42:	bf00      	nop
 8008e44:	08010ed9 	.word	0x08010ed9
 8008e48:	08010f59 	.word	0x08010f59

08008e4c <_Bfree>:
 8008e4c:	b570      	push	{r4, r5, r6, lr}
 8008e4e:	69c6      	ldr	r6, [r0, #28]
 8008e50:	4605      	mov	r5, r0
 8008e52:	460c      	mov	r4, r1
 8008e54:	b976      	cbnz	r6, 8008e74 <_Bfree+0x28>
 8008e56:	2010      	movs	r0, #16
 8008e58:	f7fe f962 	bl	8007120 <malloc>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	61e8      	str	r0, [r5, #28]
 8008e60:	b920      	cbnz	r0, 8008e6c <_Bfree+0x20>
 8008e62:	4b09      	ldr	r3, [pc, #36]	@ (8008e88 <_Bfree+0x3c>)
 8008e64:	4809      	ldr	r0, [pc, #36]	@ (8008e8c <_Bfree+0x40>)
 8008e66:	218f      	movs	r1, #143	@ 0x8f
 8008e68:	f000 fd9c 	bl	80099a4 <__assert_func>
 8008e6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e70:	6006      	str	r6, [r0, #0]
 8008e72:	60c6      	str	r6, [r0, #12]
 8008e74:	b13c      	cbz	r4, 8008e86 <_Bfree+0x3a>
 8008e76:	69eb      	ldr	r3, [r5, #28]
 8008e78:	6862      	ldr	r2, [r4, #4]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e80:	6021      	str	r1, [r4, #0]
 8008e82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e86:	bd70      	pop	{r4, r5, r6, pc}
 8008e88:	08010ed9 	.word	0x08010ed9
 8008e8c:	08010f59 	.word	0x08010f59

08008e90 <__multadd>:
 8008e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e94:	690d      	ldr	r5, [r1, #16]
 8008e96:	4607      	mov	r7, r0
 8008e98:	460c      	mov	r4, r1
 8008e9a:	461e      	mov	r6, r3
 8008e9c:	f101 0c14 	add.w	ip, r1, #20
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	f8dc 3000 	ldr.w	r3, [ip]
 8008ea6:	b299      	uxth	r1, r3
 8008ea8:	fb02 6101 	mla	r1, r2, r1, r6
 8008eac:	0c1e      	lsrs	r6, r3, #16
 8008eae:	0c0b      	lsrs	r3, r1, #16
 8008eb0:	fb02 3306 	mla	r3, r2, r6, r3
 8008eb4:	b289      	uxth	r1, r1
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ebc:	4285      	cmp	r5, r0
 8008ebe:	f84c 1b04 	str.w	r1, [ip], #4
 8008ec2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ec6:	dcec      	bgt.n	8008ea2 <__multadd+0x12>
 8008ec8:	b30e      	cbz	r6, 8008f0e <__multadd+0x7e>
 8008eca:	68a3      	ldr	r3, [r4, #8]
 8008ecc:	42ab      	cmp	r3, r5
 8008ece:	dc19      	bgt.n	8008f04 <__multadd+0x74>
 8008ed0:	6861      	ldr	r1, [r4, #4]
 8008ed2:	4638      	mov	r0, r7
 8008ed4:	3101      	adds	r1, #1
 8008ed6:	f7ff ff79 	bl	8008dcc <_Balloc>
 8008eda:	4680      	mov	r8, r0
 8008edc:	b928      	cbnz	r0, 8008eea <__multadd+0x5a>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8008f14 <__multadd+0x84>)
 8008ee2:	480d      	ldr	r0, [pc, #52]	@ (8008f18 <__multadd+0x88>)
 8008ee4:	21ba      	movs	r1, #186	@ 0xba
 8008ee6:	f000 fd5d 	bl	80099a4 <__assert_func>
 8008eea:	6922      	ldr	r2, [r4, #16]
 8008eec:	3202      	adds	r2, #2
 8008eee:	f104 010c 	add.w	r1, r4, #12
 8008ef2:	0092      	lsls	r2, r2, #2
 8008ef4:	300c      	adds	r0, #12
 8008ef6:	f7ff f8b8 	bl	800806a <memcpy>
 8008efa:	4621      	mov	r1, r4
 8008efc:	4638      	mov	r0, r7
 8008efe:	f7ff ffa5 	bl	8008e4c <_Bfree>
 8008f02:	4644      	mov	r4, r8
 8008f04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f08:	3501      	adds	r5, #1
 8008f0a:	615e      	str	r6, [r3, #20]
 8008f0c:	6125      	str	r5, [r4, #16]
 8008f0e:	4620      	mov	r0, r4
 8008f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f14:	08010f48 	.word	0x08010f48
 8008f18:	08010f59 	.word	0x08010f59

08008f1c <__hi0bits>:
 8008f1c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008f20:	4603      	mov	r3, r0
 8008f22:	bf36      	itet	cc
 8008f24:	0403      	lslcc	r3, r0, #16
 8008f26:	2000      	movcs	r0, #0
 8008f28:	2010      	movcc	r0, #16
 8008f2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f2e:	bf3c      	itt	cc
 8008f30:	021b      	lslcc	r3, r3, #8
 8008f32:	3008      	addcc	r0, #8
 8008f34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f38:	bf3c      	itt	cc
 8008f3a:	011b      	lslcc	r3, r3, #4
 8008f3c:	3004      	addcc	r0, #4
 8008f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f42:	bf3c      	itt	cc
 8008f44:	009b      	lslcc	r3, r3, #2
 8008f46:	3002      	addcc	r0, #2
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	db05      	blt.n	8008f58 <__hi0bits+0x3c>
 8008f4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008f50:	f100 0001 	add.w	r0, r0, #1
 8008f54:	bf08      	it	eq
 8008f56:	2020      	moveq	r0, #32
 8008f58:	4770      	bx	lr

08008f5a <__lo0bits>:
 8008f5a:	6803      	ldr	r3, [r0, #0]
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	f013 0007 	ands.w	r0, r3, #7
 8008f62:	d00b      	beq.n	8008f7c <__lo0bits+0x22>
 8008f64:	07d9      	lsls	r1, r3, #31
 8008f66:	d421      	bmi.n	8008fac <__lo0bits+0x52>
 8008f68:	0798      	lsls	r0, r3, #30
 8008f6a:	bf49      	itett	mi
 8008f6c:	085b      	lsrmi	r3, r3, #1
 8008f6e:	089b      	lsrpl	r3, r3, #2
 8008f70:	2001      	movmi	r0, #1
 8008f72:	6013      	strmi	r3, [r2, #0]
 8008f74:	bf5c      	itt	pl
 8008f76:	6013      	strpl	r3, [r2, #0]
 8008f78:	2002      	movpl	r0, #2
 8008f7a:	4770      	bx	lr
 8008f7c:	b299      	uxth	r1, r3
 8008f7e:	b909      	cbnz	r1, 8008f84 <__lo0bits+0x2a>
 8008f80:	0c1b      	lsrs	r3, r3, #16
 8008f82:	2010      	movs	r0, #16
 8008f84:	b2d9      	uxtb	r1, r3
 8008f86:	b909      	cbnz	r1, 8008f8c <__lo0bits+0x32>
 8008f88:	3008      	adds	r0, #8
 8008f8a:	0a1b      	lsrs	r3, r3, #8
 8008f8c:	0719      	lsls	r1, r3, #28
 8008f8e:	bf04      	itt	eq
 8008f90:	091b      	lsreq	r3, r3, #4
 8008f92:	3004      	addeq	r0, #4
 8008f94:	0799      	lsls	r1, r3, #30
 8008f96:	bf04      	itt	eq
 8008f98:	089b      	lsreq	r3, r3, #2
 8008f9a:	3002      	addeq	r0, #2
 8008f9c:	07d9      	lsls	r1, r3, #31
 8008f9e:	d403      	bmi.n	8008fa8 <__lo0bits+0x4e>
 8008fa0:	085b      	lsrs	r3, r3, #1
 8008fa2:	f100 0001 	add.w	r0, r0, #1
 8008fa6:	d003      	beq.n	8008fb0 <__lo0bits+0x56>
 8008fa8:	6013      	str	r3, [r2, #0]
 8008faa:	4770      	bx	lr
 8008fac:	2000      	movs	r0, #0
 8008fae:	4770      	bx	lr
 8008fb0:	2020      	movs	r0, #32
 8008fb2:	4770      	bx	lr

08008fb4 <__i2b>:
 8008fb4:	b510      	push	{r4, lr}
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	2101      	movs	r1, #1
 8008fba:	f7ff ff07 	bl	8008dcc <_Balloc>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	b928      	cbnz	r0, 8008fce <__i2b+0x1a>
 8008fc2:	4b05      	ldr	r3, [pc, #20]	@ (8008fd8 <__i2b+0x24>)
 8008fc4:	4805      	ldr	r0, [pc, #20]	@ (8008fdc <__i2b+0x28>)
 8008fc6:	f240 1145 	movw	r1, #325	@ 0x145
 8008fca:	f000 fceb 	bl	80099a4 <__assert_func>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	6144      	str	r4, [r0, #20]
 8008fd2:	6103      	str	r3, [r0, #16]
 8008fd4:	bd10      	pop	{r4, pc}
 8008fd6:	bf00      	nop
 8008fd8:	08010f48 	.word	0x08010f48
 8008fdc:	08010f59 	.word	0x08010f59

08008fe0 <__multiply>:
 8008fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe4:	4617      	mov	r7, r2
 8008fe6:	690a      	ldr	r2, [r1, #16]
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	bfa8      	it	ge
 8008fee:	463b      	movge	r3, r7
 8008ff0:	4689      	mov	r9, r1
 8008ff2:	bfa4      	itt	ge
 8008ff4:	460f      	movge	r7, r1
 8008ff6:	4699      	movge	r9, r3
 8008ff8:	693d      	ldr	r5, [r7, #16]
 8008ffa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	6879      	ldr	r1, [r7, #4]
 8009002:	eb05 060a 	add.w	r6, r5, sl
 8009006:	42b3      	cmp	r3, r6
 8009008:	b085      	sub	sp, #20
 800900a:	bfb8      	it	lt
 800900c:	3101      	addlt	r1, #1
 800900e:	f7ff fedd 	bl	8008dcc <_Balloc>
 8009012:	b930      	cbnz	r0, 8009022 <__multiply+0x42>
 8009014:	4602      	mov	r2, r0
 8009016:	4b41      	ldr	r3, [pc, #260]	@ (800911c <__multiply+0x13c>)
 8009018:	4841      	ldr	r0, [pc, #260]	@ (8009120 <__multiply+0x140>)
 800901a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800901e:	f000 fcc1 	bl	80099a4 <__assert_func>
 8009022:	f100 0414 	add.w	r4, r0, #20
 8009026:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800902a:	4623      	mov	r3, r4
 800902c:	2200      	movs	r2, #0
 800902e:	4573      	cmp	r3, lr
 8009030:	d320      	bcc.n	8009074 <__multiply+0x94>
 8009032:	f107 0814 	add.w	r8, r7, #20
 8009036:	f109 0114 	add.w	r1, r9, #20
 800903a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800903e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009042:	9302      	str	r3, [sp, #8]
 8009044:	1beb      	subs	r3, r5, r7
 8009046:	3b15      	subs	r3, #21
 8009048:	f023 0303 	bic.w	r3, r3, #3
 800904c:	3304      	adds	r3, #4
 800904e:	3715      	adds	r7, #21
 8009050:	42bd      	cmp	r5, r7
 8009052:	bf38      	it	cc
 8009054:	2304      	movcc	r3, #4
 8009056:	9301      	str	r3, [sp, #4]
 8009058:	9b02      	ldr	r3, [sp, #8]
 800905a:	9103      	str	r1, [sp, #12]
 800905c:	428b      	cmp	r3, r1
 800905e:	d80c      	bhi.n	800907a <__multiply+0x9a>
 8009060:	2e00      	cmp	r6, #0
 8009062:	dd03      	ble.n	800906c <__multiply+0x8c>
 8009064:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009068:	2b00      	cmp	r3, #0
 800906a:	d055      	beq.n	8009118 <__multiply+0x138>
 800906c:	6106      	str	r6, [r0, #16]
 800906e:	b005      	add	sp, #20
 8009070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009074:	f843 2b04 	str.w	r2, [r3], #4
 8009078:	e7d9      	b.n	800902e <__multiply+0x4e>
 800907a:	f8b1 a000 	ldrh.w	sl, [r1]
 800907e:	f1ba 0f00 	cmp.w	sl, #0
 8009082:	d01f      	beq.n	80090c4 <__multiply+0xe4>
 8009084:	46c4      	mov	ip, r8
 8009086:	46a1      	mov	r9, r4
 8009088:	2700      	movs	r7, #0
 800908a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800908e:	f8d9 3000 	ldr.w	r3, [r9]
 8009092:	fa1f fb82 	uxth.w	fp, r2
 8009096:	b29b      	uxth	r3, r3
 8009098:	fb0a 330b 	mla	r3, sl, fp, r3
 800909c:	443b      	add	r3, r7
 800909e:	f8d9 7000 	ldr.w	r7, [r9]
 80090a2:	0c12      	lsrs	r2, r2, #16
 80090a4:	0c3f      	lsrs	r7, r7, #16
 80090a6:	fb0a 7202 	mla	r2, sl, r2, r7
 80090aa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090b4:	4565      	cmp	r5, ip
 80090b6:	f849 3b04 	str.w	r3, [r9], #4
 80090ba:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80090be:	d8e4      	bhi.n	800908a <__multiply+0xaa>
 80090c0:	9b01      	ldr	r3, [sp, #4]
 80090c2:	50e7      	str	r7, [r4, r3]
 80090c4:	9b03      	ldr	r3, [sp, #12]
 80090c6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80090ca:	3104      	adds	r1, #4
 80090cc:	f1b9 0f00 	cmp.w	r9, #0
 80090d0:	d020      	beq.n	8009114 <__multiply+0x134>
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	4647      	mov	r7, r8
 80090d6:	46a4      	mov	ip, r4
 80090d8:	f04f 0a00 	mov.w	sl, #0
 80090dc:	f8b7 b000 	ldrh.w	fp, [r7]
 80090e0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80090e4:	fb09 220b 	mla	r2, r9, fp, r2
 80090e8:	4452      	add	r2, sl
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090f0:	f84c 3b04 	str.w	r3, [ip], #4
 80090f4:	f857 3b04 	ldr.w	r3, [r7], #4
 80090f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090fc:	f8bc 3000 	ldrh.w	r3, [ip]
 8009100:	fb09 330a 	mla	r3, r9, sl, r3
 8009104:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009108:	42bd      	cmp	r5, r7
 800910a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800910e:	d8e5      	bhi.n	80090dc <__multiply+0xfc>
 8009110:	9a01      	ldr	r2, [sp, #4]
 8009112:	50a3      	str	r3, [r4, r2]
 8009114:	3404      	adds	r4, #4
 8009116:	e79f      	b.n	8009058 <__multiply+0x78>
 8009118:	3e01      	subs	r6, #1
 800911a:	e7a1      	b.n	8009060 <__multiply+0x80>
 800911c:	08010f48 	.word	0x08010f48
 8009120:	08010f59 	.word	0x08010f59

08009124 <__pow5mult>:
 8009124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009128:	4615      	mov	r5, r2
 800912a:	f012 0203 	ands.w	r2, r2, #3
 800912e:	4607      	mov	r7, r0
 8009130:	460e      	mov	r6, r1
 8009132:	d007      	beq.n	8009144 <__pow5mult+0x20>
 8009134:	4c25      	ldr	r4, [pc, #148]	@ (80091cc <__pow5mult+0xa8>)
 8009136:	3a01      	subs	r2, #1
 8009138:	2300      	movs	r3, #0
 800913a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800913e:	f7ff fea7 	bl	8008e90 <__multadd>
 8009142:	4606      	mov	r6, r0
 8009144:	10ad      	asrs	r5, r5, #2
 8009146:	d03d      	beq.n	80091c4 <__pow5mult+0xa0>
 8009148:	69fc      	ldr	r4, [r7, #28]
 800914a:	b97c      	cbnz	r4, 800916c <__pow5mult+0x48>
 800914c:	2010      	movs	r0, #16
 800914e:	f7fd ffe7 	bl	8007120 <malloc>
 8009152:	4602      	mov	r2, r0
 8009154:	61f8      	str	r0, [r7, #28]
 8009156:	b928      	cbnz	r0, 8009164 <__pow5mult+0x40>
 8009158:	4b1d      	ldr	r3, [pc, #116]	@ (80091d0 <__pow5mult+0xac>)
 800915a:	481e      	ldr	r0, [pc, #120]	@ (80091d4 <__pow5mult+0xb0>)
 800915c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009160:	f000 fc20 	bl	80099a4 <__assert_func>
 8009164:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009168:	6004      	str	r4, [r0, #0]
 800916a:	60c4      	str	r4, [r0, #12]
 800916c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009170:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009174:	b94c      	cbnz	r4, 800918a <__pow5mult+0x66>
 8009176:	f240 2171 	movw	r1, #625	@ 0x271
 800917a:	4638      	mov	r0, r7
 800917c:	f7ff ff1a 	bl	8008fb4 <__i2b>
 8009180:	2300      	movs	r3, #0
 8009182:	f8c8 0008 	str.w	r0, [r8, #8]
 8009186:	4604      	mov	r4, r0
 8009188:	6003      	str	r3, [r0, #0]
 800918a:	f04f 0900 	mov.w	r9, #0
 800918e:	07eb      	lsls	r3, r5, #31
 8009190:	d50a      	bpl.n	80091a8 <__pow5mult+0x84>
 8009192:	4631      	mov	r1, r6
 8009194:	4622      	mov	r2, r4
 8009196:	4638      	mov	r0, r7
 8009198:	f7ff ff22 	bl	8008fe0 <__multiply>
 800919c:	4631      	mov	r1, r6
 800919e:	4680      	mov	r8, r0
 80091a0:	4638      	mov	r0, r7
 80091a2:	f7ff fe53 	bl	8008e4c <_Bfree>
 80091a6:	4646      	mov	r6, r8
 80091a8:	106d      	asrs	r5, r5, #1
 80091aa:	d00b      	beq.n	80091c4 <__pow5mult+0xa0>
 80091ac:	6820      	ldr	r0, [r4, #0]
 80091ae:	b938      	cbnz	r0, 80091c0 <__pow5mult+0x9c>
 80091b0:	4622      	mov	r2, r4
 80091b2:	4621      	mov	r1, r4
 80091b4:	4638      	mov	r0, r7
 80091b6:	f7ff ff13 	bl	8008fe0 <__multiply>
 80091ba:	6020      	str	r0, [r4, #0]
 80091bc:	f8c0 9000 	str.w	r9, [r0]
 80091c0:	4604      	mov	r4, r0
 80091c2:	e7e4      	b.n	800918e <__pow5mult+0x6a>
 80091c4:	4630      	mov	r0, r6
 80091c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ca:	bf00      	nop
 80091cc:	0801100c 	.word	0x0801100c
 80091d0:	08010ed9 	.word	0x08010ed9
 80091d4:	08010f59 	.word	0x08010f59

080091d8 <__lshift>:
 80091d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091dc:	460c      	mov	r4, r1
 80091de:	6849      	ldr	r1, [r1, #4]
 80091e0:	6923      	ldr	r3, [r4, #16]
 80091e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091e6:	68a3      	ldr	r3, [r4, #8]
 80091e8:	4607      	mov	r7, r0
 80091ea:	4691      	mov	r9, r2
 80091ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091f0:	f108 0601 	add.w	r6, r8, #1
 80091f4:	42b3      	cmp	r3, r6
 80091f6:	db0b      	blt.n	8009210 <__lshift+0x38>
 80091f8:	4638      	mov	r0, r7
 80091fa:	f7ff fde7 	bl	8008dcc <_Balloc>
 80091fe:	4605      	mov	r5, r0
 8009200:	b948      	cbnz	r0, 8009216 <__lshift+0x3e>
 8009202:	4602      	mov	r2, r0
 8009204:	4b28      	ldr	r3, [pc, #160]	@ (80092a8 <__lshift+0xd0>)
 8009206:	4829      	ldr	r0, [pc, #164]	@ (80092ac <__lshift+0xd4>)
 8009208:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800920c:	f000 fbca 	bl	80099a4 <__assert_func>
 8009210:	3101      	adds	r1, #1
 8009212:	005b      	lsls	r3, r3, #1
 8009214:	e7ee      	b.n	80091f4 <__lshift+0x1c>
 8009216:	2300      	movs	r3, #0
 8009218:	f100 0114 	add.w	r1, r0, #20
 800921c:	f100 0210 	add.w	r2, r0, #16
 8009220:	4618      	mov	r0, r3
 8009222:	4553      	cmp	r3, sl
 8009224:	db33      	blt.n	800928e <__lshift+0xb6>
 8009226:	6920      	ldr	r0, [r4, #16]
 8009228:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800922c:	f104 0314 	add.w	r3, r4, #20
 8009230:	f019 091f 	ands.w	r9, r9, #31
 8009234:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009238:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800923c:	d02b      	beq.n	8009296 <__lshift+0xbe>
 800923e:	f1c9 0e20 	rsb	lr, r9, #32
 8009242:	468a      	mov	sl, r1
 8009244:	2200      	movs	r2, #0
 8009246:	6818      	ldr	r0, [r3, #0]
 8009248:	fa00 f009 	lsl.w	r0, r0, r9
 800924c:	4310      	orrs	r0, r2
 800924e:	f84a 0b04 	str.w	r0, [sl], #4
 8009252:	f853 2b04 	ldr.w	r2, [r3], #4
 8009256:	459c      	cmp	ip, r3
 8009258:	fa22 f20e 	lsr.w	r2, r2, lr
 800925c:	d8f3      	bhi.n	8009246 <__lshift+0x6e>
 800925e:	ebac 0304 	sub.w	r3, ip, r4
 8009262:	3b15      	subs	r3, #21
 8009264:	f023 0303 	bic.w	r3, r3, #3
 8009268:	3304      	adds	r3, #4
 800926a:	f104 0015 	add.w	r0, r4, #21
 800926e:	4560      	cmp	r0, ip
 8009270:	bf88      	it	hi
 8009272:	2304      	movhi	r3, #4
 8009274:	50ca      	str	r2, [r1, r3]
 8009276:	b10a      	cbz	r2, 800927c <__lshift+0xa4>
 8009278:	f108 0602 	add.w	r6, r8, #2
 800927c:	3e01      	subs	r6, #1
 800927e:	4638      	mov	r0, r7
 8009280:	612e      	str	r6, [r5, #16]
 8009282:	4621      	mov	r1, r4
 8009284:	f7ff fde2 	bl	8008e4c <_Bfree>
 8009288:	4628      	mov	r0, r5
 800928a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800928e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009292:	3301      	adds	r3, #1
 8009294:	e7c5      	b.n	8009222 <__lshift+0x4a>
 8009296:	3904      	subs	r1, #4
 8009298:	f853 2b04 	ldr.w	r2, [r3], #4
 800929c:	f841 2f04 	str.w	r2, [r1, #4]!
 80092a0:	459c      	cmp	ip, r3
 80092a2:	d8f9      	bhi.n	8009298 <__lshift+0xc0>
 80092a4:	e7ea      	b.n	800927c <__lshift+0xa4>
 80092a6:	bf00      	nop
 80092a8:	08010f48 	.word	0x08010f48
 80092ac:	08010f59 	.word	0x08010f59

080092b0 <__mcmp>:
 80092b0:	690a      	ldr	r2, [r1, #16]
 80092b2:	4603      	mov	r3, r0
 80092b4:	6900      	ldr	r0, [r0, #16]
 80092b6:	1a80      	subs	r0, r0, r2
 80092b8:	b530      	push	{r4, r5, lr}
 80092ba:	d10e      	bne.n	80092da <__mcmp+0x2a>
 80092bc:	3314      	adds	r3, #20
 80092be:	3114      	adds	r1, #20
 80092c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80092c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80092c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80092cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80092d0:	4295      	cmp	r5, r2
 80092d2:	d003      	beq.n	80092dc <__mcmp+0x2c>
 80092d4:	d205      	bcs.n	80092e2 <__mcmp+0x32>
 80092d6:	f04f 30ff 	mov.w	r0, #4294967295
 80092da:	bd30      	pop	{r4, r5, pc}
 80092dc:	42a3      	cmp	r3, r4
 80092de:	d3f3      	bcc.n	80092c8 <__mcmp+0x18>
 80092e0:	e7fb      	b.n	80092da <__mcmp+0x2a>
 80092e2:	2001      	movs	r0, #1
 80092e4:	e7f9      	b.n	80092da <__mcmp+0x2a>
	...

080092e8 <__mdiff>:
 80092e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ec:	4689      	mov	r9, r1
 80092ee:	4606      	mov	r6, r0
 80092f0:	4611      	mov	r1, r2
 80092f2:	4648      	mov	r0, r9
 80092f4:	4614      	mov	r4, r2
 80092f6:	f7ff ffdb 	bl	80092b0 <__mcmp>
 80092fa:	1e05      	subs	r5, r0, #0
 80092fc:	d112      	bne.n	8009324 <__mdiff+0x3c>
 80092fe:	4629      	mov	r1, r5
 8009300:	4630      	mov	r0, r6
 8009302:	f7ff fd63 	bl	8008dcc <_Balloc>
 8009306:	4602      	mov	r2, r0
 8009308:	b928      	cbnz	r0, 8009316 <__mdiff+0x2e>
 800930a:	4b3f      	ldr	r3, [pc, #252]	@ (8009408 <__mdiff+0x120>)
 800930c:	f240 2137 	movw	r1, #567	@ 0x237
 8009310:	483e      	ldr	r0, [pc, #248]	@ (800940c <__mdiff+0x124>)
 8009312:	f000 fb47 	bl	80099a4 <__assert_func>
 8009316:	2301      	movs	r3, #1
 8009318:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800931c:	4610      	mov	r0, r2
 800931e:	b003      	add	sp, #12
 8009320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009324:	bfbc      	itt	lt
 8009326:	464b      	movlt	r3, r9
 8009328:	46a1      	movlt	r9, r4
 800932a:	4630      	mov	r0, r6
 800932c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009330:	bfba      	itte	lt
 8009332:	461c      	movlt	r4, r3
 8009334:	2501      	movlt	r5, #1
 8009336:	2500      	movge	r5, #0
 8009338:	f7ff fd48 	bl	8008dcc <_Balloc>
 800933c:	4602      	mov	r2, r0
 800933e:	b918      	cbnz	r0, 8009348 <__mdiff+0x60>
 8009340:	4b31      	ldr	r3, [pc, #196]	@ (8009408 <__mdiff+0x120>)
 8009342:	f240 2145 	movw	r1, #581	@ 0x245
 8009346:	e7e3      	b.n	8009310 <__mdiff+0x28>
 8009348:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800934c:	6926      	ldr	r6, [r4, #16]
 800934e:	60c5      	str	r5, [r0, #12]
 8009350:	f109 0310 	add.w	r3, r9, #16
 8009354:	f109 0514 	add.w	r5, r9, #20
 8009358:	f104 0e14 	add.w	lr, r4, #20
 800935c:	f100 0b14 	add.w	fp, r0, #20
 8009360:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009364:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009368:	9301      	str	r3, [sp, #4]
 800936a:	46d9      	mov	r9, fp
 800936c:	f04f 0c00 	mov.w	ip, #0
 8009370:	9b01      	ldr	r3, [sp, #4]
 8009372:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009376:	f853 af04 	ldr.w	sl, [r3, #4]!
 800937a:	9301      	str	r3, [sp, #4]
 800937c:	fa1f f38a 	uxth.w	r3, sl
 8009380:	4619      	mov	r1, r3
 8009382:	b283      	uxth	r3, r0
 8009384:	1acb      	subs	r3, r1, r3
 8009386:	0c00      	lsrs	r0, r0, #16
 8009388:	4463      	add	r3, ip
 800938a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800938e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009392:	b29b      	uxth	r3, r3
 8009394:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009398:	4576      	cmp	r6, lr
 800939a:	f849 3b04 	str.w	r3, [r9], #4
 800939e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80093a2:	d8e5      	bhi.n	8009370 <__mdiff+0x88>
 80093a4:	1b33      	subs	r3, r6, r4
 80093a6:	3b15      	subs	r3, #21
 80093a8:	f023 0303 	bic.w	r3, r3, #3
 80093ac:	3415      	adds	r4, #21
 80093ae:	3304      	adds	r3, #4
 80093b0:	42a6      	cmp	r6, r4
 80093b2:	bf38      	it	cc
 80093b4:	2304      	movcc	r3, #4
 80093b6:	441d      	add	r5, r3
 80093b8:	445b      	add	r3, fp
 80093ba:	461e      	mov	r6, r3
 80093bc:	462c      	mov	r4, r5
 80093be:	4544      	cmp	r4, r8
 80093c0:	d30e      	bcc.n	80093e0 <__mdiff+0xf8>
 80093c2:	f108 0103 	add.w	r1, r8, #3
 80093c6:	1b49      	subs	r1, r1, r5
 80093c8:	f021 0103 	bic.w	r1, r1, #3
 80093cc:	3d03      	subs	r5, #3
 80093ce:	45a8      	cmp	r8, r5
 80093d0:	bf38      	it	cc
 80093d2:	2100      	movcc	r1, #0
 80093d4:	440b      	add	r3, r1
 80093d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80093da:	b191      	cbz	r1, 8009402 <__mdiff+0x11a>
 80093dc:	6117      	str	r7, [r2, #16]
 80093de:	e79d      	b.n	800931c <__mdiff+0x34>
 80093e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80093e4:	46e6      	mov	lr, ip
 80093e6:	0c08      	lsrs	r0, r1, #16
 80093e8:	fa1c fc81 	uxtah	ip, ip, r1
 80093ec:	4471      	add	r1, lr
 80093ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80093f2:	b289      	uxth	r1, r1
 80093f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80093f8:	f846 1b04 	str.w	r1, [r6], #4
 80093fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009400:	e7dd      	b.n	80093be <__mdiff+0xd6>
 8009402:	3f01      	subs	r7, #1
 8009404:	e7e7      	b.n	80093d6 <__mdiff+0xee>
 8009406:	bf00      	nop
 8009408:	08010f48 	.word	0x08010f48
 800940c:	08010f59 	.word	0x08010f59

08009410 <__d2b>:
 8009410:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009414:	460f      	mov	r7, r1
 8009416:	2101      	movs	r1, #1
 8009418:	ec59 8b10 	vmov	r8, r9, d0
 800941c:	4616      	mov	r6, r2
 800941e:	f7ff fcd5 	bl	8008dcc <_Balloc>
 8009422:	4604      	mov	r4, r0
 8009424:	b930      	cbnz	r0, 8009434 <__d2b+0x24>
 8009426:	4602      	mov	r2, r0
 8009428:	4b23      	ldr	r3, [pc, #140]	@ (80094b8 <__d2b+0xa8>)
 800942a:	4824      	ldr	r0, [pc, #144]	@ (80094bc <__d2b+0xac>)
 800942c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009430:	f000 fab8 	bl	80099a4 <__assert_func>
 8009434:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009438:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800943c:	b10d      	cbz	r5, 8009442 <__d2b+0x32>
 800943e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009442:	9301      	str	r3, [sp, #4]
 8009444:	f1b8 0300 	subs.w	r3, r8, #0
 8009448:	d023      	beq.n	8009492 <__d2b+0x82>
 800944a:	4668      	mov	r0, sp
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	f7ff fd84 	bl	8008f5a <__lo0bits>
 8009452:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009456:	b1d0      	cbz	r0, 800948e <__d2b+0x7e>
 8009458:	f1c0 0320 	rsb	r3, r0, #32
 800945c:	fa02 f303 	lsl.w	r3, r2, r3
 8009460:	430b      	orrs	r3, r1
 8009462:	40c2      	lsrs	r2, r0
 8009464:	6163      	str	r3, [r4, #20]
 8009466:	9201      	str	r2, [sp, #4]
 8009468:	9b01      	ldr	r3, [sp, #4]
 800946a:	61a3      	str	r3, [r4, #24]
 800946c:	2b00      	cmp	r3, #0
 800946e:	bf0c      	ite	eq
 8009470:	2201      	moveq	r2, #1
 8009472:	2202      	movne	r2, #2
 8009474:	6122      	str	r2, [r4, #16]
 8009476:	b1a5      	cbz	r5, 80094a2 <__d2b+0x92>
 8009478:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800947c:	4405      	add	r5, r0
 800947e:	603d      	str	r5, [r7, #0]
 8009480:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009484:	6030      	str	r0, [r6, #0]
 8009486:	4620      	mov	r0, r4
 8009488:	b003      	add	sp, #12
 800948a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800948e:	6161      	str	r1, [r4, #20]
 8009490:	e7ea      	b.n	8009468 <__d2b+0x58>
 8009492:	a801      	add	r0, sp, #4
 8009494:	f7ff fd61 	bl	8008f5a <__lo0bits>
 8009498:	9b01      	ldr	r3, [sp, #4]
 800949a:	6163      	str	r3, [r4, #20]
 800949c:	3020      	adds	r0, #32
 800949e:	2201      	movs	r2, #1
 80094a0:	e7e8      	b.n	8009474 <__d2b+0x64>
 80094a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80094a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80094aa:	6038      	str	r0, [r7, #0]
 80094ac:	6918      	ldr	r0, [r3, #16]
 80094ae:	f7ff fd35 	bl	8008f1c <__hi0bits>
 80094b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094b6:	e7e5      	b.n	8009484 <__d2b+0x74>
 80094b8:	08010f48 	.word	0x08010f48
 80094bc:	08010f59 	.word	0x08010f59

080094c0 <__sfputc_r>:
 80094c0:	6893      	ldr	r3, [r2, #8]
 80094c2:	3b01      	subs	r3, #1
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	b410      	push	{r4}
 80094c8:	6093      	str	r3, [r2, #8]
 80094ca:	da08      	bge.n	80094de <__sfputc_r+0x1e>
 80094cc:	6994      	ldr	r4, [r2, #24]
 80094ce:	42a3      	cmp	r3, r4
 80094d0:	db01      	blt.n	80094d6 <__sfputc_r+0x16>
 80094d2:	290a      	cmp	r1, #10
 80094d4:	d103      	bne.n	80094de <__sfputc_r+0x1e>
 80094d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094da:	f7fe bca2 	b.w	8007e22 <__swbuf_r>
 80094de:	6813      	ldr	r3, [r2, #0]
 80094e0:	1c58      	adds	r0, r3, #1
 80094e2:	6010      	str	r0, [r2, #0]
 80094e4:	7019      	strb	r1, [r3, #0]
 80094e6:	4608      	mov	r0, r1
 80094e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <__sfputs_r>:
 80094ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f0:	4606      	mov	r6, r0
 80094f2:	460f      	mov	r7, r1
 80094f4:	4614      	mov	r4, r2
 80094f6:	18d5      	adds	r5, r2, r3
 80094f8:	42ac      	cmp	r4, r5
 80094fa:	d101      	bne.n	8009500 <__sfputs_r+0x12>
 80094fc:	2000      	movs	r0, #0
 80094fe:	e007      	b.n	8009510 <__sfputs_r+0x22>
 8009500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009504:	463a      	mov	r2, r7
 8009506:	4630      	mov	r0, r6
 8009508:	f7ff ffda 	bl	80094c0 <__sfputc_r>
 800950c:	1c43      	adds	r3, r0, #1
 800950e:	d1f3      	bne.n	80094f8 <__sfputs_r+0xa>
 8009510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009514 <_vfiprintf_r>:
 8009514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009518:	460d      	mov	r5, r1
 800951a:	b09d      	sub	sp, #116	@ 0x74
 800951c:	4614      	mov	r4, r2
 800951e:	4698      	mov	r8, r3
 8009520:	4606      	mov	r6, r0
 8009522:	b118      	cbz	r0, 800952c <_vfiprintf_r+0x18>
 8009524:	6a03      	ldr	r3, [r0, #32]
 8009526:	b90b      	cbnz	r3, 800952c <_vfiprintf_r+0x18>
 8009528:	f7fe fb92 	bl	8007c50 <__sinit>
 800952c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800952e:	07d9      	lsls	r1, r3, #31
 8009530:	d405      	bmi.n	800953e <_vfiprintf_r+0x2a>
 8009532:	89ab      	ldrh	r3, [r5, #12]
 8009534:	059a      	lsls	r2, r3, #22
 8009536:	d402      	bmi.n	800953e <_vfiprintf_r+0x2a>
 8009538:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800953a:	f7fe fd94 	bl	8008066 <__retarget_lock_acquire_recursive>
 800953e:	89ab      	ldrh	r3, [r5, #12]
 8009540:	071b      	lsls	r3, r3, #28
 8009542:	d501      	bpl.n	8009548 <_vfiprintf_r+0x34>
 8009544:	692b      	ldr	r3, [r5, #16]
 8009546:	b99b      	cbnz	r3, 8009570 <_vfiprintf_r+0x5c>
 8009548:	4629      	mov	r1, r5
 800954a:	4630      	mov	r0, r6
 800954c:	f7fe fca8 	bl	8007ea0 <__swsetup_r>
 8009550:	b170      	cbz	r0, 8009570 <_vfiprintf_r+0x5c>
 8009552:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009554:	07dc      	lsls	r4, r3, #31
 8009556:	d504      	bpl.n	8009562 <_vfiprintf_r+0x4e>
 8009558:	f04f 30ff 	mov.w	r0, #4294967295
 800955c:	b01d      	add	sp, #116	@ 0x74
 800955e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009562:	89ab      	ldrh	r3, [r5, #12]
 8009564:	0598      	lsls	r0, r3, #22
 8009566:	d4f7      	bmi.n	8009558 <_vfiprintf_r+0x44>
 8009568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800956a:	f7fe fd7d 	bl	8008068 <__retarget_lock_release_recursive>
 800956e:	e7f3      	b.n	8009558 <_vfiprintf_r+0x44>
 8009570:	2300      	movs	r3, #0
 8009572:	9309      	str	r3, [sp, #36]	@ 0x24
 8009574:	2320      	movs	r3, #32
 8009576:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800957a:	f8cd 800c 	str.w	r8, [sp, #12]
 800957e:	2330      	movs	r3, #48	@ 0x30
 8009580:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009730 <_vfiprintf_r+0x21c>
 8009584:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009588:	f04f 0901 	mov.w	r9, #1
 800958c:	4623      	mov	r3, r4
 800958e:	469a      	mov	sl, r3
 8009590:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009594:	b10a      	cbz	r2, 800959a <_vfiprintf_r+0x86>
 8009596:	2a25      	cmp	r2, #37	@ 0x25
 8009598:	d1f9      	bne.n	800958e <_vfiprintf_r+0x7a>
 800959a:	ebba 0b04 	subs.w	fp, sl, r4
 800959e:	d00b      	beq.n	80095b8 <_vfiprintf_r+0xa4>
 80095a0:	465b      	mov	r3, fp
 80095a2:	4622      	mov	r2, r4
 80095a4:	4629      	mov	r1, r5
 80095a6:	4630      	mov	r0, r6
 80095a8:	f7ff ffa1 	bl	80094ee <__sfputs_r>
 80095ac:	3001      	adds	r0, #1
 80095ae:	f000 80a7 	beq.w	8009700 <_vfiprintf_r+0x1ec>
 80095b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095b4:	445a      	add	r2, fp
 80095b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80095b8:	f89a 3000 	ldrb.w	r3, [sl]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 809f 	beq.w	8009700 <_vfiprintf_r+0x1ec>
 80095c2:	2300      	movs	r3, #0
 80095c4:	f04f 32ff 	mov.w	r2, #4294967295
 80095c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095cc:	f10a 0a01 	add.w	sl, sl, #1
 80095d0:	9304      	str	r3, [sp, #16]
 80095d2:	9307      	str	r3, [sp, #28]
 80095d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80095d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80095da:	4654      	mov	r4, sl
 80095dc:	2205      	movs	r2, #5
 80095de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e2:	4853      	ldr	r0, [pc, #332]	@ (8009730 <_vfiprintf_r+0x21c>)
 80095e4:	f7f6 fe04 	bl	80001f0 <memchr>
 80095e8:	9a04      	ldr	r2, [sp, #16]
 80095ea:	b9d8      	cbnz	r0, 8009624 <_vfiprintf_r+0x110>
 80095ec:	06d1      	lsls	r1, r2, #27
 80095ee:	bf44      	itt	mi
 80095f0:	2320      	movmi	r3, #32
 80095f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095f6:	0713      	lsls	r3, r2, #28
 80095f8:	bf44      	itt	mi
 80095fa:	232b      	movmi	r3, #43	@ 0x2b
 80095fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009600:	f89a 3000 	ldrb.w	r3, [sl]
 8009604:	2b2a      	cmp	r3, #42	@ 0x2a
 8009606:	d015      	beq.n	8009634 <_vfiprintf_r+0x120>
 8009608:	9a07      	ldr	r2, [sp, #28]
 800960a:	4654      	mov	r4, sl
 800960c:	2000      	movs	r0, #0
 800960e:	f04f 0c0a 	mov.w	ip, #10
 8009612:	4621      	mov	r1, r4
 8009614:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009618:	3b30      	subs	r3, #48	@ 0x30
 800961a:	2b09      	cmp	r3, #9
 800961c:	d94b      	bls.n	80096b6 <_vfiprintf_r+0x1a2>
 800961e:	b1b0      	cbz	r0, 800964e <_vfiprintf_r+0x13a>
 8009620:	9207      	str	r2, [sp, #28]
 8009622:	e014      	b.n	800964e <_vfiprintf_r+0x13a>
 8009624:	eba0 0308 	sub.w	r3, r0, r8
 8009628:	fa09 f303 	lsl.w	r3, r9, r3
 800962c:	4313      	orrs	r3, r2
 800962e:	9304      	str	r3, [sp, #16]
 8009630:	46a2      	mov	sl, r4
 8009632:	e7d2      	b.n	80095da <_vfiprintf_r+0xc6>
 8009634:	9b03      	ldr	r3, [sp, #12]
 8009636:	1d19      	adds	r1, r3, #4
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	9103      	str	r1, [sp, #12]
 800963c:	2b00      	cmp	r3, #0
 800963e:	bfbb      	ittet	lt
 8009640:	425b      	neglt	r3, r3
 8009642:	f042 0202 	orrlt.w	r2, r2, #2
 8009646:	9307      	strge	r3, [sp, #28]
 8009648:	9307      	strlt	r3, [sp, #28]
 800964a:	bfb8      	it	lt
 800964c:	9204      	strlt	r2, [sp, #16]
 800964e:	7823      	ldrb	r3, [r4, #0]
 8009650:	2b2e      	cmp	r3, #46	@ 0x2e
 8009652:	d10a      	bne.n	800966a <_vfiprintf_r+0x156>
 8009654:	7863      	ldrb	r3, [r4, #1]
 8009656:	2b2a      	cmp	r3, #42	@ 0x2a
 8009658:	d132      	bne.n	80096c0 <_vfiprintf_r+0x1ac>
 800965a:	9b03      	ldr	r3, [sp, #12]
 800965c:	1d1a      	adds	r2, r3, #4
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	9203      	str	r2, [sp, #12]
 8009662:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009666:	3402      	adds	r4, #2
 8009668:	9305      	str	r3, [sp, #20]
 800966a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009740 <_vfiprintf_r+0x22c>
 800966e:	7821      	ldrb	r1, [r4, #0]
 8009670:	2203      	movs	r2, #3
 8009672:	4650      	mov	r0, sl
 8009674:	f7f6 fdbc 	bl	80001f0 <memchr>
 8009678:	b138      	cbz	r0, 800968a <_vfiprintf_r+0x176>
 800967a:	9b04      	ldr	r3, [sp, #16]
 800967c:	eba0 000a 	sub.w	r0, r0, sl
 8009680:	2240      	movs	r2, #64	@ 0x40
 8009682:	4082      	lsls	r2, r0
 8009684:	4313      	orrs	r3, r2
 8009686:	3401      	adds	r4, #1
 8009688:	9304      	str	r3, [sp, #16]
 800968a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800968e:	4829      	ldr	r0, [pc, #164]	@ (8009734 <_vfiprintf_r+0x220>)
 8009690:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009694:	2206      	movs	r2, #6
 8009696:	f7f6 fdab 	bl	80001f0 <memchr>
 800969a:	2800      	cmp	r0, #0
 800969c:	d03f      	beq.n	800971e <_vfiprintf_r+0x20a>
 800969e:	4b26      	ldr	r3, [pc, #152]	@ (8009738 <_vfiprintf_r+0x224>)
 80096a0:	bb1b      	cbnz	r3, 80096ea <_vfiprintf_r+0x1d6>
 80096a2:	9b03      	ldr	r3, [sp, #12]
 80096a4:	3307      	adds	r3, #7
 80096a6:	f023 0307 	bic.w	r3, r3, #7
 80096aa:	3308      	adds	r3, #8
 80096ac:	9303      	str	r3, [sp, #12]
 80096ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096b0:	443b      	add	r3, r7
 80096b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80096b4:	e76a      	b.n	800958c <_vfiprintf_r+0x78>
 80096b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80096ba:	460c      	mov	r4, r1
 80096bc:	2001      	movs	r0, #1
 80096be:	e7a8      	b.n	8009612 <_vfiprintf_r+0xfe>
 80096c0:	2300      	movs	r3, #0
 80096c2:	3401      	adds	r4, #1
 80096c4:	9305      	str	r3, [sp, #20]
 80096c6:	4619      	mov	r1, r3
 80096c8:	f04f 0c0a 	mov.w	ip, #10
 80096cc:	4620      	mov	r0, r4
 80096ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096d2:	3a30      	subs	r2, #48	@ 0x30
 80096d4:	2a09      	cmp	r2, #9
 80096d6:	d903      	bls.n	80096e0 <_vfiprintf_r+0x1cc>
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d0c6      	beq.n	800966a <_vfiprintf_r+0x156>
 80096dc:	9105      	str	r1, [sp, #20]
 80096de:	e7c4      	b.n	800966a <_vfiprintf_r+0x156>
 80096e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80096e4:	4604      	mov	r4, r0
 80096e6:	2301      	movs	r3, #1
 80096e8:	e7f0      	b.n	80096cc <_vfiprintf_r+0x1b8>
 80096ea:	ab03      	add	r3, sp, #12
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	462a      	mov	r2, r5
 80096f0:	4b12      	ldr	r3, [pc, #72]	@ (800973c <_vfiprintf_r+0x228>)
 80096f2:	a904      	add	r1, sp, #16
 80096f4:	4630      	mov	r0, r6
 80096f6:	f7fd fe69 	bl	80073cc <_printf_float>
 80096fa:	4607      	mov	r7, r0
 80096fc:	1c78      	adds	r0, r7, #1
 80096fe:	d1d6      	bne.n	80096ae <_vfiprintf_r+0x19a>
 8009700:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009702:	07d9      	lsls	r1, r3, #31
 8009704:	d405      	bmi.n	8009712 <_vfiprintf_r+0x1fe>
 8009706:	89ab      	ldrh	r3, [r5, #12]
 8009708:	059a      	lsls	r2, r3, #22
 800970a:	d402      	bmi.n	8009712 <_vfiprintf_r+0x1fe>
 800970c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800970e:	f7fe fcab 	bl	8008068 <__retarget_lock_release_recursive>
 8009712:	89ab      	ldrh	r3, [r5, #12]
 8009714:	065b      	lsls	r3, r3, #25
 8009716:	f53f af1f 	bmi.w	8009558 <_vfiprintf_r+0x44>
 800971a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800971c:	e71e      	b.n	800955c <_vfiprintf_r+0x48>
 800971e:	ab03      	add	r3, sp, #12
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	462a      	mov	r2, r5
 8009724:	4b05      	ldr	r3, [pc, #20]	@ (800973c <_vfiprintf_r+0x228>)
 8009726:	a904      	add	r1, sp, #16
 8009728:	4630      	mov	r0, r6
 800972a:	f7fe f8e7 	bl	80078fc <_printf_i>
 800972e:	e7e4      	b.n	80096fa <_vfiprintf_r+0x1e6>
 8009730:	08010fb2 	.word	0x08010fb2
 8009734:	08010fbc 	.word	0x08010fbc
 8009738:	080073cd 	.word	0x080073cd
 800973c:	080094ef 	.word	0x080094ef
 8009740:	08010fb8 	.word	0x08010fb8

08009744 <__sflush_r>:
 8009744:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800974c:	0716      	lsls	r6, r2, #28
 800974e:	4605      	mov	r5, r0
 8009750:	460c      	mov	r4, r1
 8009752:	d454      	bmi.n	80097fe <__sflush_r+0xba>
 8009754:	684b      	ldr	r3, [r1, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	dc02      	bgt.n	8009760 <__sflush_r+0x1c>
 800975a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800975c:	2b00      	cmp	r3, #0
 800975e:	dd48      	ble.n	80097f2 <__sflush_r+0xae>
 8009760:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009762:	2e00      	cmp	r6, #0
 8009764:	d045      	beq.n	80097f2 <__sflush_r+0xae>
 8009766:	2300      	movs	r3, #0
 8009768:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800976c:	682f      	ldr	r7, [r5, #0]
 800976e:	6a21      	ldr	r1, [r4, #32]
 8009770:	602b      	str	r3, [r5, #0]
 8009772:	d030      	beq.n	80097d6 <__sflush_r+0x92>
 8009774:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009776:	89a3      	ldrh	r3, [r4, #12]
 8009778:	0759      	lsls	r1, r3, #29
 800977a:	d505      	bpl.n	8009788 <__sflush_r+0x44>
 800977c:	6863      	ldr	r3, [r4, #4]
 800977e:	1ad2      	subs	r2, r2, r3
 8009780:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009782:	b10b      	cbz	r3, 8009788 <__sflush_r+0x44>
 8009784:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009786:	1ad2      	subs	r2, r2, r3
 8009788:	2300      	movs	r3, #0
 800978a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800978c:	6a21      	ldr	r1, [r4, #32]
 800978e:	4628      	mov	r0, r5
 8009790:	47b0      	blx	r6
 8009792:	1c43      	adds	r3, r0, #1
 8009794:	89a3      	ldrh	r3, [r4, #12]
 8009796:	d106      	bne.n	80097a6 <__sflush_r+0x62>
 8009798:	6829      	ldr	r1, [r5, #0]
 800979a:	291d      	cmp	r1, #29
 800979c:	d82b      	bhi.n	80097f6 <__sflush_r+0xb2>
 800979e:	4a2a      	ldr	r2, [pc, #168]	@ (8009848 <__sflush_r+0x104>)
 80097a0:	40ca      	lsrs	r2, r1
 80097a2:	07d6      	lsls	r6, r2, #31
 80097a4:	d527      	bpl.n	80097f6 <__sflush_r+0xb2>
 80097a6:	2200      	movs	r2, #0
 80097a8:	6062      	str	r2, [r4, #4]
 80097aa:	04d9      	lsls	r1, r3, #19
 80097ac:	6922      	ldr	r2, [r4, #16]
 80097ae:	6022      	str	r2, [r4, #0]
 80097b0:	d504      	bpl.n	80097bc <__sflush_r+0x78>
 80097b2:	1c42      	adds	r2, r0, #1
 80097b4:	d101      	bne.n	80097ba <__sflush_r+0x76>
 80097b6:	682b      	ldr	r3, [r5, #0]
 80097b8:	b903      	cbnz	r3, 80097bc <__sflush_r+0x78>
 80097ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80097bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097be:	602f      	str	r7, [r5, #0]
 80097c0:	b1b9      	cbz	r1, 80097f2 <__sflush_r+0xae>
 80097c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097c6:	4299      	cmp	r1, r3
 80097c8:	d002      	beq.n	80097d0 <__sflush_r+0x8c>
 80097ca:	4628      	mov	r0, r5
 80097cc:	f7ff fab4 	bl	8008d38 <_free_r>
 80097d0:	2300      	movs	r3, #0
 80097d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80097d4:	e00d      	b.n	80097f2 <__sflush_r+0xae>
 80097d6:	2301      	movs	r3, #1
 80097d8:	4628      	mov	r0, r5
 80097da:	47b0      	blx	r6
 80097dc:	4602      	mov	r2, r0
 80097de:	1c50      	adds	r0, r2, #1
 80097e0:	d1c9      	bne.n	8009776 <__sflush_r+0x32>
 80097e2:	682b      	ldr	r3, [r5, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d0c6      	beq.n	8009776 <__sflush_r+0x32>
 80097e8:	2b1d      	cmp	r3, #29
 80097ea:	d001      	beq.n	80097f0 <__sflush_r+0xac>
 80097ec:	2b16      	cmp	r3, #22
 80097ee:	d11e      	bne.n	800982e <__sflush_r+0xea>
 80097f0:	602f      	str	r7, [r5, #0]
 80097f2:	2000      	movs	r0, #0
 80097f4:	e022      	b.n	800983c <__sflush_r+0xf8>
 80097f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097fa:	b21b      	sxth	r3, r3
 80097fc:	e01b      	b.n	8009836 <__sflush_r+0xf2>
 80097fe:	690f      	ldr	r7, [r1, #16]
 8009800:	2f00      	cmp	r7, #0
 8009802:	d0f6      	beq.n	80097f2 <__sflush_r+0xae>
 8009804:	0793      	lsls	r3, r2, #30
 8009806:	680e      	ldr	r6, [r1, #0]
 8009808:	bf08      	it	eq
 800980a:	694b      	ldreq	r3, [r1, #20]
 800980c:	600f      	str	r7, [r1, #0]
 800980e:	bf18      	it	ne
 8009810:	2300      	movne	r3, #0
 8009812:	eba6 0807 	sub.w	r8, r6, r7
 8009816:	608b      	str	r3, [r1, #8]
 8009818:	f1b8 0f00 	cmp.w	r8, #0
 800981c:	dde9      	ble.n	80097f2 <__sflush_r+0xae>
 800981e:	6a21      	ldr	r1, [r4, #32]
 8009820:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009822:	4643      	mov	r3, r8
 8009824:	463a      	mov	r2, r7
 8009826:	4628      	mov	r0, r5
 8009828:	47b0      	blx	r6
 800982a:	2800      	cmp	r0, #0
 800982c:	dc08      	bgt.n	8009840 <__sflush_r+0xfc>
 800982e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009836:	81a3      	strh	r3, [r4, #12]
 8009838:	f04f 30ff 	mov.w	r0, #4294967295
 800983c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009840:	4407      	add	r7, r0
 8009842:	eba8 0800 	sub.w	r8, r8, r0
 8009846:	e7e7      	b.n	8009818 <__sflush_r+0xd4>
 8009848:	20400001 	.word	0x20400001

0800984c <_fflush_r>:
 800984c:	b538      	push	{r3, r4, r5, lr}
 800984e:	690b      	ldr	r3, [r1, #16]
 8009850:	4605      	mov	r5, r0
 8009852:	460c      	mov	r4, r1
 8009854:	b913      	cbnz	r3, 800985c <_fflush_r+0x10>
 8009856:	2500      	movs	r5, #0
 8009858:	4628      	mov	r0, r5
 800985a:	bd38      	pop	{r3, r4, r5, pc}
 800985c:	b118      	cbz	r0, 8009866 <_fflush_r+0x1a>
 800985e:	6a03      	ldr	r3, [r0, #32]
 8009860:	b90b      	cbnz	r3, 8009866 <_fflush_r+0x1a>
 8009862:	f7fe f9f5 	bl	8007c50 <__sinit>
 8009866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d0f3      	beq.n	8009856 <_fflush_r+0xa>
 800986e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009870:	07d0      	lsls	r0, r2, #31
 8009872:	d404      	bmi.n	800987e <_fflush_r+0x32>
 8009874:	0599      	lsls	r1, r3, #22
 8009876:	d402      	bmi.n	800987e <_fflush_r+0x32>
 8009878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800987a:	f7fe fbf4 	bl	8008066 <__retarget_lock_acquire_recursive>
 800987e:	4628      	mov	r0, r5
 8009880:	4621      	mov	r1, r4
 8009882:	f7ff ff5f 	bl	8009744 <__sflush_r>
 8009886:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009888:	07da      	lsls	r2, r3, #31
 800988a:	4605      	mov	r5, r0
 800988c:	d4e4      	bmi.n	8009858 <_fflush_r+0xc>
 800988e:	89a3      	ldrh	r3, [r4, #12]
 8009890:	059b      	lsls	r3, r3, #22
 8009892:	d4e1      	bmi.n	8009858 <_fflush_r+0xc>
 8009894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009896:	f7fe fbe7 	bl	8008068 <__retarget_lock_release_recursive>
 800989a:	e7dd      	b.n	8009858 <_fflush_r+0xc>

0800989c <__swhatbuf_r>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	460c      	mov	r4, r1
 80098a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a4:	2900      	cmp	r1, #0
 80098a6:	b096      	sub	sp, #88	@ 0x58
 80098a8:	4615      	mov	r5, r2
 80098aa:	461e      	mov	r6, r3
 80098ac:	da0d      	bge.n	80098ca <__swhatbuf_r+0x2e>
 80098ae:	89a3      	ldrh	r3, [r4, #12]
 80098b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80098b4:	f04f 0100 	mov.w	r1, #0
 80098b8:	bf14      	ite	ne
 80098ba:	2340      	movne	r3, #64	@ 0x40
 80098bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80098c0:	2000      	movs	r0, #0
 80098c2:	6031      	str	r1, [r6, #0]
 80098c4:	602b      	str	r3, [r5, #0]
 80098c6:	b016      	add	sp, #88	@ 0x58
 80098c8:	bd70      	pop	{r4, r5, r6, pc}
 80098ca:	466a      	mov	r2, sp
 80098cc:	f000 f848 	bl	8009960 <_fstat_r>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	dbec      	blt.n	80098ae <__swhatbuf_r+0x12>
 80098d4:	9901      	ldr	r1, [sp, #4]
 80098d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80098da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80098de:	4259      	negs	r1, r3
 80098e0:	4159      	adcs	r1, r3
 80098e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098e6:	e7eb      	b.n	80098c0 <__swhatbuf_r+0x24>

080098e8 <__smakebuf_r>:
 80098e8:	898b      	ldrh	r3, [r1, #12]
 80098ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098ec:	079d      	lsls	r5, r3, #30
 80098ee:	4606      	mov	r6, r0
 80098f0:	460c      	mov	r4, r1
 80098f2:	d507      	bpl.n	8009904 <__smakebuf_r+0x1c>
 80098f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80098f8:	6023      	str	r3, [r4, #0]
 80098fa:	6123      	str	r3, [r4, #16]
 80098fc:	2301      	movs	r3, #1
 80098fe:	6163      	str	r3, [r4, #20]
 8009900:	b003      	add	sp, #12
 8009902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009904:	ab01      	add	r3, sp, #4
 8009906:	466a      	mov	r2, sp
 8009908:	f7ff ffc8 	bl	800989c <__swhatbuf_r>
 800990c:	9f00      	ldr	r7, [sp, #0]
 800990e:	4605      	mov	r5, r0
 8009910:	4639      	mov	r1, r7
 8009912:	4630      	mov	r0, r6
 8009914:	f7fd fc2e 	bl	8007174 <_malloc_r>
 8009918:	b948      	cbnz	r0, 800992e <__smakebuf_r+0x46>
 800991a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800991e:	059a      	lsls	r2, r3, #22
 8009920:	d4ee      	bmi.n	8009900 <__smakebuf_r+0x18>
 8009922:	f023 0303 	bic.w	r3, r3, #3
 8009926:	f043 0302 	orr.w	r3, r3, #2
 800992a:	81a3      	strh	r3, [r4, #12]
 800992c:	e7e2      	b.n	80098f4 <__smakebuf_r+0xc>
 800992e:	89a3      	ldrh	r3, [r4, #12]
 8009930:	6020      	str	r0, [r4, #0]
 8009932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009936:	81a3      	strh	r3, [r4, #12]
 8009938:	9b01      	ldr	r3, [sp, #4]
 800993a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800993e:	b15b      	cbz	r3, 8009958 <__smakebuf_r+0x70>
 8009940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009944:	4630      	mov	r0, r6
 8009946:	f000 f81d 	bl	8009984 <_isatty_r>
 800994a:	b128      	cbz	r0, 8009958 <__smakebuf_r+0x70>
 800994c:	89a3      	ldrh	r3, [r4, #12]
 800994e:	f023 0303 	bic.w	r3, r3, #3
 8009952:	f043 0301 	orr.w	r3, r3, #1
 8009956:	81a3      	strh	r3, [r4, #12]
 8009958:	89a3      	ldrh	r3, [r4, #12]
 800995a:	431d      	orrs	r5, r3
 800995c:	81a5      	strh	r5, [r4, #12]
 800995e:	e7cf      	b.n	8009900 <__smakebuf_r+0x18>

08009960 <_fstat_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4d07      	ldr	r5, [pc, #28]	@ (8009980 <_fstat_r+0x20>)
 8009964:	2300      	movs	r3, #0
 8009966:	4604      	mov	r4, r0
 8009968:	4608      	mov	r0, r1
 800996a:	4611      	mov	r1, r2
 800996c:	602b      	str	r3, [r5, #0]
 800996e:	f7f7 ff3a 	bl	80017e6 <_fstat>
 8009972:	1c43      	adds	r3, r0, #1
 8009974:	d102      	bne.n	800997c <_fstat_r+0x1c>
 8009976:	682b      	ldr	r3, [r5, #0]
 8009978:	b103      	cbz	r3, 800997c <_fstat_r+0x1c>
 800997a:	6023      	str	r3, [r4, #0]
 800997c:	bd38      	pop	{r3, r4, r5, pc}
 800997e:	bf00      	nop
 8009980:	20001520 	.word	0x20001520

08009984 <_isatty_r>:
 8009984:	b538      	push	{r3, r4, r5, lr}
 8009986:	4d06      	ldr	r5, [pc, #24]	@ (80099a0 <_isatty_r+0x1c>)
 8009988:	2300      	movs	r3, #0
 800998a:	4604      	mov	r4, r0
 800998c:	4608      	mov	r0, r1
 800998e:	602b      	str	r3, [r5, #0]
 8009990:	f7f7 ff39 	bl	8001806 <_isatty>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d102      	bne.n	800999e <_isatty_r+0x1a>
 8009998:	682b      	ldr	r3, [r5, #0]
 800999a:	b103      	cbz	r3, 800999e <_isatty_r+0x1a>
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	bd38      	pop	{r3, r4, r5, pc}
 80099a0:	20001520 	.word	0x20001520

080099a4 <__assert_func>:
 80099a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099a6:	4614      	mov	r4, r2
 80099a8:	461a      	mov	r2, r3
 80099aa:	4b09      	ldr	r3, [pc, #36]	@ (80099d0 <__assert_func+0x2c>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4605      	mov	r5, r0
 80099b0:	68d8      	ldr	r0, [r3, #12]
 80099b2:	b14c      	cbz	r4, 80099c8 <__assert_func+0x24>
 80099b4:	4b07      	ldr	r3, [pc, #28]	@ (80099d4 <__assert_func+0x30>)
 80099b6:	9100      	str	r1, [sp, #0]
 80099b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099bc:	4906      	ldr	r1, [pc, #24]	@ (80099d8 <__assert_func+0x34>)
 80099be:	462b      	mov	r3, r5
 80099c0:	f000 f842 	bl	8009a48 <fiprintf>
 80099c4:	f000 f852 	bl	8009a6c <abort>
 80099c8:	4b04      	ldr	r3, [pc, #16]	@ (80099dc <__assert_func+0x38>)
 80099ca:	461c      	mov	r4, r3
 80099cc:	e7f3      	b.n	80099b6 <__assert_func+0x12>
 80099ce:	bf00      	nop
 80099d0:	20000930 	.word	0x20000930
 80099d4:	08010fcd 	.word	0x08010fcd
 80099d8:	08010fda 	.word	0x08010fda
 80099dc:	08011008 	.word	0x08011008

080099e0 <_calloc_r>:
 80099e0:	b570      	push	{r4, r5, r6, lr}
 80099e2:	fba1 5402 	umull	r5, r4, r1, r2
 80099e6:	b934      	cbnz	r4, 80099f6 <_calloc_r+0x16>
 80099e8:	4629      	mov	r1, r5
 80099ea:	f7fd fbc3 	bl	8007174 <_malloc_r>
 80099ee:	4606      	mov	r6, r0
 80099f0:	b928      	cbnz	r0, 80099fe <_calloc_r+0x1e>
 80099f2:	4630      	mov	r0, r6
 80099f4:	bd70      	pop	{r4, r5, r6, pc}
 80099f6:	220c      	movs	r2, #12
 80099f8:	6002      	str	r2, [r0, #0]
 80099fa:	2600      	movs	r6, #0
 80099fc:	e7f9      	b.n	80099f2 <_calloc_r+0x12>
 80099fe:	462a      	mov	r2, r5
 8009a00:	4621      	mov	r1, r4
 8009a02:	f7fe faa3 	bl	8007f4c <memset>
 8009a06:	e7f4      	b.n	80099f2 <_calloc_r+0x12>

08009a08 <__ascii_mbtowc>:
 8009a08:	b082      	sub	sp, #8
 8009a0a:	b901      	cbnz	r1, 8009a0e <__ascii_mbtowc+0x6>
 8009a0c:	a901      	add	r1, sp, #4
 8009a0e:	b142      	cbz	r2, 8009a22 <__ascii_mbtowc+0x1a>
 8009a10:	b14b      	cbz	r3, 8009a26 <__ascii_mbtowc+0x1e>
 8009a12:	7813      	ldrb	r3, [r2, #0]
 8009a14:	600b      	str	r3, [r1, #0]
 8009a16:	7812      	ldrb	r2, [r2, #0]
 8009a18:	1e10      	subs	r0, r2, #0
 8009a1a:	bf18      	it	ne
 8009a1c:	2001      	movne	r0, #1
 8009a1e:	b002      	add	sp, #8
 8009a20:	4770      	bx	lr
 8009a22:	4610      	mov	r0, r2
 8009a24:	e7fb      	b.n	8009a1e <__ascii_mbtowc+0x16>
 8009a26:	f06f 0001 	mvn.w	r0, #1
 8009a2a:	e7f8      	b.n	8009a1e <__ascii_mbtowc+0x16>

08009a2c <__ascii_wctomb>:
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	4608      	mov	r0, r1
 8009a30:	b141      	cbz	r1, 8009a44 <__ascii_wctomb+0x18>
 8009a32:	2aff      	cmp	r2, #255	@ 0xff
 8009a34:	d904      	bls.n	8009a40 <__ascii_wctomb+0x14>
 8009a36:	228a      	movs	r2, #138	@ 0x8a
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3e:	4770      	bx	lr
 8009a40:	700a      	strb	r2, [r1, #0]
 8009a42:	2001      	movs	r0, #1
 8009a44:	4770      	bx	lr
	...

08009a48 <fiprintf>:
 8009a48:	b40e      	push	{r1, r2, r3}
 8009a4a:	b503      	push	{r0, r1, lr}
 8009a4c:	4601      	mov	r1, r0
 8009a4e:	ab03      	add	r3, sp, #12
 8009a50:	4805      	ldr	r0, [pc, #20]	@ (8009a68 <fiprintf+0x20>)
 8009a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a56:	6800      	ldr	r0, [r0, #0]
 8009a58:	9301      	str	r3, [sp, #4]
 8009a5a:	f7ff fd5b 	bl	8009514 <_vfiprintf_r>
 8009a5e:	b002      	add	sp, #8
 8009a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a64:	b003      	add	sp, #12
 8009a66:	4770      	bx	lr
 8009a68:	20000930 	.word	0x20000930

08009a6c <abort>:
 8009a6c:	b508      	push	{r3, lr}
 8009a6e:	2006      	movs	r0, #6
 8009a70:	f000 f82c 	bl	8009acc <raise>
 8009a74:	2001      	movs	r0, #1
 8009a76:	f000 f9b3 	bl	8009de0 <_exit>

08009a7a <_raise_r>:
 8009a7a:	291f      	cmp	r1, #31
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	4605      	mov	r5, r0
 8009a80:	460c      	mov	r4, r1
 8009a82:	d904      	bls.n	8009a8e <_raise_r+0x14>
 8009a84:	2316      	movs	r3, #22
 8009a86:	6003      	str	r3, [r0, #0]
 8009a88:	f04f 30ff 	mov.w	r0, #4294967295
 8009a8c:	bd38      	pop	{r3, r4, r5, pc}
 8009a8e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009a90:	b112      	cbz	r2, 8009a98 <_raise_r+0x1e>
 8009a92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a96:	b94b      	cbnz	r3, 8009aac <_raise_r+0x32>
 8009a98:	4628      	mov	r0, r5
 8009a9a:	f000 f831 	bl	8009b00 <_getpid_r>
 8009a9e:	4622      	mov	r2, r4
 8009aa0:	4601      	mov	r1, r0
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009aa8:	f000 b818 	b.w	8009adc <_kill_r>
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d00a      	beq.n	8009ac6 <_raise_r+0x4c>
 8009ab0:	1c59      	adds	r1, r3, #1
 8009ab2:	d103      	bne.n	8009abc <_raise_r+0x42>
 8009ab4:	2316      	movs	r3, #22
 8009ab6:	6003      	str	r3, [r0, #0]
 8009ab8:	2001      	movs	r0, #1
 8009aba:	e7e7      	b.n	8009a8c <_raise_r+0x12>
 8009abc:	2100      	movs	r1, #0
 8009abe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	4798      	blx	r3
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	e7e0      	b.n	8009a8c <_raise_r+0x12>
	...

08009acc <raise>:
 8009acc:	4b02      	ldr	r3, [pc, #8]	@ (8009ad8 <raise+0xc>)
 8009ace:	4601      	mov	r1, r0
 8009ad0:	6818      	ldr	r0, [r3, #0]
 8009ad2:	f7ff bfd2 	b.w	8009a7a <_raise_r>
 8009ad6:	bf00      	nop
 8009ad8:	20000930 	.word	0x20000930

08009adc <_kill_r>:
 8009adc:	b538      	push	{r3, r4, r5, lr}
 8009ade:	4d07      	ldr	r5, [pc, #28]	@ (8009afc <_kill_r+0x20>)
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	4608      	mov	r0, r1
 8009ae6:	4611      	mov	r1, r2
 8009ae8:	602b      	str	r3, [r5, #0]
 8009aea:	f000 f969 	bl	8009dc0 <_kill>
 8009aee:	1c43      	adds	r3, r0, #1
 8009af0:	d102      	bne.n	8009af8 <_kill_r+0x1c>
 8009af2:	682b      	ldr	r3, [r5, #0]
 8009af4:	b103      	cbz	r3, 8009af8 <_kill_r+0x1c>
 8009af6:	6023      	str	r3, [r4, #0]
 8009af8:	bd38      	pop	{r3, r4, r5, pc}
 8009afa:	bf00      	nop
 8009afc:	20001520 	.word	0x20001520

08009b00 <_getpid_r>:
 8009b00:	f000 b956 	b.w	8009db0 <_getpid>

08009b04 <expf>:
 8009b04:	b508      	push	{r3, lr}
 8009b06:	ed2d 8b02 	vpush	{d8}
 8009b0a:	eef0 8a40 	vmov.f32	s17, s0
 8009b0e:	f000 f881 	bl	8009c14 <__ieee754_expf>
 8009b12:	eeb0 8a40 	vmov.f32	s16, s0
 8009b16:	eeb0 0a68 	vmov.f32	s0, s17
 8009b1a:	f000 f847 	bl	8009bac <finitef>
 8009b1e:	b160      	cbz	r0, 8009b3a <expf+0x36>
 8009b20:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8009b60 <expf+0x5c>
 8009b24:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b2c:	dd0a      	ble.n	8009b44 <expf+0x40>
 8009b2e:	f7fe fa6f 	bl	8008010 <__errno>
 8009b32:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8009b64 <expf+0x60>
 8009b36:	2322      	movs	r3, #34	@ 0x22
 8009b38:	6003      	str	r3, [r0, #0]
 8009b3a:	eeb0 0a48 	vmov.f32	s0, s16
 8009b3e:	ecbd 8b02 	vpop	{d8}
 8009b42:	bd08      	pop	{r3, pc}
 8009b44:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8009b68 <expf+0x64>
 8009b48:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b50:	d5f3      	bpl.n	8009b3a <expf+0x36>
 8009b52:	f7fe fa5d 	bl	8008010 <__errno>
 8009b56:	2322      	movs	r3, #34	@ 0x22
 8009b58:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8009b6c <expf+0x68>
 8009b5c:	6003      	str	r3, [r0, #0]
 8009b5e:	e7ec      	b.n	8009b3a <expf+0x36>
 8009b60:	42b17217 	.word	0x42b17217
 8009b64:	7f800000 	.word	0x7f800000
 8009b68:	c2cff1b5 	.word	0xc2cff1b5
 8009b6c:	00000000 	.word	0x00000000

08009b70 <sqrtf>:
 8009b70:	b508      	push	{r3, lr}
 8009b72:	ed2d 8b02 	vpush	{d8}
 8009b76:	eeb0 8a40 	vmov.f32	s16, s0
 8009b7a:	f000 f847 	bl	8009c0c <__ieee754_sqrtf>
 8009b7e:	eeb4 8a48 	vcmp.f32	s16, s16
 8009b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b86:	d60c      	bvs.n	8009ba2 <sqrtf+0x32>
 8009b88:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8009ba8 <sqrtf+0x38>
 8009b8c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b94:	d505      	bpl.n	8009ba2 <sqrtf+0x32>
 8009b96:	f7fe fa3b 	bl	8008010 <__errno>
 8009b9a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009b9e:	2321      	movs	r3, #33	@ 0x21
 8009ba0:	6003      	str	r3, [r0, #0]
 8009ba2:	ecbd 8b02 	vpop	{d8}
 8009ba6:	bd08      	pop	{r3, pc}
 8009ba8:	00000000 	.word	0x00000000

08009bac <finitef>:
 8009bac:	ee10 3a10 	vmov	r3, s0
 8009bb0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8009bb4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8009bb8:	bfac      	ite	ge
 8009bba:	2000      	movge	r0, #0
 8009bbc:	2001      	movlt	r0, #1
 8009bbe:	4770      	bx	lr

08009bc0 <with_errnof>:
 8009bc0:	b510      	push	{r4, lr}
 8009bc2:	ed2d 8b02 	vpush	{d8}
 8009bc6:	eeb0 8a40 	vmov.f32	s16, s0
 8009bca:	4604      	mov	r4, r0
 8009bcc:	f7fe fa20 	bl	8008010 <__errno>
 8009bd0:	eeb0 0a48 	vmov.f32	s0, s16
 8009bd4:	ecbd 8b02 	vpop	{d8}
 8009bd8:	6004      	str	r4, [r0, #0]
 8009bda:	bd10      	pop	{r4, pc}

08009bdc <xflowf>:
 8009bdc:	b130      	cbz	r0, 8009bec <xflowf+0x10>
 8009bde:	eef1 7a40 	vneg.f32	s15, s0
 8009be2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009be6:	2022      	movs	r0, #34	@ 0x22
 8009be8:	f7ff bfea 	b.w	8009bc0 <with_errnof>
 8009bec:	eef0 7a40 	vmov.f32	s15, s0
 8009bf0:	e7f7      	b.n	8009be2 <xflowf+0x6>
	...

08009bf4 <__math_uflowf>:
 8009bf4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009bfc <__math_uflowf+0x8>
 8009bf8:	f7ff bff0 	b.w	8009bdc <xflowf>
 8009bfc:	10000000 	.word	0x10000000

08009c00 <__math_oflowf>:
 8009c00:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009c08 <__math_oflowf+0x8>
 8009c04:	f7ff bfea 	b.w	8009bdc <xflowf>
 8009c08:	70000000 	.word	0x70000000

08009c0c <__ieee754_sqrtf>:
 8009c0c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009c10:	4770      	bx	lr
	...

08009c14 <__ieee754_expf>:
 8009c14:	ee10 2a10 	vmov	r2, s0
 8009c18:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8009c1c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009c20:	d902      	bls.n	8009c28 <__ieee754_expf+0x14>
 8009c22:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009c26:	4770      	bx	lr
 8009c28:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8009c2c:	d106      	bne.n	8009c3c <__ieee754_expf+0x28>
 8009c2e:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8009d68 <__ieee754_expf+0x154>
 8009c32:	2900      	cmp	r1, #0
 8009c34:	bf18      	it	ne
 8009c36:	eeb0 0a67 	vmovne.f32	s0, s15
 8009c3a:	4770      	bx	lr
 8009c3c:	484b      	ldr	r0, [pc, #300]	@ (8009d6c <__ieee754_expf+0x158>)
 8009c3e:	4282      	cmp	r2, r0
 8009c40:	dd02      	ble.n	8009c48 <__ieee754_expf+0x34>
 8009c42:	2000      	movs	r0, #0
 8009c44:	f7ff bfdc 	b.w	8009c00 <__math_oflowf>
 8009c48:	2a00      	cmp	r2, #0
 8009c4a:	da05      	bge.n	8009c58 <__ieee754_expf+0x44>
 8009c4c:	4a48      	ldr	r2, [pc, #288]	@ (8009d70 <__ieee754_expf+0x15c>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d902      	bls.n	8009c58 <__ieee754_expf+0x44>
 8009c52:	2000      	movs	r0, #0
 8009c54:	f7ff bfce 	b.w	8009bf4 <__math_uflowf>
 8009c58:	4a46      	ldr	r2, [pc, #280]	@ (8009d74 <__ieee754_expf+0x160>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8009c60:	d952      	bls.n	8009d08 <__ieee754_expf+0xf4>
 8009c62:	4a45      	ldr	r2, [pc, #276]	@ (8009d78 <__ieee754_expf+0x164>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8009c6a:	d834      	bhi.n	8009cd6 <__ieee754_expf+0xc2>
 8009c6c:	4b43      	ldr	r3, [pc, #268]	@ (8009d7c <__ieee754_expf+0x168>)
 8009c6e:	4413      	add	r3, r2
 8009c70:	ed93 7a00 	vldr	s14, [r3]
 8009c74:	4b42      	ldr	r3, [pc, #264]	@ (8009d80 <__ieee754_expf+0x16c>)
 8009c76:	4413      	add	r3, r2
 8009c78:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009c7c:	f081 0201 	eor.w	r2, r1, #1
 8009c80:	edd3 7a00 	vldr	s15, [r3]
 8009c84:	1a52      	subs	r2, r2, r1
 8009c86:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009c8a:	ee20 6a00 	vmul.f32	s12, s0, s0
 8009c8e:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8009d84 <__ieee754_expf+0x170>
 8009c92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009d88 <__ieee754_expf+0x174>
 8009c96:	eee6 6a05 	vfma.f32	s13, s12, s10
 8009c9a:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8009d8c <__ieee754_expf+0x178>
 8009c9e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009ca2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009d90 <__ieee754_expf+0x17c>
 8009ca6:	eee5 6a06 	vfma.f32	s13, s10, s12
 8009caa:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8009d94 <__ieee754_expf+0x180>
 8009cae:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009cb2:	eef0 6a40 	vmov.f32	s13, s0
 8009cb6:	eee5 6a46 	vfms.f32	s13, s10, s12
 8009cba:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8009cbe:	ee20 5a26 	vmul.f32	s10, s0, s13
 8009cc2:	bb92      	cbnz	r2, 8009d2a <__ieee754_expf+0x116>
 8009cc4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8009cc8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009ccc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009cd0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8009cd4:	4770      	bx	lr
 8009cd6:	4b30      	ldr	r3, [pc, #192]	@ (8009d98 <__ieee754_expf+0x184>)
 8009cd8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8009d9c <__ieee754_expf+0x188>
 8009cdc:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8009da0 <__ieee754_expf+0x18c>
 8009ce0:	4413      	add	r3, r2
 8009ce2:	edd3 7a00 	vldr	s15, [r3]
 8009ce6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009cea:	eeb0 7a40 	vmov.f32	s14, s0
 8009cee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009cf2:	ee17 2a90 	vmov	r2, s15
 8009cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cfa:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009cfe:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8009da4 <__ieee754_expf+0x190>
 8009d02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009d06:	e7be      	b.n	8009c86 <__ieee754_expf+0x72>
 8009d08:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8009d0c:	d20b      	bcs.n	8009d26 <__ieee754_expf+0x112>
 8009d0e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009da8 <__ieee754_expf+0x194>
 8009d12:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009d16:	eef4 6ae5 	vcmpe.f32	s13, s11
 8009d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d1e:	dd02      	ble.n	8009d26 <__ieee754_expf+0x112>
 8009d20:	ee30 0a25 	vadd.f32	s0, s0, s11
 8009d24:	4770      	bx	lr
 8009d26:	2200      	movs	r2, #0
 8009d28:	e7af      	b.n	8009c8a <__ieee754_expf+0x76>
 8009d2a:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009d2e:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8009d32:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8009d36:	bfb8      	it	lt
 8009d38:	3264      	addlt	r2, #100	@ 0x64
 8009d3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009d3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d42:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009d46:	ee17 3a90 	vmov	r3, s15
 8009d4a:	bfab      	itete	ge
 8009d4c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8009d50:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009d54:	ee00 3a10 	vmovge	s0, r3
 8009d58:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8009dac <__ieee754_expf+0x198>
 8009d5c:	bfbc      	itt	lt
 8009d5e:	ee00 3a10 	vmovlt	s0, r3
 8009d62:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8009d66:	4770      	bx	lr
 8009d68:	00000000 	.word	0x00000000
 8009d6c:	42b17217 	.word	0x42b17217
 8009d70:	42cff1b5 	.word	0x42cff1b5
 8009d74:	3eb17218 	.word	0x3eb17218
 8009d78:	3f851591 	.word	0x3f851591
 8009d7c:	08011214 	.word	0x08011214
 8009d80:	0801120c 	.word	0x0801120c
 8009d84:	3331bb4c 	.word	0x3331bb4c
 8009d88:	b5ddea0e 	.word	0xb5ddea0e
 8009d8c:	388ab355 	.word	0x388ab355
 8009d90:	bb360b61 	.word	0xbb360b61
 8009d94:	3e2aaaab 	.word	0x3e2aaaab
 8009d98:	0801121c 	.word	0x0801121c
 8009d9c:	3fb8aa3b 	.word	0x3fb8aa3b
 8009da0:	3f317180 	.word	0x3f317180
 8009da4:	3717f7d1 	.word	0x3717f7d1
 8009da8:	7149f2ca 	.word	0x7149f2ca
 8009dac:	0d800000 	.word	0x0d800000

08009db0 <_getpid>:
 8009db0:	4b02      	ldr	r3, [pc, #8]	@ (8009dbc <_getpid+0xc>)
 8009db2:	2258      	movs	r2, #88	@ 0x58
 8009db4:	601a      	str	r2, [r3, #0]
 8009db6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dba:	4770      	bx	lr
 8009dbc:	20001520 	.word	0x20001520

08009dc0 <_kill>:
 8009dc0:	4b02      	ldr	r3, [pc, #8]	@ (8009dcc <_kill+0xc>)
 8009dc2:	2258      	movs	r2, #88	@ 0x58
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dca:	4770      	bx	lr
 8009dcc:	20001520 	.word	0x20001520

08009dd0 <_write>:
 8009dd0:	4b02      	ldr	r3, [pc, #8]	@ (8009ddc <_write+0xc>)
 8009dd2:	2258      	movs	r2, #88	@ 0x58
 8009dd4:	601a      	str	r2, [r3, #0]
 8009dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dda:	4770      	bx	lr
 8009ddc:	20001520 	.word	0x20001520

08009de0 <_exit>:
 8009de0:	e7fe      	b.n	8009de0 <_exit>
	...

08009de4 <_init>:
 8009de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de6:	bf00      	nop
 8009de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dea:	bc08      	pop	{r3}
 8009dec:	469e      	mov	lr, r3
 8009dee:	4770      	bx	lr

08009df0 <_fini>:
 8009df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df2:	bf00      	nop
 8009df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009df6:	bc08      	pop	{r3}
 8009df8:	469e      	mov	lr, r3
 8009dfa:	4770      	bx	lr
