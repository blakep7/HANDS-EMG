
HANDS-EMG-FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c88  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002cb80  08005e34  08005e34  00006e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080329b4  080329b4  0003405c  2**0
                  CONTENTS
  4 .ARM          00000008  080329b4  080329b4  000339b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080329bc  080329bc  0003405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080329bc  080329bc  000339bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080329c0  080329c0  000339c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080329c4  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006f30  2000005c  08032a20  0003405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006f8c  08032a20  00034f8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5a0  00000000  00000000  0003408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020fa  00000000  00000000  0004262c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00044728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000987  00000000  00000000  00045390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b48  00000000  00000000  00045d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efcd  00000000  00000000  0006f85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc7f2  00000000  00000000  0007e82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000087  00000000  00000000  0017b01e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003760  00000000  00000000  0017b0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0017e808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000005c 	.word	0x2000005c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005e1c 	.word	0x08005e1c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000060 	.word	0x20000060
 80001e8:	08005e1c 	.word	0x08005e1c

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__aeabi_d2f>:
 8000988:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800098c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000990:	bf24      	itt	cs
 8000992:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000996:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800099a:	d90d      	bls.n	80009b8 <__aeabi_d2f+0x30>
 800099c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009bc:	d121      	bne.n	8000a02 <__aeabi_d2f+0x7a>
 80009be:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009c2:	bfbc      	itt	lt
 80009c4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009c8:	4770      	bxlt	lr
 80009ca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d2:	f1c2 0218 	rsb	r2, r2, #24
 80009d6:	f1c2 0c20 	rsb	ip, r2, #32
 80009da:	fa10 f30c 	lsls.w	r3, r0, ip
 80009de:	fa20 f002 	lsr.w	r0, r0, r2
 80009e2:	bf18      	it	ne
 80009e4:	f040 0001 	orrne.w	r0, r0, #1
 80009e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f4:	ea40 000c 	orr.w	r0, r0, ip
 80009f8:	fa23 f302 	lsr.w	r3, r3, r2
 80009fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a00:	e7cc      	b.n	800099c <__aeabi_d2f+0x14>
 8000a02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a06:	d107      	bne.n	8000a18 <__aeabi_d2f+0x90>
 8000a08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a0c:	bf1e      	ittt	ne
 8000a0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a16:	4770      	bxne	lr
 8000a18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_uldivmod>:
 8000a28:	b953      	cbnz	r3, 8000a40 <__aeabi_uldivmod+0x18>
 8000a2a:	b94a      	cbnz	r2, 8000a40 <__aeabi_uldivmod+0x18>
 8000a2c:	2900      	cmp	r1, #0
 8000a2e:	bf08      	it	eq
 8000a30:	2800      	cmpeq	r0, #0
 8000a32:	bf1c      	itt	ne
 8000a34:	f04f 31ff 	movne.w	r1, #4294967295
 8000a38:	f04f 30ff 	movne.w	r0, #4294967295
 8000a3c:	f000 b96a 	b.w	8000d14 <__aeabi_idiv0>
 8000a40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a48:	f000 f806 	bl	8000a58 <__udivmoddi4>
 8000a4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a54:	b004      	add	sp, #16
 8000a56:	4770      	bx	lr

08000a58 <__udivmoddi4>:
 8000a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a5c:	9d08      	ldr	r5, [sp, #32]
 8000a5e:	460c      	mov	r4, r1
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d14e      	bne.n	8000b02 <__udivmoddi4+0xaa>
 8000a64:	4694      	mov	ip, r2
 8000a66:	458c      	cmp	ip, r1
 8000a68:	4686      	mov	lr, r0
 8000a6a:	fab2 f282 	clz	r2, r2
 8000a6e:	d962      	bls.n	8000b36 <__udivmoddi4+0xde>
 8000a70:	b14a      	cbz	r2, 8000a86 <__udivmoddi4+0x2e>
 8000a72:	f1c2 0320 	rsb	r3, r2, #32
 8000a76:	4091      	lsls	r1, r2
 8000a78:	fa20 f303 	lsr.w	r3, r0, r3
 8000a7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a80:	4319      	orrs	r1, r3
 8000a82:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a8a:	fa1f f68c 	uxth.w	r6, ip
 8000a8e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a96:	fb07 1114 	mls	r1, r7, r4, r1
 8000a9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9e:	fb04 f106 	mul.w	r1, r4, r6
 8000aa2:	4299      	cmp	r1, r3
 8000aa4:	d90a      	bls.n	8000abc <__udivmoddi4+0x64>
 8000aa6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aaa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000aae:	f080 8112 	bcs.w	8000cd6 <__udivmoddi4+0x27e>
 8000ab2:	4299      	cmp	r1, r3
 8000ab4:	f240 810f 	bls.w	8000cd6 <__udivmoddi4+0x27e>
 8000ab8:	3c02      	subs	r4, #2
 8000aba:	4463      	add	r3, ip
 8000abc:	1a59      	subs	r1, r3, r1
 8000abe:	fa1f f38e 	uxth.w	r3, lr
 8000ac2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ac6:	fb07 1110 	mls	r1, r7, r0, r1
 8000aca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ace:	fb00 f606 	mul.w	r6, r0, r6
 8000ad2:	429e      	cmp	r6, r3
 8000ad4:	d90a      	bls.n	8000aec <__udivmoddi4+0x94>
 8000ad6:	eb1c 0303 	adds.w	r3, ip, r3
 8000ada:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ade:	f080 80fc 	bcs.w	8000cda <__udivmoddi4+0x282>
 8000ae2:	429e      	cmp	r6, r3
 8000ae4:	f240 80f9 	bls.w	8000cda <__udivmoddi4+0x282>
 8000ae8:	4463      	add	r3, ip
 8000aea:	3802      	subs	r0, #2
 8000aec:	1b9b      	subs	r3, r3, r6
 8000aee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000af2:	2100      	movs	r1, #0
 8000af4:	b11d      	cbz	r5, 8000afe <__udivmoddi4+0xa6>
 8000af6:	40d3      	lsrs	r3, r2
 8000af8:	2200      	movs	r2, #0
 8000afa:	e9c5 3200 	strd	r3, r2, [r5]
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d905      	bls.n	8000b12 <__udivmoddi4+0xba>
 8000b06:	b10d      	cbz	r5, 8000b0c <__udivmoddi4+0xb4>
 8000b08:	e9c5 0100 	strd	r0, r1, [r5]
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4608      	mov	r0, r1
 8000b10:	e7f5      	b.n	8000afe <__udivmoddi4+0xa6>
 8000b12:	fab3 f183 	clz	r1, r3
 8000b16:	2900      	cmp	r1, #0
 8000b18:	d146      	bne.n	8000ba8 <__udivmoddi4+0x150>
 8000b1a:	42a3      	cmp	r3, r4
 8000b1c:	d302      	bcc.n	8000b24 <__udivmoddi4+0xcc>
 8000b1e:	4290      	cmp	r0, r2
 8000b20:	f0c0 80f0 	bcc.w	8000d04 <__udivmoddi4+0x2ac>
 8000b24:	1a86      	subs	r6, r0, r2
 8000b26:	eb64 0303 	sbc.w	r3, r4, r3
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	2d00      	cmp	r5, #0
 8000b2e:	d0e6      	beq.n	8000afe <__udivmoddi4+0xa6>
 8000b30:	e9c5 6300 	strd	r6, r3, [r5]
 8000b34:	e7e3      	b.n	8000afe <__udivmoddi4+0xa6>
 8000b36:	2a00      	cmp	r2, #0
 8000b38:	f040 8090 	bne.w	8000c5c <__udivmoddi4+0x204>
 8000b3c:	eba1 040c 	sub.w	r4, r1, ip
 8000b40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b44:	fa1f f78c 	uxth.w	r7, ip
 8000b48:	2101      	movs	r1, #1
 8000b4a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b52:	fb08 4416 	mls	r4, r8, r6, r4
 8000b56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b5a:	fb07 f006 	mul.w	r0, r7, r6
 8000b5e:	4298      	cmp	r0, r3
 8000b60:	d908      	bls.n	8000b74 <__udivmoddi4+0x11c>
 8000b62:	eb1c 0303 	adds.w	r3, ip, r3
 8000b66:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b6a:	d202      	bcs.n	8000b72 <__udivmoddi4+0x11a>
 8000b6c:	4298      	cmp	r0, r3
 8000b6e:	f200 80cd 	bhi.w	8000d0c <__udivmoddi4+0x2b4>
 8000b72:	4626      	mov	r6, r4
 8000b74:	1a1c      	subs	r4, r3, r0
 8000b76:	fa1f f38e 	uxth.w	r3, lr
 8000b7a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b7e:	fb08 4410 	mls	r4, r8, r0, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb00 f707 	mul.w	r7, r0, r7
 8000b8a:	429f      	cmp	r7, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x148>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x146>
 8000b98:	429f      	cmp	r7, r3
 8000b9a:	f200 80b0 	bhi.w	8000cfe <__udivmoddi4+0x2a6>
 8000b9e:	4620      	mov	r0, r4
 8000ba0:	1bdb      	subs	r3, r3, r7
 8000ba2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba6:	e7a5      	b.n	8000af4 <__udivmoddi4+0x9c>
 8000ba8:	f1c1 0620 	rsb	r6, r1, #32
 8000bac:	408b      	lsls	r3, r1
 8000bae:	fa22 f706 	lsr.w	r7, r2, r6
 8000bb2:	431f      	orrs	r7, r3
 8000bb4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bb8:	fa04 f301 	lsl.w	r3, r4, r1
 8000bbc:	ea43 030c 	orr.w	r3, r3, ip
 8000bc0:	40f4      	lsrs	r4, r6
 8000bc2:	fa00 f801 	lsl.w	r8, r0, r1
 8000bc6:	0c38      	lsrs	r0, r7, #16
 8000bc8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bcc:	fbb4 fef0 	udiv	lr, r4, r0
 8000bd0:	fa1f fc87 	uxth.w	ip, r7
 8000bd4:	fb00 441e 	mls	r4, r0, lr, r4
 8000bd8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bdc:	fb0e f90c 	mul.w	r9, lr, ip
 8000be0:	45a1      	cmp	r9, r4
 8000be2:	fa02 f201 	lsl.w	r2, r2, r1
 8000be6:	d90a      	bls.n	8000bfe <__udivmoddi4+0x1a6>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bee:	f080 8084 	bcs.w	8000cfa <__udivmoddi4+0x2a2>
 8000bf2:	45a1      	cmp	r9, r4
 8000bf4:	f240 8081 	bls.w	8000cfa <__udivmoddi4+0x2a2>
 8000bf8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bfc:	443c      	add	r4, r7
 8000bfe:	eba4 0409 	sub.w	r4, r4, r9
 8000c02:	fa1f f983 	uxth.w	r9, r3
 8000c06:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c0a:	fb00 4413 	mls	r4, r0, r3, r4
 8000c0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c12:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	d907      	bls.n	8000c2a <__udivmoddi4+0x1d2>
 8000c1a:	193c      	adds	r4, r7, r4
 8000c1c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c20:	d267      	bcs.n	8000cf2 <__udivmoddi4+0x29a>
 8000c22:	45a4      	cmp	ip, r4
 8000c24:	d965      	bls.n	8000cf2 <__udivmoddi4+0x29a>
 8000c26:	3b02      	subs	r3, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c2e:	fba0 9302 	umull	r9, r3, r0, r2
 8000c32:	eba4 040c 	sub.w	r4, r4, ip
 8000c36:	429c      	cmp	r4, r3
 8000c38:	46ce      	mov	lr, r9
 8000c3a:	469c      	mov	ip, r3
 8000c3c:	d351      	bcc.n	8000ce2 <__udivmoddi4+0x28a>
 8000c3e:	d04e      	beq.n	8000cde <__udivmoddi4+0x286>
 8000c40:	b155      	cbz	r5, 8000c58 <__udivmoddi4+0x200>
 8000c42:	ebb8 030e 	subs.w	r3, r8, lr
 8000c46:	eb64 040c 	sbc.w	r4, r4, ip
 8000c4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c4e:	40cb      	lsrs	r3, r1
 8000c50:	431e      	orrs	r6, r3
 8000c52:	40cc      	lsrs	r4, r1
 8000c54:	e9c5 6400 	strd	r6, r4, [r5]
 8000c58:	2100      	movs	r1, #0
 8000c5a:	e750      	b.n	8000afe <__udivmoddi4+0xa6>
 8000c5c:	f1c2 0320 	rsb	r3, r2, #32
 8000c60:	fa20 f103 	lsr.w	r1, r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa24 f303 	lsr.w	r3, r4, r3
 8000c6c:	4094      	lsls	r4, r2
 8000c6e:	430c      	orrs	r4, r1
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c78:	fa1f f78c 	uxth.w	r7, ip
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3110 	mls	r1, r8, r0, r3
 8000c84:	0c23      	lsrs	r3, r4, #16
 8000c86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8a:	fb00 f107 	mul.w	r1, r0, r7
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x24c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c9a:	d22c      	bcs.n	8000cf6 <__udivmoddi4+0x29e>
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	d92a      	bls.n	8000cf6 <__udivmoddi4+0x29e>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1a5b      	subs	r3, r3, r1
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cac:	fb08 3311 	mls	r3, r8, r1, r3
 8000cb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb4:	fb01 f307 	mul.w	r3, r1, r7
 8000cb8:	42a3      	cmp	r3, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x276>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cc4:	d213      	bcs.n	8000cee <__udivmoddi4+0x296>
 8000cc6:	42a3      	cmp	r3, r4
 8000cc8:	d911      	bls.n	8000cee <__udivmoddi4+0x296>
 8000cca:	3902      	subs	r1, #2
 8000ccc:	4464      	add	r4, ip
 8000cce:	1ae4      	subs	r4, r4, r3
 8000cd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cd4:	e739      	b.n	8000b4a <__udivmoddi4+0xf2>
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	e6f0      	b.n	8000abc <__udivmoddi4+0x64>
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e706      	b.n	8000aec <__udivmoddi4+0x94>
 8000cde:	45c8      	cmp	r8, r9
 8000ce0:	d2ae      	bcs.n	8000c40 <__udivmoddi4+0x1e8>
 8000ce2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ce6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cea:	3801      	subs	r0, #1
 8000cec:	e7a8      	b.n	8000c40 <__udivmoddi4+0x1e8>
 8000cee:	4631      	mov	r1, r6
 8000cf0:	e7ed      	b.n	8000cce <__udivmoddi4+0x276>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	e799      	b.n	8000c2a <__udivmoddi4+0x1d2>
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	e7d4      	b.n	8000ca4 <__udivmoddi4+0x24c>
 8000cfa:	46d6      	mov	lr, sl
 8000cfc:	e77f      	b.n	8000bfe <__udivmoddi4+0x1a6>
 8000cfe:	4463      	add	r3, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e74d      	b.n	8000ba0 <__udivmoddi4+0x148>
 8000d04:	4606      	mov	r6, r0
 8000d06:	4623      	mov	r3, r4
 8000d08:	4608      	mov	r0, r1
 8000d0a:	e70f      	b.n	8000b2c <__udivmoddi4+0xd4>
 8000d0c:	3e02      	subs	r6, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	e730      	b.n	8000b74 <__udivmoddi4+0x11c>
 8000d12:	bf00      	nop

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <ads1299_send_byte>:
 * @param hspi
 * @param command
 * @return Zero if successful, or an error code if unsuccessful.
 */
static inline ads1299_error_t ads1299_send_byte(SPI_HandleTypeDef *hspi, uint8_t command)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2110      	movs	r1, #16
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d2c:	f001 fa3e 	bl	80021ac <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(hspi, &command, 1, HAL_MAX_DELAY);
 8000d30:	1cf9      	adds	r1, r7, #3
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	2201      	movs	r2, #1
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f002 fe76 	bl	8003a2a <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2110      	movs	r1, #16
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d46:	f001 fa31 	bl	80021ac <HAL_GPIO_WritePin>

    return ADS1299_STATUS_OK;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <ads1299_device_init>:
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00
};

ads1299_error_t ads1299_device_init(SPI_HandleTypeDef *hspi, uint8_t init_regs) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]
//	HAL_GPIO_WritePin(ADS1299_NPWDN_GPIO_Port, ADS1299_NPWDN_Pin, GPIO_PIN_RESET);
//	HAL_Delay(2);
//	HAL_GPIO_WritePin(ADS1299_NPWDN_GPIO_Port, ADS1299_NPWDN_Pin, GPIO_PIN_SET);

	/* Allow oscillator warm-up */
	HAL_Delay(1500);
 8000d60:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000d64:	f000 ff1a 	bl	8001b9c <HAL_Delay>

	HAL_GPIO_WritePin(ADS1299_NRESET_GPIO_Port, ADS1299_NRESET_Pin, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2120      	movs	r1, #32
 8000d6c:	4833      	ldr	r0, [pc, #204]	@ (8000e3c <ads1299_device_init+0xe8>)
 8000d6e:	f001 fa1d 	bl	80021ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f000 ff12 	bl	8001b9c <HAL_Delay>
	HAL_GPIO_WritePin(ADS1299_NRESET_GPIO_Port, ADS1299_NRESET_Pin, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	482f      	ldr	r0, [pc, #188]	@ (8000e3c <ads1299_device_init+0xe8>)
 8000d7e:	f001 fa15 	bl	80021ac <HAL_GPIO_WritePin>

	HAL_Delay(1500);
 8000d82:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000d86:	f000 ff09 	bl	8001b9c <HAL_Delay>


	/* Tell chip to exit continuous data mode */
	ads1299_send_byte(hspi, ADS1299_COMMAND_SDATAC);
 8000d8a:	2111      	movs	r1, #17
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ffc3 	bl	8000d18 <ads1299_send_byte>
	/* Stop taking conversions; apparently not done automatically */
	ads1299_send_byte(hspi, ADS1299_COMMAND_STOP);
 8000d92:	210a      	movs	r1, #10
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ffbf 	bl	8000d18 <ads1299_send_byte>

	if (init_regs)
 8000d9a:	78fb      	ldrb	r3, [r7, #3]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d048      	beq.n	8000e32 <ads1299_device_init+0xde>
	{

		/* Write to GPIO register, set all pins to driven-low output */
		ads1299_wreg(hspi, ADS1299_ADDRESS_REG_GPIO, ADS1299_REG_GPIO_GPIOC4_OUTPUT |
 8000da0:	2200      	movs	r2, #0
 8000da2:	2114      	movs	r1, #20
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 f84b 	bl	8000e40 <ads1299_wreg>
		ADS1299_REG_GPIO_GPIOD2_LOW    |
		ADS1299_REG_GPIO_GPIOC1_OUTPUT |
		ADS1299_REG_GPIO_GPIOD1_LOW    );

		/* Write to CONFIG1, set data rate to 2000 Hz */
		ads1299_wreg(hspi, ADS1299_ADDRESS_REG_CONFIG1, ADS1299_REG_CONFIG1_RESERVED_VALUE |
 8000daa:	2293      	movs	r2, #147	@ 0x93
 8000dac:	2101      	movs	r1, #1
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 f846 	bl	8000e40 <ads1299_wreg>
		ADS1299_REG_CONFIG1_FMOD_DIV_BY_512);

		/* Write to CONFIG2 register, generate test signal internally */
		ads1299_wreg(hspi, ADS1299_ADDRESS_REG_CONFIG2, ADS1299_REG_CONFIG2_RESERVED_VALUE |
 8000db4:	22d0      	movs	r2, #208	@ 0xd0
 8000db6:	2102      	movs	r1, #2
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f000 f841 	bl	8000e40 <ads1299_wreg>
		ADS1299_REG_CONFIG2_CAL_INT        |
		ADS1299_REG_CONFIG2_CAL_PULSE_FCLK_DIV_2_21);

		/* Write to CONFIG3, enable internal reference buffer, bias internally generated, bias buffer enabled */
		ads1299_wreg(hspi, ADS1299_ADDRESS_REG_CONFIG3, ADS1299_REG_CONFIG3_REFBUF_ENABLED |
 8000dbe:	22fc      	movs	r2, #252	@ 0xfc
 8000dc0:	2103      	movs	r1, #3
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 f83c 	bl	8000e40 <ads1299_wreg>
		ADS1299_REG_CONFIG3_BIAS_MEAS_ENABLED |
		ADS1299_REG_CONFIG3_BIASREF_INT    |
		ADS1299_REG_CONFIG3_BIASBUF_ENABLED);

		/* Reference settling time */
		HAL_Delay(150);
 8000dc8:	2096      	movs	r0, #150	@ 0x96
 8000dca:	f000 fee7 	bl	8001b9c <HAL_Delay>

		/* Write to CH1 settings register, set as normal input, gain 24 */
		ads1299_wreg(hspi, ADS1299_ADDRESS_REG_CH1SET, ADS1299_REG_CHNSET_CHANNEL_ON			|
 8000dce:	2260      	movs	r2, #96	@ 0x60
 8000dd0:	2105      	movs	r1, #5
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f000 f834 	bl	8000e40 <ads1299_wreg>
		ADS1299_REG_CHNSET_GAIN_24		|
		ADS1299_REG_CHNSET_SRB2_DISCONNECTED	|
		ADS1299_REG_CHNSET_NORMAL_ELECTRODE);
		/* Write to CH2 settings register, set as normal input, gain 24 */
		ads1299_wreg(hspi, ADS1299_ADDRESS_REG_CH2SET, ADS1299_REG_CHNSET_CHANNEL_ON			|
 8000dd8:	2260      	movs	r2, #96	@ 0x60
 8000dda:	2106      	movs	r1, #6
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f000 f82f 	bl	8000e40 <ads1299_wreg>
		ADS1299_REG_CHNSET_GAIN_24			|
		ADS1299_REG_CHNSET_SRB2_DISCONNECTED	|
		ADS1299_REG_CHNSET_NORMAL_ELECTRODE);
		/* Write to CH3 settings register, set as normal input, gain 24 */
		ads1299_wreg(hspi, ADS1299_ADDRESS_REG_CH3SET, ADS1299_REG_CHNSET_CHANNEL_ON			|
 8000de2:	2260      	movs	r2, #96	@ 0x60
 8000de4:	2107      	movs	r1, #7
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f000 f82a 	bl	8000e40 <ads1299_wreg>
		ADS1299_REG_CHNSET_GAIN_24			|
		ADS1299_REG_CHNSET_SRB2_DISCONNECTED	|
		ADS1299_REG_CHNSET_NORMAL_ELECTRODE);
		/* Write to CH4 settings register, set as normal input, gain 24 */
		ads1299_wreg(hspi, ADS1299_ADDRESS_REG_CH4SET, ADS1299_REG_CHNSET_CHANNEL_ON			|
 8000dec:	2260      	movs	r2, #96	@ 0x60
 8000dee:	2108      	movs	r1, #8
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f000 f825 	bl	8000e40 <ads1299_wreg>
		ADS1299_REG_CHNSET_GAIN_24			|
		ADS1299_REG_CHNSET_SRB2_DISCONNECTED	|
		ADS1299_REG_CHNSET_NORMAL_ELECTRODE);
		/* Write to CH5 settings register, set as normal input, gain 24 */
		ads1299_wreg(hspi, ADS1299_ADDRESS_REG_CH5SET, 0x00);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2109      	movs	r1, #9
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 f820 	bl	8000e40 <ads1299_wreg>
		/* Write to CH6 settings register, set as normal input, gain 24 */
		ads1299_wreg(hspi, ADS1299_ADDRESS_REG_CH6SET, 0x00);
 8000e00:	2200      	movs	r2, #0
 8000e02:	210a      	movs	r1, #10
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f000 f81b 	bl	8000e40 <ads1299_wreg>
		/* Write to CH7 settings register, set as normal input, gain 24 */
		ads1299_wreg(hspi, ADS1299_ADDRESS_REG_CH7SET, 0x00);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	210b      	movs	r1, #11
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f000 f816 	bl	8000e40 <ads1299_wreg>
		/* Write to CH8 settings register, set as normal input, gain 24 */
		ads1299_wreg(hspi, ADS1299_ADDRESS_REG_CH8SET, 0x00);
 8000e14:	2200      	movs	r2, #0
 8000e16:	210c      	movs	r1, #12
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 f811 	bl	8000e40 <ads1299_wreg>

		ads1299_wreg(hspi, ADS1299_ADDRESS_REG_BIAS_SENSP, ADS1299_REG_BIAS_SENSP_BIASP1    |
 8000e1e:	220f      	movs	r2, #15
 8000e20:	210d      	movs	r1, #13
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f000 f80c 	bl	8000e40 <ads1299_wreg>
		ADS1299_REG_BIAS_SENSP_BIASP2    |
		ADS1299_REG_BIAS_SENSP_BIASP3    |
		ADS1299_REG_BIAS_SENSP_BIASP4   );

		ads1299_wreg(hspi, ADS1299_ADDRESS_REG_BIAS_SENSN, ADS1299_REG_BIAS_SENSN_BIASN1    |
 8000e28:	220f      	movs	r2, #15
 8000e2a:	210e      	movs	r1, #14
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 f807 	bl	8000e40 <ads1299_wreg>


		/* Write to MISC1 register, SRB1 on (ref electrode) */
//		ads1299_wreg(hspi, ADS1299_ADDRESS_REG_MISC1, ADS1299_REG_MISC1_SRB1_OFF);
	}
	return ADS1299_STATUS_OK;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	48000800 	.word	0x48000800

08000e40 <ads1299_wreg>:

	return ADS1299_STATUS_OK;
}

ads1299_error_t ads1299_wreg(SPI_HandleTypeDef *hspi, uint8_t reg_addr, uint8_t reg_val_to_write)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	70fb      	strb	r3, [r7, #3]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2110      	movs	r1, #16
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e58:	f001 f9a8 	bl	80021ac <HAL_GPIO_WritePin>

	/* First byte: write command for specified register */
	/* Second byte: number of registers to write (1) */
	/* Third byte: write register value */
	HAL_SPI_Transmit(hspi, (uint8_t[]){ ADS1299_COMMAND_WREG | reg_addr, 0x00, reg_val_to_write }, 3, HAL_MAX_DELAY);
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	733b      	strb	r3, [r7, #12]
 8000e66:	2300      	movs	r3, #0
 8000e68:	737b      	strb	r3, [r7, #13]
 8000e6a:	78bb      	ldrb	r3, [r7, #2]
 8000e6c:	73bb      	strb	r3, [r7, #14]
 8000e6e:	f107 010c 	add.w	r1, r7, #12
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	2203      	movs	r2, #3
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f002 fdd6 	bl	8003a2a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2110      	movs	r1, #16
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e86:	f001 f991 	bl	80021ac <HAL_GPIO_WritePin>

	return ADS1299_STATUS_OK;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <ads1299_read_data_IT>:

	return ADS1299_STATUS_OK;
}

ads1299_error_t ads1299_read_data_IT(SPI_HandleTypeDef *hspi)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea4:	f001 f982 	bl	80021ac <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(hspi, (uint8_t[]){ADS1299_COMMAND_RDATA}, 1, HAL_MAX_DELAY);
 8000ea8:	2312      	movs	r3, #18
 8000eaa:	733b      	strb	r3, [r7, #12]
 8000eac:	f107 010c 	add.w	r1, r7, #12
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f002 fdb7 	bl	8003a2a <HAL_SPI_Transmit>

	HAL_SPI_TransmitReceive_IT(hspi, tx_buf, (uint8_t *)RX_BUFF, BUFF_SIZE);
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <ads1299_read_data_IT+0x40>)
 8000ec0:	4905      	ldr	r1, [pc, #20]	@ (8000ed8 <ads1299_read_data_IT+0x44>)
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f002 ff28 	bl	8003d18 <HAL_SPI_TransmitReceive_IT>

	return ADS1299_STATUS_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000078 	.word	0x20000078
 8000ed8:	08005e34 	.word	0x08005e34

08000edc <ads1299_data_to_float>:

float ads1299_data_to_float(uint32_t raw_value)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	// Check if the 24th bit (MSB) is set (negative number in two's complement)
	int32_t signedValue = (raw_value & 0x800000) ? (0xFF000000 | raw_value) : raw_value;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <ads1299_data_to_float+0x1a>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8000ef4:	e000      	b.n	8000ef8 <ads1299_data_to_float+0x1c>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	60fb      	str	r3, [r7, #12]

	// Convert to voltage using the full-scale range and gain
	return signedValue * ADS1299_ONE_LSB;
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f7ff fac8 	bl	8000490 <__aeabi_i2d>
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <ads1299_data_to_float+0x5c>)
 8000f06:	f7ff fb2d 	bl	8000564 <__aeabi_dmul>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <ads1299_data_to_float+0x60>)
 8000f18:	f7ff fc4e 	bl	80007b8 <__aeabi_ddiv>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f7ff fd30 	bl	8000988 <__aeabi_d2f>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	ee07 3a90 	vmov	s15, r3

}
 8000f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40120000 	.word	0x40120000
 8000f3c:	41a80000 	.word	0x41a80000

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f46:	f000 fdb4 	bl	8001ab2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4a:	f000 f837 	bl	8000fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4e:	f000 f8f9 	bl	8001144 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f52:	f000 f887 	bl	8001064 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000f56:	f000 f8c3 	bl	80010e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Enable digital I/O to default state ADS1299
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2110      	movs	r1, #16
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f62:	f001 f923 	bl	80021ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ADS1299_NRESET_GPIO_Port, ADS1299_NRESET_Pin, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	2120      	movs	r1, #32
 8000f6a:	4810      	ldr	r0, [pc, #64]	@ (8000fac <main+0x6c>)
 8000f6c:	f001 f91e 	bl	80021ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ADS1299_NPWDN_GPIO_Port, ADS1299_NPWDN_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2110      	movs	r1, #16
 8000f74:	480d      	ldr	r0, [pc, #52]	@ (8000fac <main+0x6c>)
 8000f76:	f001 f919 	bl	80021ac <HAL_GPIO_WritePin>

    // Initialize ADS1299
    ads1299_device_init(&hspi1, 1);
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <main+0x70>)
 8000f7e:	f7ff fee9 	bl	8000d54 <ads1299_device_init>
    HAL_Delay(1000);
 8000f82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f86:	f000 fe09 	bl	8001b9c <HAL_Delay>
    HAL_GPIO_WritePin(ADS1299_START_GPIO_Port, ADS1299_START_Pin, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	4809      	ldr	r0, [pc, #36]	@ (8000fb4 <main+0x74>)
 8000f90:	f001 f90c 	bl	80021ac <HAL_GPIO_WritePin>

    // Initialize ML
    enum neai_state error_code = neai_classification_init(knowledge);
 8000f94:	4808      	ldr	r0, [pc, #32]	@ (8000fb8 <main+0x78>)
 8000f96:	f004 f8e5 	bl	8005164 <neai_classification_init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
    if (error_code != NEAI_OK) {
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d002      	beq.n	8000faa <main+0x6a>
  	  exit(1);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f004 fd3b 	bl	8005a20 <exit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <main+0x6a>
 8000fac:	48000800 	.word	0x48000800
 8000fb0:	20000088 	.word	0x20000088
 8000fb4:	48000400 	.word	0x48000400
 8000fb8:	08005e44 	.word	0x08005e44

08000fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b096      	sub	sp, #88	@ 0x58
 8000fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	2244      	movs	r2, #68	@ 0x44
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f004 fd3a 	bl	8005a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fde:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fe2:	f001 f921 	bl	8002228 <HAL_PWREx_ControlVoltageScaling>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fec:	f000 fbfa 	bl	80017e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ff0:	2310      	movs	r3, #16
 8000ff2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ffc:	2360      	movs	r3, #96	@ 0x60
 8000ffe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001000:	2302      	movs	r3, #2
 8001002:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001004:	2301      	movs	r3, #1
 8001006:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001008:	2301      	movs	r3, #1
 800100a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800100c:	2328      	movs	r3, #40	@ 0x28
 800100e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001010:	2302      	movs	r3, #2
 8001012:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001014:	2302      	movs	r3, #2
 8001016:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001018:	2302      	movs	r3, #2
 800101a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4618      	mov	r0, r3
 8001022:	f001 f957 	bl	80022d4 <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800102c:	f000 fbda 	bl	80017e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001034:	2303      	movs	r3, #3
 8001036:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800103c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001040:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001046:	463b      	mov	r3, r7
 8001048:	2104      	movs	r1, #4
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fd5c 	bl	8002b08 <HAL_RCC_ClockConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001056:	f000 fbc5 	bl	80017e4 <Error_Handler>
  }
}
 800105a:	bf00      	nop
 800105c:	3758      	adds	r7, #88	@ 0x58
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001068:	4b1b      	ldr	r3, [pc, #108]	@ (80010d8 <MX_SPI1_Init+0x74>)
 800106a:	4a1c      	ldr	r2, [pc, #112]	@ (80010dc <MX_SPI1_Init+0x78>)
 800106c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800106e:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <MX_SPI1_Init+0x74>)
 8001070:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001074:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001076:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <MX_SPI1_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800107c:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <MX_SPI1_Init+0x74>)
 800107e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001082:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001084:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <MX_SPI1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800108a:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <MX_SPI1_Init+0x74>)
 800108c:	2201      	movs	r2, #1
 800108e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001090:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <MX_SPI1_Init+0x74>)
 8001092:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001096:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <MX_SPI1_Init+0x74>)
 800109a:	2228      	movs	r2, #40	@ 0x28
 800109c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <MX_SPI1_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <MX_SPI1_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <MX_SPI1_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010b0:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <MX_SPI1_Init+0x74>)
 80010b2:	2207      	movs	r2, #7
 80010b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <MX_SPI1_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <MX_SPI1_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	@ (80010d8 <MX_SPI1_Init+0x74>)
 80010c4:	f002 fc0e 	bl	80038e4 <HAL_SPI_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80010ce:	f000 fb89 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000088 	.word	0x20000088
 80010dc:	40013000 	.word	0x40013000

080010e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010e4:	4b15      	ldr	r3, [pc, #84]	@ (800113c <MX_USART2_UART_Init+0x5c>)
 80010e6:	4a16      	ldr	r2, [pc, #88]	@ (8001140 <MX_USART2_UART_Init+0x60>)
 80010e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80010ea:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_USART2_UART_Init+0x5c>)
 80010ec:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80010f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <MX_USART2_UART_Init+0x5c>)
 80010f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010f8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <MX_USART2_UART_Init+0x5c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_USART2_UART_Init+0x5c>)
 8001102:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001106:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_USART2_UART_Init+0x5c>)
 800110a:	220c      	movs	r2, #12
 800110c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110e:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <MX_USART2_UART_Init+0x5c>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001114:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_USART2_UART_Init+0x5c>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800111a:	4b08      	ldr	r3, [pc, #32]	@ (800113c <MX_USART2_UART_Init+0x5c>)
 800111c:	2200      	movs	r2, #0
 800111e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <MX_USART2_UART_Init+0x5c>)
 8001122:	2200      	movs	r2, #0
 8001124:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	@ (800113c <MX_USART2_UART_Init+0x5c>)
 8001128:	f003 fa6e 	bl	8004608 <HAL_UART_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001132:	f000 fb57 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200000ec 	.word	0x200000ec
 8001140:	40004400 	.word	0x40004400

08001144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	@ 0x28
 8001148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	4b68      	ldr	r3, [pc, #416]	@ (80012fc <MX_GPIO_Init+0x1b8>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	4a67      	ldr	r2, [pc, #412]	@ (80012fc <MX_GPIO_Init+0x1b8>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001166:	4b65      	ldr	r3, [pc, #404]	@ (80012fc <MX_GPIO_Init+0x1b8>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001172:	4b62      	ldr	r3, [pc, #392]	@ (80012fc <MX_GPIO_Init+0x1b8>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	4a61      	ldr	r2, [pc, #388]	@ (80012fc <MX_GPIO_Init+0x1b8>)
 8001178:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800117c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117e:	4b5f      	ldr	r3, [pc, #380]	@ (80012fc <MX_GPIO_Init+0x1b8>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	4b5c      	ldr	r3, [pc, #368]	@ (80012fc <MX_GPIO_Init+0x1b8>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	4a5b      	ldr	r2, [pc, #364]	@ (80012fc <MX_GPIO_Init+0x1b8>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001196:	4b59      	ldr	r3, [pc, #356]	@ (80012fc <MX_GPIO_Init+0x1b8>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	4b56      	ldr	r3, [pc, #344]	@ (80012fc <MX_GPIO_Init+0x1b8>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	4a55      	ldr	r2, [pc, #340]	@ (80012fc <MX_GPIO_Init+0x1b8>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ae:	4b53      	ldr	r3, [pc, #332]	@ (80012fc <MX_GPIO_Init+0x1b8>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ba:	4b50      	ldr	r3, [pc, #320]	@ (80012fc <MX_GPIO_Init+0x1b8>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	4a4f      	ldr	r2, [pc, #316]	@ (80012fc <MX_GPIO_Init+0x1b8>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c6:	4b4d      	ldr	r3, [pc, #308]	@ (80012fc <MX_GPIO_Init+0x1b8>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2110      	movs	r1, #16
 80011d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011da:	f000 ffe7 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADS1299_NPWDN_Pin|ADS1299_NRESET_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2130      	movs	r1, #48	@ 0x30
 80011e2:	4847      	ldr	r0, [pc, #284]	@ (8001300 <MX_GPIO_Init+0x1bc>)
 80011e4:	f000 ffe2 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADS1299_START_GPIO_Port, ADS1299_START_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2101      	movs	r1, #1
 80011ec:	4845      	ldr	r0, [pc, #276]	@ (8001304 <MX_GPIO_Init+0x1c0>)
 80011ee:	f000 ffdd 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80011f2:	f64f 73cf 	movw	r3, #65487	@ 0xffcf
 80011f6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f8:	2303      	movs	r3, #3
 80011fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	483e      	ldr	r0, [pc, #248]	@ (8001300 <MX_GPIO_Init+0x1bc>)
 8001208:	f000 fe3e 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 800120c:	230b      	movs	r3, #11
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001210:	2303      	movs	r3, #3
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	483a      	ldr	r0, [pc, #232]	@ (8001308 <MX_GPIO_Init+0x1c4>)
 8001220:	f000 fe32 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001224:	f649 7301 	movw	r3, #40705	@ 0x9f01
 8001228:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122a:	2303      	movs	r3, #3
 800122c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123c:	f000 fe24 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001240:	2310      	movs	r3, #16
 8001242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001244:	2301      	movs	r3, #1
 8001246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800125a:	f000 fe15 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS1299_NDRDY_Pin */
  GPIO_InitStruct.Pin = ADS1299_NDRDY_Pin;
 800125e:	2320      	movs	r3, #32
 8001260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001262:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADS1299_NDRDY_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001276:	f000 fe07 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADS1299_NPWDN_Pin ADS1299_NRESET_Pin */
  GPIO_InitStruct.Pin = ADS1299_NPWDN_Pin|ADS1299_NRESET_Pin;
 800127a:	2330      	movs	r3, #48	@ 0x30
 800127c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	481b      	ldr	r0, [pc, #108]	@ (8001300 <MX_GPIO_Init+0x1bc>)
 8001292:	f000 fdf9 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS1299_START_Pin */
  GPIO_InitStruct.Pin = ADS1299_START_Pin;
 8001296:	2301      	movs	r3, #1
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADS1299_START_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4815      	ldr	r0, [pc, #84]	@ (8001304 <MX_GPIO_Init+0x1c0>)
 80012ae:	f000 fdeb 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80012b2:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 80012b6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b8:	2303      	movs	r3, #3
 80012ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	480f      	ldr	r0, [pc, #60]	@ (8001304 <MX_GPIO_Init+0x1c0>)
 80012c8:	f000 fdde 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012cc:	2304      	movs	r3, #4
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d0:	2303      	movs	r3, #3
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	480b      	ldr	r0, [pc, #44]	@ (800130c <MX_GPIO_Init+0x1c8>)
 80012e0:	f000 fdd2 	bl	8001e88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	2017      	movs	r0, #23
 80012ea:	f000 fd56 	bl	8001d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012ee:	2017      	movs	r0, #23
 80012f0:	f000 fd6f 	bl	8001dd2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	@ 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40021000 	.word	0x40021000
 8001300:	48000800 	.word	0x48000800
 8001304:	48000400 	.word	0x48000400
 8001308:	48001c00 	.word	0x48001c00
 800130c:	48000c00 	.word	0x48000c00

08001310 <HAL_GPIO_EXTI_Callback>:
 * @brief When DRDY falling edge, transmit to read data
 * @param GPIO Pin that interrupt happened
 * @return None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
  // If we see NDRDY, we begin reading data
  if(GPIO_Pin == ADS1299_NDRDY_Pin) {
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	2b20      	cmp	r3, #32
 800131e:	d103      	bne.n	8001328 <HAL_GPIO_EXTI_Callback+0x18>
    ads1299_read_data_IT(&hspi1);
 8001320:	4804      	ldr	r0, [pc, #16]	@ (8001334 <HAL_GPIO_EXTI_Callback+0x24>)
 8001322:	f7ff fdb7 	bl	8000e94 <ads1299_read_data_IT>
  } else {
      __NOP();
  }
}
 8001326:	e000      	b.n	800132a <HAL_GPIO_EXTI_Callback+0x1a>
      __NOP();
 8001328:	bf00      	nop
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000088 	.word	0x20000088

08001338 <HAL_SPI_TxRxCpltCallback>:

/**
 * @brief Call back that occurs when ADS is fully read from
 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b094      	sub	sp, #80	@ 0x50
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	// 1. De-assert chip select
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2110      	movs	r1, #16
 8001344:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001348:	f000 ff30 	bl	80021ac <HAL_GPIO_WritePin>

    // 2. Extract and check ADS1299 status bits
    uint32_t status = (RX_BUFF[0] << 16) | (RX_BUFF[1] << 8) | RX_BUFF[2];
 800134c:	4b5f      	ldr	r3, [pc, #380]	@ (80014cc <HAL_SPI_TxRxCpltCallback+0x194>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	041a      	lsls	r2, r3, #16
 8001354:	4b5d      	ldr	r3, [pc, #372]	@ (80014cc <HAL_SPI_TxRxCpltCallback+0x194>)
 8001356:	785b      	ldrb	r3, [r3, #1]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	4313      	orrs	r3, r2
 800135e:	4a5b      	ldr	r2, [pc, #364]	@ (80014cc <HAL_SPI_TxRxCpltCallback+0x194>)
 8001360:	7892      	ldrb	r2, [r2, #2]
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	4313      	orrs	r3, r2
 8001366:	643b      	str	r3, [r7, #64]	@ 0x40
    if (status != 0b110000000000000000000000) {
 8001368:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800136a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800136e:	d00a      	beq.n	8001386 <HAL_SPI_TxRxCpltCallback+0x4e>
        uint8_t fail_msg[] = {'F', 'A', 'I', 'L'};
 8001370:	4b57      	ldr	r3, [pc, #348]	@ (80014d0 <HAL_SPI_TxRxCpltCallback+0x198>)
 8001372:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart2, fail_msg, sizeof(fail_msg), HAL_MAX_DELAY);
 8001374:	f107 010c 	add.w	r1, r7, #12
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
 800137c:	2204      	movs	r2, #4
 800137e:	4855      	ldr	r0, [pc, #340]	@ (80014d4 <HAL_SPI_TxRxCpltCallback+0x19c>)
 8001380:	f003 f990 	bl	80046a4 <HAL_UART_Transmit>
 8001384:	e1ff      	b.n	8001786 <HAL_SPI_TxRxCpltCallback+0x44e>
        return;
    }

    // 3. Parse 4 EMG channels from ADS1299 (3 bytes per channel)
    float ch[4];
    for (int i = 0; i < 4; i++) {
 8001386:	2300      	movs	r3, #0
 8001388:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800138a:	e02b      	b.n	80013e4 <HAL_SPI_TxRxCpltCallback+0xac>
        uint32_t raw = (RX_BUFF[3 + i * 3] << 16) |
 800138c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	4a4d      	ldr	r2, [pc, #308]	@ (80014cc <HAL_SPI_TxRxCpltCallback+0x194>)
 8001398:	5cd3      	ldrb	r3, [r2, r3]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	0419      	lsls	r1, r3, #16
                       (RX_BUFF[4 + i * 3] << 8) |
 800139e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4413      	add	r3, r2
 80013a6:	3304      	adds	r3, #4
 80013a8:	4a48      	ldr	r2, [pc, #288]	@ (80014cc <HAL_SPI_TxRxCpltCallback+0x194>)
 80013aa:	5cd3      	ldrb	r3, [r2, r3]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	021b      	lsls	r3, r3, #8
        uint32_t raw = (RX_BUFF[3 + i * 3] << 16) |
 80013b0:	4319      	orrs	r1, r3
                       (RX_BUFF[5 + i * 3]);
 80013b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80013b4:	4613      	mov	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	3305      	adds	r3, #5
 80013bc:	4a43      	ldr	r2, [pc, #268]	@ (80014cc <HAL_SPI_TxRxCpltCallback+0x194>)
 80013be:	5cd3      	ldrb	r3, [r2, r3]
 80013c0:	b2db      	uxtb	r3, r3
                       (RX_BUFF[4 + i * 3] << 8) |
 80013c2:	430b      	orrs	r3, r1
        uint32_t raw = (RX_BUFF[3 + i * 3] << 16) |
 80013c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ch[i] = ads1299_data_to_float(raw);
 80013c6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80013c8:	f7ff fd88 	bl	8000edc <ads1299_data_to_float>
 80013cc:	eef0 7a40 	vmov.f32	s15, s0
 80013d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	3350      	adds	r3, #80	@ 0x50
 80013d6:	443b      	add	r3, r7
 80013d8:	3b24      	subs	r3, #36	@ 0x24
 80013da:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 80013de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013e0:	3301      	adds	r3, #1
 80013e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	ddd0      	ble.n	800138c <HAL_SPI_TxRxCpltCallback+0x54>
    }

#if USE_THRESHOLDING
    // 4. Update intensity buffers (absolute value)
    ch1_buffer[intensity_counter] = fabsf(ch[0]);
 80013ea:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80013ee:	4b3a      	ldr	r3, [pc, #232]	@ (80014d8 <HAL_SPI_TxRxCpltCallback+0x1a0>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	eef0 7ae7 	vabs.f32	s15, s15
 80013f8:	4a38      	ldr	r2, [pc, #224]	@ (80014dc <HAL_SPI_TxRxCpltCallback+0x1a4>)
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	edc3 7a00 	vstr	s15, [r3]
    ch2_buffer[intensity_counter] = fabsf(ch[1]);
 8001402:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001406:	4b34      	ldr	r3, [pc, #208]	@ (80014d8 <HAL_SPI_TxRxCpltCallback+0x1a0>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	b29b      	uxth	r3, r3
 800140c:	eef0 7ae7 	vabs.f32	s15, s15
 8001410:	4a33      	ldr	r2, [pc, #204]	@ (80014e0 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	edc3 7a00 	vstr	s15, [r3]
    ch3_buffer[intensity_counter] = fabsf(ch[2]);
 800141a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800141e:	4b2e      	ldr	r3, [pc, #184]	@ (80014d8 <HAL_SPI_TxRxCpltCallback+0x1a0>)
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	b29b      	uxth	r3, r3
 8001424:	eef0 7ae7 	vabs.f32	s15, s15
 8001428:	4a2e      	ldr	r2, [pc, #184]	@ (80014e4 <HAL_SPI_TxRxCpltCallback+0x1ac>)
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	edc3 7a00 	vstr	s15, [r3]
    ch4_buffer[intensity_counter] = fabsf(ch[3]);
 8001432:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001436:	4b28      	ldr	r3, [pc, #160]	@ (80014d8 <HAL_SPI_TxRxCpltCallback+0x1a0>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	eef0 7ae7 	vabs.f32	s15, s15
 8001440:	4a29      	ldr	r2, [pc, #164]	@ (80014e8 <HAL_SPI_TxRxCpltCallback+0x1b0>)
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	edc3 7a00 	vstr	s15, [r3]
    intensity_counter++;
 800144a:	4b23      	ldr	r3, [pc, #140]	@ (80014d8 <HAL_SPI_TxRxCpltCallback+0x1a0>)
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	b29b      	uxth	r3, r3
 8001450:	3301      	adds	r3, #1
 8001452:	b29a      	uxth	r2, r3
 8001454:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <HAL_SPI_TxRxCpltCallback+0x1a0>)
 8001456:	801a      	strh	r2, [r3, #0]

    bool activation_triggered = false;
 8001458:	2300      	movs	r3, #0
 800145a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    if (intensity_counter >= INTENSITY_BUFFER_SIZE) {
 800145e:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <HAL_SPI_TxRxCpltCallback+0x1a0>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	b29b      	uxth	r3, r3
 8001464:	2b09      	cmp	r3, #9
 8001466:	f240 810e 	bls.w	8001686 <HAL_SPI_TxRxCpltCallback+0x34e>
    	if (!intensity_initialized) {
 800146a:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <HAL_SPI_TxRxCpltCallback+0x1b4>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	f083 0301 	eor.w	r3, r3, #1
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00c      	beq.n	8001492 <HAL_SPI_TxRxCpltCallback+0x15a>
			ch1_I1 = ch2_I1 = ch3_I1 = ch4_I1 = 1e-6f;  // Avoid divide-by-zero
 8001478:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 800147a:	4a1e      	ldr	r2, [pc, #120]	@ (80014f4 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4a1e      	ldr	r2, [pc, #120]	@ (80014f8 <HAL_SPI_TxRxCpltCallback+0x1c0>)
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4a1e      	ldr	r2, [pc, #120]	@ (80014fc <HAL_SPI_TxRxCpltCallback+0x1c4>)
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4a1e      	ldr	r2, [pc, #120]	@ (8001500 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 8001488:	6013      	str	r3, [r2, #0]
			intensity_initialized = true;
 800148a:	4b18      	ldr	r3, [pc, #96]	@ (80014ec <HAL_SPI_TxRxCpltCallback+0x1b4>)
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
			return;
 8001490:	e179      	b.n	8001786 <HAL_SPI_TxRxCpltCallback+0x44e>
		}
        // Shift intensities: I1 <- I2, I2 <- new average
        ch1_I1 = ch1_I2; ch2_I1 = ch2_I2; ch3_I1 = ch3_I2; ch4_I1 = ch4_I2;
 8001492:	4b1c      	ldr	r3, [pc, #112]	@ (8001504 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a1a      	ldr	r2, [pc, #104]	@ (8001500 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <HAL_SPI_TxRxCpltCallback+0x1d0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a17      	ldr	r2, [pc, #92]	@ (80014fc <HAL_SPI_TxRxCpltCallback+0x1c4>)
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <HAL_SPI_TxRxCpltCallback+0x1d4>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a14      	ldr	r2, [pc, #80]	@ (80014f8 <HAL_SPI_TxRxCpltCallback+0x1c0>)
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <HAL_SPI_TxRxCpltCallback+0x1d8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a11      	ldr	r2, [pc, #68]	@ (80014f4 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 80014b0:	6013      	str	r3, [r2, #0]
        ch1_I2 = ch2_I2 = ch3_I2 = ch4_I2 = 0.0f;
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	4a16      	ldr	r2, [pc, #88]	@ (8001510 <HAL_SPI_TxRxCpltCallback+0x1d8>)
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	4a14      	ldr	r2, [pc, #80]	@ (800150c <HAL_SPI_TxRxCpltCallback+0x1d4>)
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4a12      	ldr	r2, [pc, #72]	@ (8001508 <HAL_SPI_TxRxCpltCallback+0x1d0>)
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4a10      	ldr	r2, [pc, #64]	@ (8001504 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80014c4:	6013      	str	r3, [r2, #0]

        for (int i = 0; i < INTENSITY_BUFFER_SIZE; i++) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80014ca:	e05e      	b.n	800158a <HAL_SPI_TxRxCpltCallback+0x252>
 80014cc:	20000078 	.word	0x20000078
 80014d0:	4c494146 	.word	0x4c494146
 80014d4:	200000ec 	.word	0x200000ec
 80014d8:	20004254 	.word	0x20004254
 80014dc:	20004194 	.word	0x20004194
 80014e0:	200041bc 	.word	0x200041bc
 80014e4:	200041e4 	.word	0x200041e4
 80014e8:	2000420c 	.word	0x2000420c
 80014ec:	2000418c 	.word	0x2000418c
 80014f0:	358637bd 	.word	0x358637bd
 80014f4:	2000424c 	.word	0x2000424c
 80014f8:	20004244 	.word	0x20004244
 80014fc:	2000423c 	.word	0x2000423c
 8001500:	20004234 	.word	0x20004234
 8001504:	20004238 	.word	0x20004238
 8001508:	20004240 	.word	0x20004240
 800150c:	20004248 	.word	0x20004248
 8001510:	20004250 	.word	0x20004250
            ch1_I2 += ch1_buffer[i];
 8001514:	4a9d      	ldr	r2, [pc, #628]	@ (800178c <HAL_SPI_TxRxCpltCallback+0x454>)
 8001516:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	ed93 7a00 	vldr	s14, [r3]
 8001520:	4b9b      	ldr	r3, [pc, #620]	@ (8001790 <HAL_SPI_TxRxCpltCallback+0x458>)
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800152a:	4b99      	ldr	r3, [pc, #612]	@ (8001790 <HAL_SPI_TxRxCpltCallback+0x458>)
 800152c:	edc3 7a00 	vstr	s15, [r3]
            ch2_I2 += ch2_buffer[i];
 8001530:	4a98      	ldr	r2, [pc, #608]	@ (8001794 <HAL_SPI_TxRxCpltCallback+0x45c>)
 8001532:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	ed93 7a00 	vldr	s14, [r3]
 800153c:	4b96      	ldr	r3, [pc, #600]	@ (8001798 <HAL_SPI_TxRxCpltCallback+0x460>)
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001546:	4b94      	ldr	r3, [pc, #592]	@ (8001798 <HAL_SPI_TxRxCpltCallback+0x460>)
 8001548:	edc3 7a00 	vstr	s15, [r3]
            ch3_I2 += ch3_buffer[i];
 800154c:	4a93      	ldr	r2, [pc, #588]	@ (800179c <HAL_SPI_TxRxCpltCallback+0x464>)
 800154e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	ed93 7a00 	vldr	s14, [r3]
 8001558:	4b91      	ldr	r3, [pc, #580]	@ (80017a0 <HAL_SPI_TxRxCpltCallback+0x468>)
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001562:	4b8f      	ldr	r3, [pc, #572]	@ (80017a0 <HAL_SPI_TxRxCpltCallback+0x468>)
 8001564:	edc3 7a00 	vstr	s15, [r3]
            ch4_I2 += ch4_buffer[i];
 8001568:	4a8e      	ldr	r2, [pc, #568]	@ (80017a4 <HAL_SPI_TxRxCpltCallback+0x46c>)
 800156a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	ed93 7a00 	vldr	s14, [r3]
 8001574:	4b8c      	ldr	r3, [pc, #560]	@ (80017a8 <HAL_SPI_TxRxCpltCallback+0x470>)
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157e:	4b8a      	ldr	r3, [pc, #552]	@ (80017a8 <HAL_SPI_TxRxCpltCallback+0x470>)
 8001580:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < INTENSITY_BUFFER_SIZE; i++) {
 8001584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001586:	3301      	adds	r3, #1
 8001588:	647b      	str	r3, [r7, #68]	@ 0x44
 800158a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800158c:	2b09      	cmp	r3, #9
 800158e:	ddc1      	ble.n	8001514 <HAL_SPI_TxRxCpltCallback+0x1dc>
        }

        ch1_I2 /= INTENSITY_BUFFER_SIZE;
 8001590:	4b7f      	ldr	r3, [pc, #508]	@ (8001790 <HAL_SPI_TxRxCpltCallback+0x458>)
 8001592:	ed93 7a00 	vldr	s14, [r3]
 8001596:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800159a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800159e:	4b7c      	ldr	r3, [pc, #496]	@ (8001790 <HAL_SPI_TxRxCpltCallback+0x458>)
 80015a0:	edc3 7a00 	vstr	s15, [r3]
        ch2_I2 /= INTENSITY_BUFFER_SIZE;
 80015a4:	4b7c      	ldr	r3, [pc, #496]	@ (8001798 <HAL_SPI_TxRxCpltCallback+0x460>)
 80015a6:	ed93 7a00 	vldr	s14, [r3]
 80015aa:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80015ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b2:	4b79      	ldr	r3, [pc, #484]	@ (8001798 <HAL_SPI_TxRxCpltCallback+0x460>)
 80015b4:	edc3 7a00 	vstr	s15, [r3]
        ch3_I2 /= INTENSITY_BUFFER_SIZE;
 80015b8:	4b79      	ldr	r3, [pc, #484]	@ (80017a0 <HAL_SPI_TxRxCpltCallback+0x468>)
 80015ba:	ed93 7a00 	vldr	s14, [r3]
 80015be:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80015c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c6:	4b76      	ldr	r3, [pc, #472]	@ (80017a0 <HAL_SPI_TxRxCpltCallback+0x468>)
 80015c8:	edc3 7a00 	vstr	s15, [r3]
        ch4_I2 /= INTENSITY_BUFFER_SIZE;
 80015cc:	4b76      	ldr	r3, [pc, #472]	@ (80017a8 <HAL_SPI_TxRxCpltCallback+0x470>)
 80015ce:	ed93 7a00 	vldr	s14, [r3]
 80015d2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80015d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015da:	4b73      	ldr	r3, [pc, #460]	@ (80017a8 <HAL_SPI_TxRxCpltCallback+0x470>)
 80015dc:	edc3 7a00 	vstr	s15, [r3]

        // Compare for significant intensity increase
        if (((ch1_I2 >= INTENSITY_THRESHOLD * ch1_I1) ||
 80015e0:	4b72      	ldr	r3, [pc, #456]	@ (80017ac <HAL_SPI_TxRxCpltCallback+0x474>)
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 80017b0 <HAL_SPI_TxRxCpltCallback+0x478>
 80015ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015ee:	4b68      	ldr	r3, [pc, #416]	@ (8001790 <HAL_SPI_TxRxCpltCallback+0x458>)
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fc:	d92c      	bls.n	8001658 <HAL_SPI_TxRxCpltCallback+0x320>
            (ch2_I2 >= INTENSITY_THRESHOLD * ch2_I1) ||
 80015fe:	4b6d      	ldr	r3, [pc, #436]	@ (80017b4 <HAL_SPI_TxRxCpltCallback+0x47c>)
 8001600:	edd3 7a00 	vldr	s15, [r3]
 8001604:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 80017b0 <HAL_SPI_TxRxCpltCallback+0x478>
 8001608:	ee27 7a87 	vmul.f32	s14, s15, s14
 800160c:	4b62      	ldr	r3, [pc, #392]	@ (8001798 <HAL_SPI_TxRxCpltCallback+0x460>)
 800160e:	edd3 7a00 	vldr	s15, [r3]
        if (((ch1_I2 >= INTENSITY_THRESHOLD * ch1_I1) ||
 8001612:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161a:	d91d      	bls.n	8001658 <HAL_SPI_TxRxCpltCallback+0x320>
            (ch3_I2 >= INTENSITY_THRESHOLD * ch3_I1) ||
 800161c:	4b66      	ldr	r3, [pc, #408]	@ (80017b8 <HAL_SPI_TxRxCpltCallback+0x480>)
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 80017b0 <HAL_SPI_TxRxCpltCallback+0x478>
 8001626:	ee27 7a87 	vmul.f32	s14, s15, s14
 800162a:	4b5d      	ldr	r3, [pc, #372]	@ (80017a0 <HAL_SPI_TxRxCpltCallback+0x468>)
 800162c:	edd3 7a00 	vldr	s15, [r3]
            (ch2_I2 >= INTENSITY_THRESHOLD * ch2_I1) ||
 8001630:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001638:	d90e      	bls.n	8001658 <HAL_SPI_TxRxCpltCallback+0x320>
            (ch4_I2 >= INTENSITY_THRESHOLD * ch4_I1))&& just_triggered >= TRIGG_WAIT) {
 800163a:	4b60      	ldr	r3, [pc, #384]	@ (80017bc <HAL_SPI_TxRxCpltCallback+0x484>)
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80017b0 <HAL_SPI_TxRxCpltCallback+0x478>
 8001644:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001648:	4b57      	ldr	r3, [pc, #348]	@ (80017a8 <HAL_SPI_TxRxCpltCallback+0x470>)
 800164a:	edd3 7a00 	vldr	s15, [r3]
            (ch3_I2 >= INTENSITY_THRESHOLD * ch3_I1) ||
 800164e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001656:	d80a      	bhi.n	800166e <HAL_SPI_TxRxCpltCallback+0x336>
            (ch4_I2 >= INTENSITY_THRESHOLD * ch4_I1))&& just_triggered >= TRIGG_WAIT) {
 8001658:	4b59      	ldr	r3, [pc, #356]	@ (80017c0 <HAL_SPI_TxRxCpltCallback+0x488>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2bfa      	cmp	r3, #250	@ 0xfa
 800165e:	d906      	bls.n	800166e <HAL_SPI_TxRxCpltCallback+0x336>
            activation_triggered = true;
 8001660:	2301      	movs	r3, #1
 8001662:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            just_triggered = 0;
 8001666:	4b56      	ldr	r3, [pc, #344]	@ (80017c0 <HAL_SPI_TxRxCpltCallback+0x488>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e008      	b.n	8001680 <HAL_SPI_TxRxCpltCallback+0x348>
        } else {
        	if (just_triggered < TRIGG_WAIT+2) {
 800166e:	4b54      	ldr	r3, [pc, #336]	@ (80017c0 <HAL_SPI_TxRxCpltCallback+0x488>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2bfc      	cmp	r3, #252	@ 0xfc
 8001674:	d804      	bhi.n	8001680 <HAL_SPI_TxRxCpltCallback+0x348>
        		just_triggered++;
 8001676:	4b52      	ldr	r3, [pc, #328]	@ (80017c0 <HAL_SPI_TxRxCpltCallback+0x488>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	3301      	adds	r3, #1
 800167c:	4a50      	ldr	r2, [pc, #320]	@ (80017c0 <HAL_SPI_TxRxCpltCallback+0x488>)
 800167e:	6013      	str	r3, [r2, #0]
        	}
        }

        intensity_counter = 0;
 8001680:	4b50      	ldr	r3, [pc, #320]	@ (80017c4 <HAL_SPI_TxRxCpltCallback+0x48c>)
 8001682:	2200      	movs	r2, #0
 8001684:	801a      	strh	r2, [r3, #0]
    }

    // 5. Handle ML buffer activation
    if (activation_triggered && !ml_collecting) {
 8001686:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00d      	beq.n	80016aa <HAL_SPI_TxRxCpltCallback+0x372>
 800168e:	4b4e      	ldr	r3, [pc, #312]	@ (80017c8 <HAL_SPI_TxRxCpltCallback+0x490>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f083 0301 	eor.w	r3, r3, #1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <HAL_SPI_TxRxCpltCallback+0x372>
        ml_collecting = true;
 800169e:	4b4a      	ldr	r3, [pc, #296]	@ (80017c8 <HAL_SPI_TxRxCpltCallback+0x490>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
        ml_index = 0;
 80016a4:	4b49      	ldr	r3, [pc, #292]	@ (80017cc <HAL_SPI_TxRxCpltCallback+0x494>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	801a      	strh	r2, [r3, #0]
#else
    ml_collecting = true;
#endif

    // 6. Collect into ML buffer
    if (ml_collecting) {
 80016aa:	4b47      	ldr	r3, [pc, #284]	@ (80017c8 <HAL_SPI_TxRxCpltCallback+0x490>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d04c      	beq.n	800174e <HAL_SPI_TxRxCpltCallback+0x416>
        ml_buffer[ml_index++] = ch[0];
 80016b4:	4b45      	ldr	r3, [pc, #276]	@ (80017cc <HAL_SPI_TxRxCpltCallback+0x494>)
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	b291      	uxth	r1, r2
 80016be:	4a43      	ldr	r2, [pc, #268]	@ (80017cc <HAL_SPI_TxRxCpltCallback+0x494>)
 80016c0:	8011      	strh	r1, [r2, #0]
 80016c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016c4:	4942      	ldr	r1, [pc, #264]	@ (80017d0 <HAL_SPI_TxRxCpltCallback+0x498>)
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	601a      	str	r2, [r3, #0]
        ml_buffer[ml_index++] = ch[1];
 80016cc:	4b3f      	ldr	r3, [pc, #252]	@ (80017cc <HAL_SPI_TxRxCpltCallback+0x494>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	1c5a      	adds	r2, r3, #1
 80016d4:	b291      	uxth	r1, r2
 80016d6:	4a3d      	ldr	r2, [pc, #244]	@ (80017cc <HAL_SPI_TxRxCpltCallback+0x494>)
 80016d8:	8011      	strh	r1, [r2, #0]
 80016da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016dc:	493c      	ldr	r1, [pc, #240]	@ (80017d0 <HAL_SPI_TxRxCpltCallback+0x498>)
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	601a      	str	r2, [r3, #0]
        ml_buffer[ml_index++] = ch[2];
 80016e4:	4b39      	ldr	r3, [pc, #228]	@ (80017cc <HAL_SPI_TxRxCpltCallback+0x494>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	b291      	uxth	r1, r2
 80016ee:	4a37      	ldr	r2, [pc, #220]	@ (80017cc <HAL_SPI_TxRxCpltCallback+0x494>)
 80016f0:	8011      	strh	r1, [r2, #0]
 80016f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80016f4:	4936      	ldr	r1, [pc, #216]	@ (80017d0 <HAL_SPI_TxRxCpltCallback+0x498>)
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	601a      	str	r2, [r3, #0]
        ml_buffer[ml_index++] = ch[3];
 80016fc:	4b33      	ldr	r3, [pc, #204]	@ (80017cc <HAL_SPI_TxRxCpltCallback+0x494>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	b29b      	uxth	r3, r3
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	b291      	uxth	r1, r2
 8001706:	4a31      	ldr	r2, [pc, #196]	@ (80017cc <HAL_SPI_TxRxCpltCallback+0x494>)
 8001708:	8011      	strh	r1, [r2, #0]
 800170a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800170c:	4930      	ldr	r1, [pc, #192]	@ (80017d0 <HAL_SPI_TxRxCpltCallback+0x498>)
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	601a      	str	r2, [r3, #0]

        if (ml_index >= ML_SAMPLE_COUNT * 4) {
 8001714:	4b2d      	ldr	r3, [pc, #180]	@ (80017cc <HAL_SPI_TxRxCpltCallback+0x494>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	b29b      	uxth	r3, r3
 800171a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800171e:	d316      	bcc.n	800174e <HAL_SPI_TxRxCpltCallback+0x416>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	bf00      	nop
//             Run classification
        	__disable_irq();
            uint16_t class_id = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	817b      	strh	r3, [r7, #10]
            neai_classification((float *)ml_buffer, (float *)output_class_buffer, &class_id);
 8001728:	f107 030a 	add.w	r3, r7, #10
 800172c:	461a      	mov	r2, r3
 800172e:	4929      	ldr	r1, [pc, #164]	@ (80017d4 <HAL_SPI_TxRxCpltCallback+0x49c>)
 8001730:	4827      	ldr	r0, [pc, #156]	@ (80017d0 <HAL_SPI_TxRxCpltCallback+0x498>)
 8001732:	f003 fe0b 	bl	800534c <neai_classification>
            ml_class = (uint32_t)class_id;
 8001736:	897b      	ldrh	r3, [r7, #10]
 8001738:	461a      	mov	r2, r3
 800173a:	4b27      	ldr	r3, [pc, #156]	@ (80017d8 <HAL_SPI_TxRxCpltCallback+0x4a0>)
 800173c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800173e:	b662      	cpsie	i
}
 8001740:	bf00      	nop
            HAL_UART_Transmit(&huart2, (uint8_t*)&header, sizeof(header), HAL_MAX_DELAY);
            HAL_UART_Transmit(&huart2, (uint8_t*)ml_buffer, sizeof(float) * ML_SAMPLE_COUNT * 4, HAL_MAX_DELAY);
            HAL_UART_Transmit(&huart2, (uint8_t*)&ml_class, sizeof(ml_class), HAL_MAX_DELAY);
#endif

            ml_index = 0;
 8001742:	4b22      	ldr	r3, [pc, #136]	@ (80017cc <HAL_SPI_TxRxCpltCallback+0x494>)
 8001744:	2200      	movs	r2, #0
 8001746:	801a      	strh	r2, [r3, #0]
            ml_collecting = false;
 8001748:	4b1f      	ldr	r3, [pc, #124]	@ (80017c8 <HAL_SPI_TxRxCpltCallback+0x490>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
    }

#if GRAPH_MODE_ENABLED
    // 7. Transmit single sample for live plotting
    float tx_buffer[6];
    tx_buffer[0] = *(float*)&(uint32_t){0x53594E43};  // "SYNC" as float
 800174e:	4b23      	ldr	r3, [pc, #140]	@ (80017dc <HAL_SPI_TxRxCpltCallback+0x4a4>)
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	f107 0310 	add.w	r3, r7, #16
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	617b      	str	r3, [r7, #20]
    tx_buffer[1] = ch[0];
 800175a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800175c:	61bb      	str	r3, [r7, #24]
    tx_buffer[2] = ch[1];
 800175e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001760:	61fb      	str	r3, [r7, #28]
    tx_buffer[3] = ch[2];
 8001762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001764:	623b      	str	r3, [r7, #32]
    tx_buffer[4] = ch[3];
 8001766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
    tx_buffer[5] = *(float*)&ml_class;
 800176a:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <HAL_SPI_TxRxCpltCallback+0x4a0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, sizeof(tx_buffer), HAL_MAX_DELAY);
 8001770:	f107 0114 	add.w	r1, r7, #20
 8001774:	f04f 33ff 	mov.w	r3, #4294967295
 8001778:	2218      	movs	r2, #24
 800177a:	4819      	ldr	r0, [pc, #100]	@ (80017e0 <HAL_SPI_TxRxCpltCallback+0x4a8>)
 800177c:	f002 ff92 	bl	80046a4 <HAL_UART_Transmit>

    // Reset classification until next result
    ml_class = 0;
 8001780:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <HAL_SPI_TxRxCpltCallback+0x4a0>)
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
#endif
}
 8001786:	3750      	adds	r7, #80	@ 0x50
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20004194 	.word	0x20004194
 8001790:	20004238 	.word	0x20004238
 8001794:	200041bc 	.word	0x200041bc
 8001798:	20004240 	.word	0x20004240
 800179c:	200041e4 	.word	0x200041e4
 80017a0:	20004248 	.word	0x20004248
 80017a4:	2000420c 	.word	0x2000420c
 80017a8:	20004250 	.word	0x20004250
 80017ac:	20004234 	.word	0x20004234
 80017b0:	3f933333 	.word	0x3f933333
 80017b4:	2000423c 	.word	0x2000423c
 80017b8:	20004244 	.word	0x20004244
 80017bc:	2000424c 	.word	0x2000424c
 80017c0:	20004190 	.word	0x20004190
 80017c4:	20004254 	.word	0x20004254
 80017c8:	20004186 	.word	0x20004186
 80017cc:	20004184 	.word	0x20004184
 80017d0:	20000174 	.word	0x20000174
 80017d4:	20004174 	.word	0x20004174
 80017d8:	20004188 	.word	0x20004188
 80017dc:	53594e43 	.word	0x53594e43
 80017e0:	200000ec 	.word	0x200000ec

080017e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017e8:	b672      	cpsid	i
}
 80017ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <Error_Handler+0x8>

080017f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001834 <HAL_MspInit+0x44>)
 80017f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001834 <HAL_MspInit+0x44>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6613      	str	r3, [r2, #96]	@ 0x60
 8001802:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <HAL_MspInit+0x44>)
 8001804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <HAL_MspInit+0x44>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001812:	4a08      	ldr	r2, [pc, #32]	@ (8001834 <HAL_MspInit+0x44>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001818:	6593      	str	r3, [r2, #88]	@ 0x58
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_MspInit+0x44>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000

08001838 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	@ 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a1b      	ldr	r2, [pc, #108]	@ (80018c4 <HAL_SPI_MspInit+0x8c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d130      	bne.n	80018bc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800185a:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <HAL_SPI_MspInit+0x90>)
 800185c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800185e:	4a1a      	ldr	r2, [pc, #104]	@ (80018c8 <HAL_SPI_MspInit+0x90>)
 8001860:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001864:	6613      	str	r3, [r2, #96]	@ 0x60
 8001866:	4b18      	ldr	r3, [pc, #96]	@ (80018c8 <HAL_SPI_MspInit+0x90>)
 8001868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800186a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <HAL_SPI_MspInit+0x90>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001876:	4a14      	ldr	r2, [pc, #80]	@ (80018c8 <HAL_SPI_MspInit+0x90>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187e:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <HAL_SPI_MspInit+0x90>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800188a:	23c2      	movs	r3, #194	@ 0xc2
 800188c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	2303      	movs	r3, #3
 8001898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800189a:	2305      	movs	r3, #5
 800189c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018a8:	f000 faee 	bl	8001e88 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2100      	movs	r1, #0
 80018b0:	2023      	movs	r0, #35	@ 0x23
 80018b2:	f000 fa72 	bl	8001d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80018b6:	2023      	movs	r0, #35	@ 0x23
 80018b8:	f000 fa8b 	bl	8001dd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	@ 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40013000 	.word	0x40013000
 80018c8:	40021000 	.word	0x40021000

080018cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b0ac      	sub	sp, #176	@ 0xb0
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	228c      	movs	r2, #140	@ 0x8c
 80018ea:	2100      	movs	r1, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f004 f8a9 	bl	8005a44 <memset>
  if(huart->Instance==USART2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a21      	ldr	r2, [pc, #132]	@ (800197c <HAL_UART_MspInit+0xb0>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d13b      	bne.n	8001974 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018fc:	2302      	movs	r3, #2
 80018fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001900:	2300      	movs	r3, #0
 8001902:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	4618      	mov	r0, r3
 800190a:	f001 fb21 	bl	8002f50 <HAL_RCCEx_PeriphCLKConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001914:	f7ff ff66 	bl	80017e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001918:	4b19      	ldr	r3, [pc, #100]	@ (8001980 <HAL_UART_MspInit+0xb4>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191c:	4a18      	ldr	r2, [pc, #96]	@ (8001980 <HAL_UART_MspInit+0xb4>)
 800191e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001922:	6593      	str	r3, [r2, #88]	@ 0x58
 8001924:	4b16      	ldr	r3, [pc, #88]	@ (8001980 <HAL_UART_MspInit+0xb4>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001930:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <HAL_UART_MspInit+0xb4>)
 8001932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001934:	4a12      	ldr	r2, [pc, #72]	@ (8001980 <HAL_UART_MspInit+0xb4>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800193c:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <HAL_UART_MspInit+0xb4>)
 800193e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001948:	230c      	movs	r3, #12
 800194a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001960:	2307      	movs	r3, #7
 8001962:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800196a:	4619      	mov	r1, r3
 800196c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001970:	f000 fa8a 	bl	8001e88 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001974:	bf00      	nop
 8001976:	37b0      	adds	r7, #176	@ 0xb0
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40004400 	.word	0x40004400
 8001980:	40021000 	.word	0x40021000

08001984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <NMI_Handler+0x4>

0800198c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <HardFault_Handler+0x4>

08001994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <MemManage_Handler+0x4>

0800199c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <BusFault_Handler+0x4>

080019a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <UsageFault_Handler+0x4>

080019ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019da:	f000 f8bf 	bl	8001b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADS1299_NDRDY_Pin);
 80019e6:	2020      	movs	r0, #32
 80019e8:	f000 fbf8 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80019f4:	4802      	ldr	r0, [pc, #8]	@ (8001a00 <SPI1_IRQHandler+0x10>)
 80019f6:	f002 fa39 	bl	8003e6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000088 	.word	0x20000088

08001a04 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a0e:	f004 f821 	bl	8005a54 <__errno>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2216      	movs	r2, #22
 8001a16:	601a      	str	r2, [r3, #0]
  return -1;
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_exit>:

void _exit (int status)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ffe7 	bl	8001a04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a36:	bf00      	nop
 8001a38:	e7fd      	b.n	8001a36 <_exit+0x12>
	...

08001a3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a40:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <SystemInit+0x20>)
 8001a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a46:	4a05      	ldr	r2, [pc, #20]	@ (8001a5c <SystemInit+0x20>)
 8001a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a64:	f7ff ffea 	bl	8001a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a68:	480c      	ldr	r0, [pc, #48]	@ (8001a9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a6a:	490d      	ldr	r1, [pc, #52]	@ (8001aa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa4 <LoopForever+0xe>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a70:	e002      	b.n	8001a78 <LoopCopyDataInit>

08001a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a76:	3304      	adds	r3, #4

08001a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a7c:	d3f9      	bcc.n	8001a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a80:	4c0a      	ldr	r4, [pc, #40]	@ (8001aac <LoopForever+0x16>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a84:	e001      	b.n	8001a8a <LoopFillZerobss>

08001a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a88:	3204      	adds	r2, #4

08001a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a8c:	d3fb      	bcc.n	8001a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a8e:	f003 ffe7 	bl	8005a60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a92:	f7ff fa55 	bl	8000f40 <main>

08001a96 <LoopForever>:

LoopForever:
    b LoopForever
 8001a96:	e7fe      	b.n	8001a96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a98:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001aa4:	080329c4 	.word	0x080329c4
  ldr r2, =_sbss
 8001aa8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001aac:	20006f8c 	.word	0x20006f8c

08001ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ab0:	e7fe      	b.n	8001ab0 <ADC1_2_IRQHandler>

08001ab2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001abc:	2003      	movs	r0, #3
 8001abe:	f000 f961 	bl	8001d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ac2:	200f      	movs	r0, #15
 8001ac4:	f000 f80e 	bl	8001ae4 <HAL_InitTick>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	71fb      	strb	r3, [r7, #7]
 8001ad2:	e001      	b.n	8001ad8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ad4:	f7ff fe8c 	bl	80017f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001af0:	4b17      	ldr	r3, [pc, #92]	@ (8001b50 <HAL_InitTick+0x6c>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d023      	beq.n	8001b40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001af8:	4b16      	ldr	r3, [pc, #88]	@ (8001b54 <HAL_InitTick+0x70>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <HAL_InitTick+0x6c>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f96d 	bl	8001dee <HAL_SYSTICK_Config>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10f      	bne.n	8001b3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b0f      	cmp	r3, #15
 8001b1e:	d809      	bhi.n	8001b34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b20:	2200      	movs	r2, #0
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f000 f937 	bl	8001d9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b58 <HAL_InitTick+0x74>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e007      	b.n	8001b44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	e004      	b.n	8001b44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	73fb      	strb	r3, [r7, #15]
 8001b3e:	e001      	b.n	8001b44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000008 	.word	0x20000008
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000004 	.word	0x20000004

08001b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b60:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_IncTick+0x20>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_IncTick+0x24>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <HAL_IncTick+0x24>)
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000008 	.word	0x20000008
 8001b80:	20004258 	.word	0x20004258

08001b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return uwTick;
 8001b88:	4b03      	ldr	r3, [pc, #12]	@ (8001b98 <HAL_GetTick+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20004258 	.word	0x20004258

08001b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba4:	f7ff ffee 	bl	8001b84 <HAL_GetTick>
 8001ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb4:	d005      	beq.n	8001bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <HAL_Delay+0x44>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bc2:	bf00      	nop
 8001bc4:	f7ff ffde 	bl	8001b84 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d8f7      	bhi.n	8001bc4 <HAL_Delay+0x28>
  {
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000008 	.word	0x20000008

08001be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c00:	4013      	ands	r3, r2
 8001c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c16:	4a04      	ldr	r2, [pc, #16]	@ (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	60d3      	str	r3, [r2, #12]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c30:	4b04      	ldr	r3, [pc, #16]	@ (8001c44 <__NVIC_GetPriorityGrouping+0x18>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	f003 0307 	and.w	r3, r3, #7
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	db0b      	blt.n	8001c72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	f003 021f 	and.w	r2, r3, #31
 8001c60:	4907      	ldr	r1, [pc, #28]	@ (8001c80 <__NVIC_EnableIRQ+0x38>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	2001      	movs	r0, #1
 8001c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000e100 	.word	0xe000e100

08001c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db0a      	blt.n	8001cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	490c      	ldr	r1, [pc, #48]	@ (8001cd0 <__NVIC_SetPriority+0x4c>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	0112      	lsls	r2, r2, #4
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cac:	e00a      	b.n	8001cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4908      	ldr	r1, [pc, #32]	@ (8001cd4 <__NVIC_SetPriority+0x50>)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	3b04      	subs	r3, #4
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	761a      	strb	r2, [r3, #24]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000e100 	.word	0xe000e100
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	@ 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f1c3 0307 	rsb	r3, r3, #7
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	bf28      	it	cs
 8001cf6:	2304      	movcs	r3, #4
 8001cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d902      	bls.n	8001d08 <NVIC_EncodePriority+0x30>
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	e000      	b.n	8001d0a <NVIC_EncodePriority+0x32>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	4313      	orrs	r3, r2
         );
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	@ 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d50:	d301      	bcc.n	8001d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00f      	b.n	8001d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d56:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <SysTick_Config+0x40>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5e:	210f      	movs	r1, #15
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	f7ff ff8e 	bl	8001c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <SysTick_Config+0x40>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6e:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <SysTick_Config+0x40>)
 8001d70:	2207      	movs	r2, #7
 8001d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	e000e010 	.word	0xe000e010

08001d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff29 	bl	8001be4 <__NVIC_SetPriorityGrouping>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dac:	f7ff ff3e 	bl	8001c2c <__NVIC_GetPriorityGrouping>
 8001db0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	6978      	ldr	r0, [r7, #20]
 8001db8:	f7ff ff8e 	bl	8001cd8 <NVIC_EncodePriority>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff5d 	bl	8001c84 <__NVIC_SetPriority>
}
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff31 	bl	8001c48 <__NVIC_EnableIRQ>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff ffa2 	bl	8001d40 <SysTick_Config>
 8001dfc:	4603      	mov	r3, r0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b084      	sub	sp, #16
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d005      	beq.n	8001e2a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2204      	movs	r2, #4
 8001e22:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
 8001e28:	e029      	b.n	8001e7e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 020e 	bic.w	r2, r2, #14
 8001e38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0201 	bic.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4e:	f003 021c 	and.w	r2, r3, #28
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	4798      	blx	r3
    }
  }
  return status;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e96:	e166      	b.n	8002166 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8158 	beq.w	8002160 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d005      	beq.n	8001ec8 <HAL_GPIO_Init+0x40>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d130      	bne.n	8001f2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001efe:	2201      	movs	r2, #1
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	091b      	lsrs	r3, r3, #4
 8001f14:	f003 0201 	and.w	r2, r3, #1
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d017      	beq.n	8001f66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	2203      	movs	r2, #3
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d123      	bne.n	8001fba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	08da      	lsrs	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3208      	adds	r2, #8
 8001f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	220f      	movs	r2, #15
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4013      	ands	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	691a      	ldr	r2, [r3, #16]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	08da      	lsrs	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3208      	adds	r2, #8
 8001fb4:	6939      	ldr	r1, [r7, #16]
 8001fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0203 	and.w	r2, r3, #3
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80b2 	beq.w	8002160 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffc:	4b61      	ldr	r3, [pc, #388]	@ (8002184 <HAL_GPIO_Init+0x2fc>)
 8001ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002000:	4a60      	ldr	r2, [pc, #384]	@ (8002184 <HAL_GPIO_Init+0x2fc>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6613      	str	r3, [r2, #96]	@ 0x60
 8002008:	4b5e      	ldr	r3, [pc, #376]	@ (8002184 <HAL_GPIO_Init+0x2fc>)
 800200a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002014:	4a5c      	ldr	r2, [pc, #368]	@ (8002188 <HAL_GPIO_Init+0x300>)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	220f      	movs	r2, #15
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800203e:	d02b      	beq.n	8002098 <HAL_GPIO_Init+0x210>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a52      	ldr	r2, [pc, #328]	@ (800218c <HAL_GPIO_Init+0x304>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d025      	beq.n	8002094 <HAL_GPIO_Init+0x20c>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a51      	ldr	r2, [pc, #324]	@ (8002190 <HAL_GPIO_Init+0x308>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d01f      	beq.n	8002090 <HAL_GPIO_Init+0x208>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a50      	ldr	r2, [pc, #320]	@ (8002194 <HAL_GPIO_Init+0x30c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d019      	beq.n	800208c <HAL_GPIO_Init+0x204>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a4f      	ldr	r2, [pc, #316]	@ (8002198 <HAL_GPIO_Init+0x310>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d013      	beq.n	8002088 <HAL_GPIO_Init+0x200>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a4e      	ldr	r2, [pc, #312]	@ (800219c <HAL_GPIO_Init+0x314>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d00d      	beq.n	8002084 <HAL_GPIO_Init+0x1fc>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a4d      	ldr	r2, [pc, #308]	@ (80021a0 <HAL_GPIO_Init+0x318>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d007      	beq.n	8002080 <HAL_GPIO_Init+0x1f8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a4c      	ldr	r2, [pc, #304]	@ (80021a4 <HAL_GPIO_Init+0x31c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d101      	bne.n	800207c <HAL_GPIO_Init+0x1f4>
 8002078:	2307      	movs	r3, #7
 800207a:	e00e      	b.n	800209a <HAL_GPIO_Init+0x212>
 800207c:	2308      	movs	r3, #8
 800207e:	e00c      	b.n	800209a <HAL_GPIO_Init+0x212>
 8002080:	2306      	movs	r3, #6
 8002082:	e00a      	b.n	800209a <HAL_GPIO_Init+0x212>
 8002084:	2305      	movs	r3, #5
 8002086:	e008      	b.n	800209a <HAL_GPIO_Init+0x212>
 8002088:	2304      	movs	r3, #4
 800208a:	e006      	b.n	800209a <HAL_GPIO_Init+0x212>
 800208c:	2303      	movs	r3, #3
 800208e:	e004      	b.n	800209a <HAL_GPIO_Init+0x212>
 8002090:	2302      	movs	r3, #2
 8002092:	e002      	b.n	800209a <HAL_GPIO_Init+0x212>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_GPIO_Init+0x212>
 8002098:	2300      	movs	r3, #0
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	f002 0203 	and.w	r2, r2, #3
 80020a0:	0092      	lsls	r2, r2, #2
 80020a2:	4093      	lsls	r3, r2
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020aa:	4937      	ldr	r1, [pc, #220]	@ (8002188 <HAL_GPIO_Init+0x300>)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	3302      	adds	r3, #2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020b8:	4b3b      	ldr	r3, [pc, #236]	@ (80021a8 <HAL_GPIO_Init+0x320>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020dc:	4a32      	ldr	r2, [pc, #200]	@ (80021a8 <HAL_GPIO_Init+0x320>)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020e2:	4b31      	ldr	r3, [pc, #196]	@ (80021a8 <HAL_GPIO_Init+0x320>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002106:	4a28      	ldr	r2, [pc, #160]	@ (80021a8 <HAL_GPIO_Init+0x320>)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800210c:	4b26      	ldr	r3, [pc, #152]	@ (80021a8 <HAL_GPIO_Init+0x320>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002130:	4a1d      	ldr	r2, [pc, #116]	@ (80021a8 <HAL_GPIO_Init+0x320>)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002136:	4b1c      	ldr	r3, [pc, #112]	@ (80021a8 <HAL_GPIO_Init+0x320>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	43db      	mvns	r3, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800215a:	4a13      	ldr	r2, [pc, #76]	@ (80021a8 <HAL_GPIO_Init+0x320>)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	3301      	adds	r3, #1
 8002164:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	f47f ae91 	bne.w	8001e98 <HAL_GPIO_Init+0x10>
  }
}
 8002176:	bf00      	nop
 8002178:	bf00      	nop
 800217a:	371c      	adds	r7, #28
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	40021000 	.word	0x40021000
 8002188:	40010000 	.word	0x40010000
 800218c:	48000400 	.word	0x48000400
 8002190:	48000800 	.word	0x48000800
 8002194:	48000c00 	.word	0x48000c00
 8002198:	48001000 	.word	0x48001000
 800219c:	48001400 	.word	0x48001400
 80021a0:	48001800 	.word	0x48001800
 80021a4:	48001c00 	.word	0x48001c00
 80021a8:	40010400 	.word	0x40010400

080021ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	807b      	strh	r3, [r7, #2]
 80021b8:	4613      	mov	r3, r2
 80021ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021bc:	787b      	ldrb	r3, [r7, #1]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021c8:	e002      	b.n	80021d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021e6:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e8:	695a      	ldr	r2, [r3, #20]
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d006      	beq.n	8002200 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021f2:	4a05      	ldr	r2, [pc, #20]	@ (8002208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff f888 	bl	8001310 <HAL_GPIO_EXTI_Callback>
  }
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40010400 	.word	0x40010400

0800220c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002210:	4b04      	ldr	r3, [pc, #16]	@ (8002224 <HAL_PWREx_GetVoltageRange+0x18>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40007000 	.word	0x40007000

08002228 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002236:	d130      	bne.n	800229a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002238:	4b23      	ldr	r3, [pc, #140]	@ (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002244:	d038      	beq.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002246:	4b20      	ldr	r3, [pc, #128]	@ (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800224e:	4a1e      	ldr	r2, [pc, #120]	@ (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002250:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002254:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002256:	4b1d      	ldr	r3, [pc, #116]	@ (80022cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2232      	movs	r2, #50	@ 0x32
 800225c:	fb02 f303 	mul.w	r3, r2, r3
 8002260:	4a1b      	ldr	r2, [pc, #108]	@ (80022d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	0c9b      	lsrs	r3, r3, #18
 8002268:	3301      	adds	r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800226c:	e002      	b.n	8002274 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3b01      	subs	r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002274:	4b14      	ldr	r3, [pc, #80]	@ (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002280:	d102      	bne.n	8002288 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f2      	bne.n	800226e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002288:	4b0f      	ldr	r3, [pc, #60]	@ (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002294:	d110      	bne.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e00f      	b.n	80022ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800229a:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022a6:	d007      	beq.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022a8:	4b07      	ldr	r3, [pc, #28]	@ (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022b0:	4a05      	ldr	r2, [pc, #20]	@ (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40007000 	.word	0x40007000
 80022cc:	20000000 	.word	0x20000000
 80022d0:	431bde83 	.word	0x431bde83

080022d4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d102      	bne.n	80022e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	f000 bc08 	b.w	8002af8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022e8:	4b96      	ldr	r3, [pc, #600]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022f2:	4b94      	ldr	r3, [pc, #592]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80e4 	beq.w	80024d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d007      	beq.n	8002320 <HAL_RCC_OscConfig+0x4c>
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	2b0c      	cmp	r3, #12
 8002314:	f040 808b 	bne.w	800242e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2b01      	cmp	r3, #1
 800231c:	f040 8087 	bne.w	800242e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002320:	4b88      	ldr	r3, [pc, #544]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_RCC_OscConfig+0x64>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e3df      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1a      	ldr	r2, [r3, #32]
 800233c:	4b81      	ldr	r3, [pc, #516]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b00      	cmp	r3, #0
 8002346:	d004      	beq.n	8002352 <HAL_RCC_OscConfig+0x7e>
 8002348:	4b7e      	ldr	r3, [pc, #504]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002350:	e005      	b.n	800235e <HAL_RCC_OscConfig+0x8a>
 8002352:	4b7c      	ldr	r3, [pc, #496]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 8002354:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800235e:	4293      	cmp	r3, r2
 8002360:	d223      	bcs.n	80023aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fd92 	bl	8002e90 <RCC_SetFlashLatencyFromMSIRange>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e3c0      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002376:	4b73      	ldr	r3, [pc, #460]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a72      	ldr	r2, [pc, #456]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 800237c:	f043 0308 	orr.w	r3, r3, #8
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	4b70      	ldr	r3, [pc, #448]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	496d      	ldr	r1, [pc, #436]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 8002390:	4313      	orrs	r3, r2
 8002392:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002394:	4b6b      	ldr	r3, [pc, #428]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	021b      	lsls	r3, r3, #8
 80023a2:	4968      	ldr	r1, [pc, #416]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
 80023a8:	e025      	b.n	80023f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023aa:	4b66      	ldr	r3, [pc, #408]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a65      	ldr	r2, [pc, #404]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b63      	ldr	r3, [pc, #396]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4960      	ldr	r1, [pc, #384]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023c8:	4b5e      	ldr	r3, [pc, #376]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	495b      	ldr	r1, [pc, #364]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fd52 	bl	8002e90 <RCC_SetFlashLatencyFromMSIRange>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e380      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023f6:	f000 fc87 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 80023fa:	4602      	mov	r2, r0
 80023fc:	4b51      	ldr	r3, [pc, #324]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	4950      	ldr	r1, [pc, #320]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 8002408:	5ccb      	ldrb	r3, [r1, r3]
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	fa22 f303 	lsr.w	r3, r2, r3
 8002412:	4a4e      	ldr	r2, [pc, #312]	@ (800254c <HAL_RCC_OscConfig+0x278>)
 8002414:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002416:	4b4e      	ldr	r3, [pc, #312]	@ (8002550 <HAL_RCC_OscConfig+0x27c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fb62 	bl	8001ae4 <HAL_InitTick>
 8002420:	4603      	mov	r3, r0
 8002422:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d052      	beq.n	80024d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	e364      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d032      	beq.n	800249c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002436:	4b43      	ldr	r3, [pc, #268]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a42      	ldr	r2, [pc, #264]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002442:	f7ff fb9f 	bl	8001b84 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800244a:	f7ff fb9b 	bl	8001b84 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e34d      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800245c:	4b39      	ldr	r3, [pc, #228]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002468:	4b36      	ldr	r3, [pc, #216]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a35      	ldr	r2, [pc, #212]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 800246e:	f043 0308 	orr.w	r3, r3, #8
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b33      	ldr	r3, [pc, #204]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4930      	ldr	r1, [pc, #192]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002486:	4b2f      	ldr	r3, [pc, #188]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	492b      	ldr	r1, [pc, #172]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 8002496:	4313      	orrs	r3, r2
 8002498:	604b      	str	r3, [r1, #4]
 800249a:	e01a      	b.n	80024d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800249c:	4b29      	ldr	r3, [pc, #164]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a28      	ldr	r2, [pc, #160]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 80024a2:	f023 0301 	bic.w	r3, r3, #1
 80024a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024a8:	f7ff fb6c 	bl	8001b84 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024b0:	f7ff fb68 	bl	8001b84 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e31a      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024c2:	4b20      	ldr	r3, [pc, #128]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x1dc>
 80024ce:	e000      	b.n	80024d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d073      	beq.n	80025c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_OscConfig+0x21c>
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2b0c      	cmp	r3, #12
 80024e8:	d10e      	bne.n	8002508 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d10b      	bne.n	8002508 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	4b14      	ldr	r3, [pc, #80]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d063      	beq.n	80025c4 <HAL_RCC_OscConfig+0x2f0>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d15f      	bne.n	80025c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e2f7      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002510:	d106      	bne.n	8002520 <HAL_RCC_OscConfig+0x24c>
 8002512:	4b0c      	ldr	r3, [pc, #48]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a0b      	ldr	r2, [pc, #44]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 8002518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	e025      	b.n	800256c <HAL_RCC_OscConfig+0x298>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002528:	d114      	bne.n	8002554 <HAL_RCC_OscConfig+0x280>
 800252a:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a05      	ldr	r2, [pc, #20]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 8002530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b03      	ldr	r3, [pc, #12]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a02      	ldr	r2, [pc, #8]	@ (8002544 <HAL_RCC_OscConfig+0x270>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e013      	b.n	800256c <HAL_RCC_OscConfig+0x298>
 8002544:	40021000 	.word	0x40021000
 8002548:	08032954 	.word	0x08032954
 800254c:	20000000 	.word	0x20000000
 8002550:	20000004 	.word	0x20000004
 8002554:	4ba0      	ldr	r3, [pc, #640]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a9f      	ldr	r2, [pc, #636]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 800255a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b9d      	ldr	r3, [pc, #628]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a9c      	ldr	r2, [pc, #624]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 8002566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800256a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d013      	beq.n	800259c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7ff fb06 	bl	8001b84 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800257c:	f7ff fb02 	bl	8001b84 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	@ 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e2b4      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800258e:	4b92      	ldr	r3, [pc, #584]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0x2a8>
 800259a:	e014      	b.n	80025c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7ff faf2 	bl	8001b84 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a4:	f7ff faee 	bl	8001b84 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	@ 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e2a0      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025b6:	4b88      	ldr	r3, [pc, #544]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x2d0>
 80025c2:	e000      	b.n	80025c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d060      	beq.n	8002694 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d005      	beq.n	80025e4 <HAL_RCC_OscConfig+0x310>
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2b0c      	cmp	r3, #12
 80025dc:	d119      	bne.n	8002612 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d116      	bne.n	8002612 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025e4:	4b7c      	ldr	r3, [pc, #496]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_OscConfig+0x328>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e27d      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fc:	4b76      	ldr	r3, [pc, #472]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	061b      	lsls	r3, r3, #24
 800260a:	4973      	ldr	r1, [pc, #460]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002610:	e040      	b.n	8002694 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d023      	beq.n	8002662 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800261a:	4b6f      	ldr	r3, [pc, #444]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a6e      	ldr	r2, [pc, #440]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7ff faad 	bl	8001b84 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262e:	f7ff faa9 	bl	8001b84 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e25b      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002640:	4b65      	ldr	r3, [pc, #404]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264c:	4b62      	ldr	r3, [pc, #392]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	061b      	lsls	r3, r3, #24
 800265a:	495f      	ldr	r1, [pc, #380]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
 8002660:	e018      	b.n	8002694 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002662:	4b5d      	ldr	r3, [pc, #372]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a5c      	ldr	r2, [pc, #368]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 8002668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800266c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266e:	f7ff fa89 	bl	8001b84 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002676:	f7ff fa85 	bl	8001b84 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e237      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002688:	4b53      	ldr	r3, [pc, #332]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d03c      	beq.n	800271a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d01c      	beq.n	80026e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a8:	4b4b      	ldr	r3, [pc, #300]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 80026aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ae:	4a4a      	ldr	r2, [pc, #296]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b8:	f7ff fa64 	bl	8001b84 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c0:	f7ff fa60 	bl	8001b84 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e212      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026d2:	4b41      	ldr	r3, [pc, #260]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 80026d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0ef      	beq.n	80026c0 <HAL_RCC_OscConfig+0x3ec>
 80026e0:	e01b      	b.n	800271a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e2:	4b3d      	ldr	r3, [pc, #244]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 80026e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e8:	4a3b      	ldr	r2, [pc, #236]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 80026ea:	f023 0301 	bic.w	r3, r3, #1
 80026ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f2:	f7ff fa47 	bl	8001b84 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026fa:	f7ff fa43 	bl	8001b84 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e1f5      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800270c:	4b32      	ldr	r3, [pc, #200]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 800270e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1ef      	bne.n	80026fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 80a6 	beq.w	8002874 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002728:	2300      	movs	r3, #0
 800272a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800272c:	4b2a      	ldr	r3, [pc, #168]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10d      	bne.n	8002754 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002738:	4b27      	ldr	r3, [pc, #156]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273c:	4a26      	ldr	r2, [pc, #152]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 800273e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002742:	6593      	str	r3, [r2, #88]	@ 0x58
 8002744:	4b24      	ldr	r3, [pc, #144]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002750:	2301      	movs	r3, #1
 8002752:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002754:	4b21      	ldr	r3, [pc, #132]	@ (80027dc <HAL_RCC_OscConfig+0x508>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d118      	bne.n	8002792 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002760:	4b1e      	ldr	r3, [pc, #120]	@ (80027dc <HAL_RCC_OscConfig+0x508>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1d      	ldr	r2, [pc, #116]	@ (80027dc <HAL_RCC_OscConfig+0x508>)
 8002766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800276a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276c:	f7ff fa0a 	bl	8001b84 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002774:	f7ff fa06 	bl	8001b84 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e1b8      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002786:	4b15      	ldr	r3, [pc, #84]	@ (80027dc <HAL_RCC_OscConfig+0x508>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d108      	bne.n	80027ac <HAL_RCC_OscConfig+0x4d8>
 800279a:	4b0f      	ldr	r3, [pc, #60]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a0:	4a0d      	ldr	r2, [pc, #52]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027aa:	e029      	b.n	8002800 <HAL_RCC_OscConfig+0x52c>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b05      	cmp	r3, #5
 80027b2:	d115      	bne.n	80027e0 <HAL_RCC_OscConfig+0x50c>
 80027b4:	4b08      	ldr	r3, [pc, #32]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ba:	4a07      	ldr	r2, [pc, #28]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 80027bc:	f043 0304 	orr.w	r3, r3, #4
 80027c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027c4:	4b04      	ldr	r3, [pc, #16]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 80027c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ca:	4a03      	ldr	r2, [pc, #12]	@ (80027d8 <HAL_RCC_OscConfig+0x504>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027d4:	e014      	b.n	8002800 <HAL_RCC_OscConfig+0x52c>
 80027d6:	bf00      	nop
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40007000 	.word	0x40007000
 80027e0:	4b9d      	ldr	r3, [pc, #628]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 80027e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e6:	4a9c      	ldr	r2, [pc, #624]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027f0:	4b99      	ldr	r3, [pc, #612]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f6:	4a98      	ldr	r2, [pc, #608]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 80027f8:	f023 0304 	bic.w	r3, r3, #4
 80027fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d016      	beq.n	8002836 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002808:	f7ff f9bc 	bl	8001b84 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800280e:	e00a      	b.n	8002826 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002810:	f7ff f9b8 	bl	8001b84 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e168      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002826:	4b8c      	ldr	r3, [pc, #560]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 8002828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0ed      	beq.n	8002810 <HAL_RCC_OscConfig+0x53c>
 8002834:	e015      	b.n	8002862 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002836:	f7ff f9a5 	bl	8001b84 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800283c:	e00a      	b.n	8002854 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283e:	f7ff f9a1 	bl	8001b84 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284c:	4293      	cmp	r3, r2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e151      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002854:	4b80      	ldr	r3, [pc, #512]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 8002856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1ed      	bne.n	800283e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002862:	7ffb      	ldrb	r3, [r7, #31]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d105      	bne.n	8002874 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002868:	4b7b      	ldr	r3, [pc, #492]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286c:	4a7a      	ldr	r2, [pc, #488]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 800286e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002872:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b00      	cmp	r3, #0
 800287e:	d03c      	beq.n	80028fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	2b00      	cmp	r3, #0
 8002886:	d01c      	beq.n	80028c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002888:	4b73      	ldr	r3, [pc, #460]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 800288a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800288e:	4a72      	ldr	r2, [pc, #456]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002898:	f7ff f974 	bl	8001b84 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028a0:	f7ff f970 	bl	8001b84 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e122      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028b2:	4b69      	ldr	r3, [pc, #420]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 80028b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0ef      	beq.n	80028a0 <HAL_RCC_OscConfig+0x5cc>
 80028c0:	e01b      	b.n	80028fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028c2:	4b65      	ldr	r3, [pc, #404]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 80028c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028c8:	4a63      	ldr	r2, [pc, #396]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 80028ca:	f023 0301 	bic.w	r3, r3, #1
 80028ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d2:	f7ff f957 	bl	8001b84 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028da:	f7ff f953 	bl	8001b84 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e105      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028ec:	4b5a      	ldr	r3, [pc, #360]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 80028ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1ef      	bne.n	80028da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80f9 	beq.w	8002af6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002908:	2b02      	cmp	r3, #2
 800290a:	f040 80cf 	bne.w	8002aac <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800290e:	4b52      	ldr	r3, [pc, #328]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f003 0203 	and.w	r2, r3, #3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291e:	429a      	cmp	r2, r3
 8002920:	d12c      	bne.n	800297c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292c:	3b01      	subs	r3, #1
 800292e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d123      	bne.n	800297c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d11b      	bne.n	800297c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002950:	429a      	cmp	r2, r3
 8002952:	d113      	bne.n	800297c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295e:	085b      	lsrs	r3, r3, #1
 8002960:	3b01      	subs	r3, #1
 8002962:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002964:	429a      	cmp	r2, r3
 8002966:	d109      	bne.n	800297c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002972:	085b      	lsrs	r3, r3, #1
 8002974:	3b01      	subs	r3, #1
 8002976:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002978:	429a      	cmp	r2, r3
 800297a:	d071      	beq.n	8002a60 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2b0c      	cmp	r3, #12
 8002980:	d068      	beq.n	8002a54 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002982:	4b35      	ldr	r3, [pc, #212]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d105      	bne.n	800299a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800298e:	4b32      	ldr	r3, [pc, #200]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0ac      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800299e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 80029a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029aa:	f7ff f8eb 	bl	8001b84 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b2:	f7ff f8e7 	bl	8001b84 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e099      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c4:	4b24      	ldr	r3, [pc, #144]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f0      	bne.n	80029b2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d0:	4b21      	ldr	r3, [pc, #132]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	4b21      	ldr	r3, [pc, #132]	@ (8002a5c <HAL_RCC_OscConfig+0x788>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80029e0:	3a01      	subs	r2, #1
 80029e2:	0112      	lsls	r2, r2, #4
 80029e4:	4311      	orrs	r1, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80029ea:	0212      	lsls	r2, r2, #8
 80029ec:	4311      	orrs	r1, r2
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029f2:	0852      	lsrs	r2, r2, #1
 80029f4:	3a01      	subs	r2, #1
 80029f6:	0552      	lsls	r2, r2, #21
 80029f8:	4311      	orrs	r1, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80029fe:	0852      	lsrs	r2, r2, #1
 8002a00:	3a01      	subs	r2, #1
 8002a02:	0652      	lsls	r2, r2, #25
 8002a04:	4311      	orrs	r1, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a0a:	06d2      	lsls	r2, r2, #27
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	4912      	ldr	r1, [pc, #72]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a14:	4b10      	ldr	r3, [pc, #64]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a0f      	ldr	r2, [pc, #60]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 8002a1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a20:	4b0d      	ldr	r3, [pc, #52]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4a0c      	ldr	r2, [pc, #48]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 8002a26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a2c:	f7ff f8aa 	bl	8001b84 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a34:	f7ff f8a6 	bl	8001b84 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e058      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a46:	4b04      	ldr	r3, [pc, #16]	@ (8002a58 <HAL_RCC_OscConfig+0x784>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a52:	e050      	b.n	8002af6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e04f      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a60:	4b27      	ldr	r3, [pc, #156]	@ (8002b00 <HAL_RCC_OscConfig+0x82c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d144      	bne.n	8002af6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a6c:	4b24      	ldr	r3, [pc, #144]	@ (8002b00 <HAL_RCC_OscConfig+0x82c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a23      	ldr	r2, [pc, #140]	@ (8002b00 <HAL_RCC_OscConfig+0x82c>)
 8002a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a78:	4b21      	ldr	r3, [pc, #132]	@ (8002b00 <HAL_RCC_OscConfig+0x82c>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4a20      	ldr	r2, [pc, #128]	@ (8002b00 <HAL_RCC_OscConfig+0x82c>)
 8002a7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a84:	f7ff f87e 	bl	8001b84 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7ff f87a 	bl	8001b84 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e02c      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9e:	4b18      	ldr	r3, [pc, #96]	@ (8002b00 <HAL_RCC_OscConfig+0x82c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x7b8>
 8002aaa:	e024      	b.n	8002af6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	d01f      	beq.n	8002af2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab2:	4b13      	ldr	r3, [pc, #76]	@ (8002b00 <HAL_RCC_OscConfig+0x82c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a12      	ldr	r2, [pc, #72]	@ (8002b00 <HAL_RCC_OscConfig+0x82c>)
 8002ab8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7ff f861 	bl	8001b84 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac6:	f7ff f85d 	bl	8001b84 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e00f      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad8:	4b09      	ldr	r3, [pc, #36]	@ (8002b00 <HAL_RCC_OscConfig+0x82c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f0      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ae4:	4b06      	ldr	r3, [pc, #24]	@ (8002b00 <HAL_RCC_OscConfig+0x82c>)
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	4905      	ldr	r1, [pc, #20]	@ (8002b00 <HAL_RCC_OscConfig+0x82c>)
 8002aea:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <HAL_RCC_OscConfig+0x830>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	60cb      	str	r3, [r1, #12]
 8002af0:	e001      	b.n	8002af6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3720      	adds	r7, #32
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40021000 	.word	0x40021000
 8002b04:	feeefffc 	.word	0xfeeefffc

08002b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0e7      	b.n	8002cec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b75      	ldr	r3, [pc, #468]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d910      	bls.n	8002b4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b72      	ldr	r3, [pc, #456]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 0207 	bic.w	r2, r3, #7
 8002b32:	4970      	ldr	r1, [pc, #448]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b6e      	ldr	r3, [pc, #440]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0cf      	b.n	8002cec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d010      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	4b66      	ldr	r3, [pc, #408]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d908      	bls.n	8002b7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b68:	4b63      	ldr	r3, [pc, #396]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4960      	ldr	r1, [pc, #384]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d04c      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d107      	bne.n	8002b9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b8e:	4b5a      	ldr	r3, [pc, #360]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d121      	bne.n	8002bde <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e0a6      	b.n	8002cec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ba6:	4b54      	ldr	r3, [pc, #336]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d115      	bne.n	8002bde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e09a      	b.n	8002cec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bbe:	4b4e      	ldr	r3, [pc, #312]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e08e      	b.n	8002cec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bce:	4b4a      	ldr	r3, [pc, #296]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e086      	b.n	8002cec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bde:	4b46      	ldr	r3, [pc, #280]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f023 0203 	bic.w	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4943      	ldr	r1, [pc, #268]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf0:	f7fe ffc8 	bl	8001b84 <HAL_GetTick>
 8002bf4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf8:	f7fe ffc4 	bl	8001b84 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e06e      	b.n	8002cec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0e:	4b3a      	ldr	r3, [pc, #232]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 020c 	and.w	r2, r3, #12
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d1eb      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d010      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	4b31      	ldr	r3, [pc, #196]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d208      	bcs.n	8002c4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	492b      	ldr	r1, [pc, #172]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c4e:	4b29      	ldr	r3, [pc, #164]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d210      	bcs.n	8002c7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5c:	4b25      	ldr	r3, [pc, #148]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f023 0207 	bic.w	r2, r3, #7
 8002c64:	4923      	ldr	r1, [pc, #140]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6c:	4b21      	ldr	r3, [pc, #132]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d001      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e036      	b.n	8002cec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d008      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	4918      	ldr	r1, [pc, #96]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d009      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ca8:	4b13      	ldr	r3, [pc, #76]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4910      	ldr	r1, [pc, #64]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cbc:	f000 f824 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	091b      	lsrs	r3, r3, #4
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	490b      	ldr	r1, [pc, #44]	@ (8002cfc <HAL_RCC_ClockConfig+0x1f4>)
 8002cce:	5ccb      	ldrb	r3, [r1, r3]
 8002cd0:	f003 031f 	and.w	r3, r3, #31
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd8:	4a09      	ldr	r2, [pc, #36]	@ (8002d00 <HAL_RCC_ClockConfig+0x1f8>)
 8002cda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cdc:	4b09      	ldr	r3, [pc, #36]	@ (8002d04 <HAL_RCC_ClockConfig+0x1fc>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe feff 	bl	8001ae4 <HAL_InitTick>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cea:	7afb      	ldrb	r3, [r7, #11]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40022000 	.word	0x40022000
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	08032954 	.word	0x08032954
 8002d00:	20000000 	.word	0x20000000
 8002d04:	20000004 	.word	0x20000004

08002d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b089      	sub	sp, #36	@ 0x24
 8002d0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	2300      	movs	r3, #0
 8002d14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d16:	4b3e      	ldr	r3, [pc, #248]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d20:	4b3b      	ldr	r3, [pc, #236]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0x34>
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	2b0c      	cmp	r3, #12
 8002d34:	d121      	bne.n	8002d7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d11e      	bne.n	8002d7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d3c:	4b34      	ldr	r3, [pc, #208]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d48:	4b31      	ldr	r3, [pc, #196]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d4e:	0a1b      	lsrs	r3, r3, #8
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	e005      	b.n	8002d64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d58:	4b2d      	ldr	r3, [pc, #180]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d64:	4a2b      	ldr	r2, [pc, #172]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10d      	bne.n	8002d90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d78:	e00a      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d102      	bne.n	8002d86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d80:	4b25      	ldr	r3, [pc, #148]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d82:	61bb      	str	r3, [r7, #24]
 8002d84:	e004      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d8c:	4b23      	ldr	r3, [pc, #140]	@ (8002e1c <HAL_RCC_GetSysClockFreq+0x114>)
 8002d8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	2b0c      	cmp	r3, #12
 8002d94:	d134      	bne.n	8002e00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d96:	4b1e      	ldr	r3, [pc, #120]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d003      	beq.n	8002dae <HAL_RCC_GetSysClockFreq+0xa6>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d003      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0xac>
 8002dac:	e005      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dae:	4b1a      	ldr	r3, [pc, #104]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002db0:	617b      	str	r3, [r7, #20]
      break;
 8002db2:	e005      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002db4:	4b19      	ldr	r3, [pc, #100]	@ (8002e1c <HAL_RCC_GetSysClockFreq+0x114>)
 8002db6:	617b      	str	r3, [r7, #20]
      break;
 8002db8:	e002      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	617b      	str	r3, [r7, #20]
      break;
 8002dbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dc0:	4b13      	ldr	r3, [pc, #76]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	3301      	adds	r3, #1
 8002dcc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dce:	4b10      	ldr	r3, [pc, #64]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	0a1b      	lsrs	r3, r3, #8
 8002dd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	fb03 f202 	mul.w	r2, r3, r2
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002de6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	0e5b      	lsrs	r3, r3, #25
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	3301      	adds	r3, #1
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e00:	69bb      	ldr	r3, [r7, #24]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3724      	adds	r7, #36	@ 0x24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	0803296c 	.word	0x0803296c
 8002e18:	00f42400 	.word	0x00f42400
 8002e1c:	007a1200 	.word	0x007a1200

08002e20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e24:	4b03      	ldr	r3, [pc, #12]	@ (8002e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000000 	.word	0x20000000

08002e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e3c:	f7ff fff0 	bl	8002e20 <HAL_RCC_GetHCLKFreq>
 8002e40:	4602      	mov	r2, r0
 8002e42:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	0a1b      	lsrs	r3, r3, #8
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	4904      	ldr	r1, [pc, #16]	@ (8002e60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e4e:	5ccb      	ldrb	r3, [r1, r3]
 8002e50:	f003 031f 	and.w	r3, r3, #31
 8002e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	08032964 	.word	0x08032964

08002e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e68:	f7ff ffda 	bl	8002e20 <HAL_RCC_GetHCLKFreq>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	0adb      	lsrs	r3, r3, #11
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	4904      	ldr	r1, [pc, #16]	@ (8002e8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e7a:	5ccb      	ldrb	r3, [r1, r3]
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	08032964 	.word	0x08032964

08002e90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e98:	2300      	movs	r3, #0
 8002e9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ea8:	f7ff f9b0 	bl	800220c <HAL_PWREx_GetVoltageRange>
 8002eac:	6178      	str	r0, [r7, #20]
 8002eae:	e014      	b.n	8002eda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eb0:	4b25      	ldr	r3, [pc, #148]	@ (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb4:	4a24      	ldr	r2, [pc, #144]	@ (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eba:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ebc:	4b22      	ldr	r3, [pc, #136]	@ (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ec8:	f7ff f9a0 	bl	800220c <HAL_PWREx_GetVoltageRange>
 8002ecc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ece:	4b1e      	ldr	r3, [pc, #120]	@ (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ed4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ed8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ee0:	d10b      	bne.n	8002efa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b80      	cmp	r3, #128	@ 0x80
 8002ee6:	d919      	bls.n	8002f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2ba0      	cmp	r3, #160	@ 0xa0
 8002eec:	d902      	bls.n	8002ef4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eee:	2302      	movs	r3, #2
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	e013      	b.n	8002f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	e010      	b.n	8002f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b80      	cmp	r3, #128	@ 0x80
 8002efe:	d902      	bls.n	8002f06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f00:	2303      	movs	r3, #3
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	e00a      	b.n	8002f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b80      	cmp	r3, #128	@ 0x80
 8002f0a:	d102      	bne.n	8002f12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	e004      	b.n	8002f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b70      	cmp	r3, #112	@ 0x70
 8002f16:	d101      	bne.n	8002f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f18:	2301      	movs	r3, #1
 8002f1a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f023 0207 	bic.w	r2, r3, #7
 8002f24:	4909      	ldr	r1, [pc, #36]	@ (8002f4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f2c:	4b07      	ldr	r3, [pc, #28]	@ (8002f4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d001      	beq.n	8002f3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40022000 	.word	0x40022000

08002f50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f58:	2300      	movs	r3, #0
 8002f5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d041      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f70:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f74:	d02a      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f76:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f7a:	d824      	bhi.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f80:	d008      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f86:	d81e      	bhi.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f90:	d010      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f92:	e018      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f94:	4b86      	ldr	r3, [pc, #536]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4a85      	ldr	r2, [pc, #532]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fa0:	e015      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 facd 	bl	8003548 <RCCEx_PLLSAI1_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fb2:	e00c      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3320      	adds	r3, #32
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fbb6 	bl	800372c <RCCEx_PLLSAI2_Config>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fc4:	e003      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	74fb      	strb	r3, [r7, #19]
      break;
 8002fca:	e000      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002fcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fce:	7cfb      	ldrb	r3, [r7, #19]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10b      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fd4:	4b76      	ldr	r3, [pc, #472]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fe2:	4973      	ldr	r1, [pc, #460]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002fea:	e001      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fec:	7cfb      	ldrb	r3, [r7, #19]
 8002fee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d041      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003000:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003004:	d02a      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003006:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800300a:	d824      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800300c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003010:	d008      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003012:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003016:	d81e      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800301c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003020:	d010      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003022:	e018      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003024:	4b62      	ldr	r3, [pc, #392]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4a61      	ldr	r2, [pc, #388]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800302e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003030:	e015      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3304      	adds	r3, #4
 8003036:	2100      	movs	r1, #0
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fa85 	bl	8003548 <RCCEx_PLLSAI1_Config>
 800303e:	4603      	mov	r3, r0
 8003040:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003042:	e00c      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3320      	adds	r3, #32
 8003048:	2100      	movs	r1, #0
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fb6e 	bl	800372c <RCCEx_PLLSAI2_Config>
 8003050:	4603      	mov	r3, r0
 8003052:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003054:	e003      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	74fb      	strb	r3, [r7, #19]
      break;
 800305a:	e000      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800305c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800305e:	7cfb      	ldrb	r3, [r7, #19]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003064:	4b52      	ldr	r3, [pc, #328]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003072:	494f      	ldr	r1, [pc, #316]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800307a:	e001      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307c:	7cfb      	ldrb	r3, [r7, #19]
 800307e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80a0 	beq.w	80031ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003092:	4b47      	ldr	r3, [pc, #284]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00d      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a8:	4b41      	ldr	r3, [pc, #260]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ac:	4a40      	ldr	r2, [pc, #256]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80030b4:	4b3e      	ldr	r3, [pc, #248]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c0:	2301      	movs	r3, #1
 80030c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030c4:	4b3b      	ldr	r3, [pc, #236]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a3a      	ldr	r2, [pc, #232]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030d0:	f7fe fd58 	bl	8001b84 <HAL_GetTick>
 80030d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030d6:	e009      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d8:	f7fe fd54 	bl	8001b84 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d902      	bls.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	74fb      	strb	r3, [r7, #19]
        break;
 80030ea:	e005      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030ec:	4b31      	ldr	r3, [pc, #196]	@ (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0ef      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80030f8:	7cfb      	ldrb	r3, [r7, #19]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d15c      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030fe:	4b2c      	ldr	r3, [pc, #176]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003104:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003108:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01f      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	429a      	cmp	r2, r3
 800311a:	d019      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800311c:	4b24      	ldr	r3, [pc, #144]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003126:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003128:	4b21      	ldr	r3, [pc, #132]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312e:	4a20      	ldr	r2, [pc, #128]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003138:	4b1d      	ldr	r3, [pc, #116]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313e:	4a1c      	ldr	r2, [pc, #112]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003140:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003148:	4a19      	ldr	r2, [pc, #100]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d016      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315a:	f7fe fd13 	bl	8001b84 <HAL_GetTick>
 800315e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003160:	e00b      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003162:	f7fe fd0f 	bl	8001b84 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003170:	4293      	cmp	r3, r2
 8003172:	d902      	bls.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	74fb      	strb	r3, [r7, #19]
            break;
 8003178:	e006      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800317a:	4b0d      	ldr	r3, [pc, #52]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0ec      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10c      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800318e:	4b08      	ldr	r3, [pc, #32]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003194:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800319e:	4904      	ldr	r1, [pc, #16]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031a6:	e009      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031a8:	7cfb      	ldrb	r3, [r7, #19]
 80031aa:	74bb      	strb	r3, [r7, #18]
 80031ac:	e006      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b8:	7cfb      	ldrb	r3, [r7, #19]
 80031ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031bc:	7c7b      	ldrb	r3, [r7, #17]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d105      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c2:	4ba6      	ldr	r3, [pc, #664]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c6:	4aa5      	ldr	r2, [pc, #660]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031da:	4ba0      	ldr	r3, [pc, #640]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e0:	f023 0203 	bic.w	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e8:	499c      	ldr	r1, [pc, #624]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031fc:	4b97      	ldr	r3, [pc, #604]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003202:	f023 020c 	bic.w	r2, r3, #12
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320a:	4994      	ldr	r1, [pc, #592]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800321e:	4b8f      	ldr	r3, [pc, #572]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003224:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	498b      	ldr	r1, [pc, #556]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003240:	4b86      	ldr	r3, [pc, #536]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003246:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324e:	4983      	ldr	r1, [pc, #524]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003262:	4b7e      	ldr	r3, [pc, #504]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003268:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003270:	497a      	ldr	r1, [pc, #488]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0320 	and.w	r3, r3, #32
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003284:	4b75      	ldr	r3, [pc, #468]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003292:	4972      	ldr	r1, [pc, #456]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032a6:	4b6d      	ldr	r3, [pc, #436]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b4:	4969      	ldr	r1, [pc, #420]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032c8:	4b64      	ldr	r3, [pc, #400]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032d6:	4961      	ldr	r1, [pc, #388]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ea:	4b5c      	ldr	r3, [pc, #368]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032f8:	4958      	ldr	r1, [pc, #352]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800330c:	4b53      	ldr	r3, [pc, #332]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003312:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331a:	4950      	ldr	r1, [pc, #320]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800332e:	4b4b      	ldr	r3, [pc, #300]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003334:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333c:	4947      	ldr	r1, [pc, #284]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003350:	4b42      	ldr	r3, [pc, #264]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003352:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003356:	f023 0203 	bic.w	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335e:	493f      	ldr	r1, [pc, #252]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d028      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003372:	4b3a      	ldr	r3, [pc, #232]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003378:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003380:	4936      	ldr	r1, [pc, #216]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003390:	d106      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003392:	4b32      	ldr	r3, [pc, #200]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	4a31      	ldr	r2, [pc, #196]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003398:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800339c:	60d3      	str	r3, [r2, #12]
 800339e:	e011      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3304      	adds	r3, #4
 80033ae:	2101      	movs	r1, #1
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 f8c9 	bl	8003548 <RCCEx_PLLSAI1_Config>
 80033b6:	4603      	mov	r3, r0
 80033b8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033ba:	7cfb      	ldrb	r3, [r7, #19]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80033c0:	7cfb      	ldrb	r3, [r7, #19]
 80033c2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d028      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033d0:	4b22      	ldr	r3, [pc, #136]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033de:	491f      	ldr	r1, [pc, #124]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033ee:	d106      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033f0:	4b1a      	ldr	r3, [pc, #104]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4a19      	ldr	r2, [pc, #100]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033fa:	60d3      	str	r3, [r2, #12]
 80033fc:	e011      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003402:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003406:	d10c      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3304      	adds	r3, #4
 800340c:	2101      	movs	r1, #1
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f89a 	bl	8003548 <RCCEx_PLLSAI1_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003418:	7cfb      	ldrb	r3, [r7, #19]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800341e:	7cfb      	ldrb	r3, [r7, #19]
 8003420:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d02a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800342e:	4b0b      	ldr	r3, [pc, #44]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003434:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800343c:	4907      	ldr	r1, [pc, #28]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003448:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800344c:	d108      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800344e:	4b03      	ldr	r3, [pc, #12]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	4a02      	ldr	r2, [pc, #8]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003454:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003458:	60d3      	str	r3, [r2, #12]
 800345a:	e013      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800345c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003464:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003468:	d10c      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	2101      	movs	r1, #1
 8003470:	4618      	mov	r0, r3
 8003472:	f000 f869 	bl	8003548 <RCCEx_PLLSAI1_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800347a:	7cfb      	ldrb	r3, [r7, #19]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003480:	7cfb      	ldrb	r3, [r7, #19]
 8003482:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d02f      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003490:	4b2c      	ldr	r3, [pc, #176]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003496:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800349e:	4929      	ldr	r1, [pc, #164]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034ae:	d10d      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3304      	adds	r3, #4
 80034b4:	2102      	movs	r1, #2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 f846 	bl	8003548 <RCCEx_PLLSAI1_Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034c0:	7cfb      	ldrb	r3, [r7, #19]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d014      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80034c6:	7cfb      	ldrb	r3, [r7, #19]
 80034c8:	74bb      	strb	r3, [r7, #18]
 80034ca:	e011      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3320      	adds	r3, #32
 80034da:	2102      	movs	r1, #2
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 f925 	bl	800372c <RCCEx_PLLSAI2_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034e6:	7cfb      	ldrb	r3, [r7, #19]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80034ec:	7cfb      	ldrb	r3, [r7, #19]
 80034ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00b      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034fc:	4b11      	ldr	r3, [pc, #68]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003502:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800350c:	490d      	ldr	r1, [pc, #52]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00b      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003520:	4b08      	ldr	r3, [pc, #32]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003526:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003530:	4904      	ldr	r1, [pc, #16]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003538:	7cbb      	ldrb	r3, [r7, #18]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000

08003548 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003556:	4b74      	ldr	r3, [pc, #464]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d018      	beq.n	8003594 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003562:	4b71      	ldr	r3, [pc, #452]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f003 0203 	and.w	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d10d      	bne.n	800358e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
       ||
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800357a:	4b6b      	ldr	r3, [pc, #428]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
       ||
 800358a:	429a      	cmp	r2, r3
 800358c:	d047      	beq.n	800361e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	73fb      	strb	r3, [r7, #15]
 8003592:	e044      	b.n	800361e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b03      	cmp	r3, #3
 800359a:	d018      	beq.n	80035ce <RCCEx_PLLSAI1_Config+0x86>
 800359c:	2b03      	cmp	r3, #3
 800359e:	d825      	bhi.n	80035ec <RCCEx_PLLSAI1_Config+0xa4>
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d002      	beq.n	80035aa <RCCEx_PLLSAI1_Config+0x62>
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d009      	beq.n	80035bc <RCCEx_PLLSAI1_Config+0x74>
 80035a8:	e020      	b.n	80035ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d11d      	bne.n	80035f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ba:	e01a      	b.n	80035f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035bc:	4b5a      	ldr	r3, [pc, #360]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d116      	bne.n	80035f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035cc:	e013      	b.n	80035f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035ce:	4b56      	ldr	r3, [pc, #344]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10f      	bne.n	80035fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035da:	4b53      	ldr	r3, [pc, #332]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d109      	bne.n	80035fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035ea:	e006      	b.n	80035fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
      break;
 80035f0:	e004      	b.n	80035fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035f2:	bf00      	nop
 80035f4:	e002      	b.n	80035fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035f6:	bf00      	nop
 80035f8:	e000      	b.n	80035fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10d      	bne.n	800361e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003602:	4b49      	ldr	r3, [pc, #292]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6819      	ldr	r1, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	3b01      	subs	r3, #1
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	430b      	orrs	r3, r1
 8003618:	4943      	ldr	r1, [pc, #268]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 800361a:	4313      	orrs	r3, r2
 800361c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d17c      	bne.n	800371e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003624:	4b40      	ldr	r3, [pc, #256]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a3f      	ldr	r2, [pc, #252]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 800362a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800362e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003630:	f7fe faa8 	bl	8001b84 <HAL_GetTick>
 8003634:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003636:	e009      	b.n	800364c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003638:	f7fe faa4 	bl	8001b84 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d902      	bls.n	800364c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	73fb      	strb	r3, [r7, #15]
        break;
 800364a:	e005      	b.n	8003658 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800364c:	4b36      	ldr	r3, [pc, #216]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1ef      	bne.n	8003638 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d15f      	bne.n	800371e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d110      	bne.n	8003686 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003664:	4b30      	ldr	r3, [pc, #192]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800366c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6892      	ldr	r2, [r2, #8]
 8003674:	0211      	lsls	r1, r2, #8
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68d2      	ldr	r2, [r2, #12]
 800367a:	06d2      	lsls	r2, r2, #27
 800367c:	430a      	orrs	r2, r1
 800367e:	492a      	ldr	r1, [pc, #168]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003680:	4313      	orrs	r3, r2
 8003682:	610b      	str	r3, [r1, #16]
 8003684:	e027      	b.n	80036d6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d112      	bne.n	80036b2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800368c:	4b26      	ldr	r3, [pc, #152]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003694:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6892      	ldr	r2, [r2, #8]
 800369c:	0211      	lsls	r1, r2, #8
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6912      	ldr	r2, [r2, #16]
 80036a2:	0852      	lsrs	r2, r2, #1
 80036a4:	3a01      	subs	r2, #1
 80036a6:	0552      	lsls	r2, r2, #21
 80036a8:	430a      	orrs	r2, r1
 80036aa:	491f      	ldr	r1, [pc, #124]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	610b      	str	r3, [r1, #16]
 80036b0:	e011      	b.n	80036d6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80036ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6892      	ldr	r2, [r2, #8]
 80036c2:	0211      	lsls	r1, r2, #8
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6952      	ldr	r2, [r2, #20]
 80036c8:	0852      	lsrs	r2, r2, #1
 80036ca:	3a01      	subs	r2, #1
 80036cc:	0652      	lsls	r2, r2, #25
 80036ce:	430a      	orrs	r2, r1
 80036d0:	4915      	ldr	r1, [pc, #84]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036d6:	4b14      	ldr	r3, [pc, #80]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a13      	ldr	r2, [pc, #76]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e2:	f7fe fa4f 	bl	8001b84 <HAL_GetTick>
 80036e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036e8:	e009      	b.n	80036fe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036ea:	f7fe fa4b 	bl	8001b84 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d902      	bls.n	80036fe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	73fb      	strb	r3, [r7, #15]
          break;
 80036fc:	e005      	b.n	800370a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0ef      	beq.n	80036ea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d106      	bne.n	800371e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003710:	4b05      	ldr	r3, [pc, #20]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	4903      	ldr	r1, [pc, #12]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1e0>)
 800371a:	4313      	orrs	r3, r2
 800371c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800371e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40021000 	.word	0x40021000

0800372c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800373a:	4b69      	ldr	r3, [pc, #420]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d018      	beq.n	8003778 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003746:	4b66      	ldr	r3, [pc, #408]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f003 0203 	and.w	r2, r3, #3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d10d      	bne.n	8003772 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
       ||
 800375a:	2b00      	cmp	r3, #0
 800375c:	d009      	beq.n	8003772 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800375e:	4b60      	ldr	r3, [pc, #384]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
       ||
 800376e:	429a      	cmp	r2, r3
 8003770:	d047      	beq.n	8003802 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
 8003776:	e044      	b.n	8003802 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b03      	cmp	r3, #3
 800377e:	d018      	beq.n	80037b2 <RCCEx_PLLSAI2_Config+0x86>
 8003780:	2b03      	cmp	r3, #3
 8003782:	d825      	bhi.n	80037d0 <RCCEx_PLLSAI2_Config+0xa4>
 8003784:	2b01      	cmp	r3, #1
 8003786:	d002      	beq.n	800378e <RCCEx_PLLSAI2_Config+0x62>
 8003788:	2b02      	cmp	r3, #2
 800378a:	d009      	beq.n	80037a0 <RCCEx_PLLSAI2_Config+0x74>
 800378c:	e020      	b.n	80037d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800378e:	4b54      	ldr	r3, [pc, #336]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d11d      	bne.n	80037d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800379e:	e01a      	b.n	80037d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037a0:	4b4f      	ldr	r3, [pc, #316]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d116      	bne.n	80037da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b0:	e013      	b.n	80037da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037b2:	4b4b      	ldr	r3, [pc, #300]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037be:	4b48      	ldr	r3, [pc, #288]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037ce:	e006      	b.n	80037de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
      break;
 80037d4:	e004      	b.n	80037e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037d6:	bf00      	nop
 80037d8:	e002      	b.n	80037e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037da:	bf00      	nop
 80037dc:	e000      	b.n	80037e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037de:	bf00      	nop
    }

    if(status == HAL_OK)
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10d      	bne.n	8003802 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037e6:	4b3e      	ldr	r3, [pc, #248]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6819      	ldr	r1, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	430b      	orrs	r3, r1
 80037fc:	4938      	ldr	r1, [pc, #224]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003802:	7bfb      	ldrb	r3, [r7, #15]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d166      	bne.n	80038d6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003808:	4b35      	ldr	r3, [pc, #212]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a34      	ldr	r2, [pc, #208]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800380e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003812:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003814:	f7fe f9b6 	bl	8001b84 <HAL_GetTick>
 8003818:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800381a:	e009      	b.n	8003830 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800381c:	f7fe f9b2 	bl	8001b84 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d902      	bls.n	8003830 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	73fb      	strb	r3, [r7, #15]
        break;
 800382e:	e005      	b.n	800383c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003830:	4b2b      	ldr	r3, [pc, #172]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1ef      	bne.n	800381c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800383c:	7bfb      	ldrb	r3, [r7, #15]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d149      	bne.n	80038d6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d110      	bne.n	800386a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003848:	4b25      	ldr	r3, [pc, #148]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003850:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6892      	ldr	r2, [r2, #8]
 8003858:	0211      	lsls	r1, r2, #8
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68d2      	ldr	r2, [r2, #12]
 800385e:	06d2      	lsls	r2, r2, #27
 8003860:	430a      	orrs	r2, r1
 8003862:	491f      	ldr	r1, [pc, #124]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003864:	4313      	orrs	r3, r2
 8003866:	614b      	str	r3, [r1, #20]
 8003868:	e011      	b.n	800388e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800386a:	4b1d      	ldr	r3, [pc, #116]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003872:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6892      	ldr	r2, [r2, #8]
 800387a:	0211      	lsls	r1, r2, #8
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6912      	ldr	r2, [r2, #16]
 8003880:	0852      	lsrs	r2, r2, #1
 8003882:	3a01      	subs	r2, #1
 8003884:	0652      	lsls	r2, r2, #25
 8003886:	430a      	orrs	r2, r1
 8003888:	4915      	ldr	r1, [pc, #84]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800388a:	4313      	orrs	r3, r2
 800388c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800388e:	4b14      	ldr	r3, [pc, #80]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a13      	ldr	r2, [pc, #76]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003898:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389a:	f7fe f973 	bl	8001b84 <HAL_GetTick>
 800389e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038a0:	e009      	b.n	80038b6 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038a2:	f7fe f96f 	bl	8001b84 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d902      	bls.n	80038b6 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	73fb      	strb	r3, [r7, #15]
          break;
 80038b4:	e005      	b.n	80038c2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038b6:	4b0a      	ldr	r3, [pc, #40]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0ef      	beq.n	80038a2 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d106      	bne.n	80038d6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038c8:	4b05      	ldr	r3, [pc, #20]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80038ca:	695a      	ldr	r2, [r3, #20]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	4903      	ldr	r1, [pc, #12]	@ (80038e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40021000 	.word	0x40021000

080038e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e095      	b.n	8003a22 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d108      	bne.n	8003910 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003906:	d009      	beq.n	800391c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	61da      	str	r2, [r3, #28]
 800390e:	e005      	b.n	800391c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fd ff7e 	bl	8001838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003952:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800395c:	d902      	bls.n	8003964 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	e002      	b.n	800396a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003964:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003968:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003972:	d007      	beq.n	8003984 <HAL_SPI_Init+0xa0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800397c:	d002      	beq.n	8003984 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c6:	ea42 0103 	orr.w	r1, r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ce:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	0c1b      	lsrs	r3, r3, #16
 80039e0:	f003 0204 	and.w	r2, r3, #4
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003a00:	ea42 0103 	orr.w	r1, r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b088      	sub	sp, #32
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a3a:	f7fe f8a3 	bl	8001b84 <HAL_GetTick>
 8003a3e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003a40:	88fb      	ldrh	r3, [r7, #6]
 8003a42:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d001      	beq.n	8003a54 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003a50:	2302      	movs	r3, #2
 8003a52:	e15c      	b.n	8003d0e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_SPI_Transmit+0x36>
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e154      	b.n	8003d0e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d101      	bne.n	8003a72 <HAL_SPI_Transmit+0x48>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e14d      	b.n	8003d0e <HAL_SPI_Transmit+0x2e4>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	88fa      	ldrh	r2, [r7, #6]
 8003a92:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	88fa      	ldrh	r2, [r7, #6]
 8003a98:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ac4:	d10f      	bne.n	8003ae6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ad4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ae4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af0:	2b40      	cmp	r3, #64	@ 0x40
 8003af2:	d007      	beq.n	8003b04 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b0c:	d952      	bls.n	8003bb4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_SPI_Transmit+0xf2>
 8003b16:	8b7b      	ldrh	r3, [r7, #26]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d145      	bne.n	8003ba8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b20:	881a      	ldrh	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b2c:	1c9a      	adds	r2, r3, #2
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b40:	e032      	b.n	8003ba8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d112      	bne.n	8003b76 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b54:	881a      	ldrh	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b60:	1c9a      	adds	r2, r3, #2
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b74:	e018      	b.n	8003ba8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b76:	f7fe f805 	bl	8001b84 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d803      	bhi.n	8003b8e <HAL_SPI_Transmit+0x164>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8c:	d102      	bne.n	8003b94 <HAL_SPI_Transmit+0x16a>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d109      	bne.n	8003ba8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e0b2      	b.n	8003d0e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1c7      	bne.n	8003b42 <HAL_SPI_Transmit+0x118>
 8003bb2:	e083      	b.n	8003cbc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <HAL_SPI_Transmit+0x198>
 8003bbc:	8b7b      	ldrh	r3, [r7, #26]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d177      	bne.n	8003cb2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d912      	bls.n	8003bf2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd0:	881a      	ldrh	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bdc:	1c9a      	adds	r2, r3, #2
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b02      	subs	r3, #2
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bf0:	e05f      	b.n	8003cb2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	330c      	adds	r3, #12
 8003bfc:	7812      	ldrb	r2, [r2, #0]
 8003bfe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003c18:	e04b      	b.n	8003cb2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d12b      	bne.n	8003c80 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d912      	bls.n	8003c58 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c36:	881a      	ldrh	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c42:	1c9a      	adds	r2, r3, #2
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b02      	subs	r3, #2
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c56:	e02c      	b.n	8003cb2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	7812      	ldrb	r2, [r2, #0]
 8003c64:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c7e:	e018      	b.n	8003cb2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c80:	f7fd ff80 	bl	8001b84 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d803      	bhi.n	8003c98 <HAL_SPI_Transmit+0x26e>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c96:	d102      	bne.n	8003c9e <HAL_SPI_Transmit+0x274>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d109      	bne.n	8003cb2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e02d      	b.n	8003d0e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1ae      	bne.n	8003c1a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cbc:	69fa      	ldr	r2, [r7, #28]
 8003cbe:	6839      	ldr	r1, [r7, #0]
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 fc19 	bl	80044f8 <SPI_EndRxTxTransaction>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
  }
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3720      	adds	r7, #32
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d2c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d00c      	beq.n	8003d54 <HAL_SPI_TransmitReceive_IT+0x3c>
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d40:	d106      	bne.n	8003d50 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d102      	bne.n	8003d50 <HAL_SPI_TransmitReceive_IT+0x38>
 8003d4a:	7dfb      	ldrb	r3, [r7, #23]
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d001      	beq.n	8003d54 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003d50:	2302      	movs	r3, #2
 8003d52:	e07d      	b.n	8003e50 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d005      	beq.n	8003d66 <HAL_SPI_TransmitReceive_IT+0x4e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <HAL_SPI_TransmitReceive_IT+0x4e>
 8003d60:	887b      	ldrh	r3, [r7, #2]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e072      	b.n	8003e50 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_SPI_TransmitReceive_IT+0x60>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e06b      	b.n	8003e50 <HAL_SPI_TransmitReceive_IT+0x138>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d003      	beq.n	8003d94 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2205      	movs	r2, #5
 8003d90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	887a      	ldrh	r2, [r7, #2]
 8003da4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	887a      	ldrh	r2, [r7, #2]
 8003daa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	887a      	ldrh	r2, [r7, #2]
 8003db6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	887a      	ldrh	r2, [r7, #2]
 8003dbe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003dca:	d906      	bls.n	8003dda <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4a23      	ldr	r2, [pc, #140]	@ (8003e5c <HAL_SPI_TransmitReceive_IT+0x144>)
 8003dd0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4a22      	ldr	r2, [pc, #136]	@ (8003e60 <HAL_SPI_TransmitReceive_IT+0x148>)
 8003dd6:	651a      	str	r2, [r3, #80]	@ 0x50
 8003dd8:	e005      	b.n	8003de6 <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4a21      	ldr	r2, [pc, #132]	@ (8003e64 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8003dde:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4a21      	ldr	r2, [pc, #132]	@ (8003e68 <HAL_SPI_TransmitReceive_IT+0x150>)
 8003de4:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003dee:	d802      	bhi.n	8003df6 <HAL_SPI_TransmitReceive_IT+0xde>
 8003df0:	887b      	ldrh	r3, [r7, #2]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d908      	bls.n	8003e08 <HAL_SPI_TransmitReceive_IT+0xf0>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	e007      	b.n	8003e18 <HAL_SPI_TransmitReceive_IT+0x100>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e16:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e22:	2b40      	cmp	r3, #64	@ 0x40
 8003e24:	d007      	beq.n	8003e36 <HAL_SPI_TransmitReceive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e34:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8003e4c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	371c      	adds	r7, #28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	080041f7 	.word	0x080041f7
 8003e60:	0800425d 	.word	0x0800425d
 8003e64:	080040a7 	.word	0x080040a7
 8003e68:	08004165 	.word	0x08004165

08003e6c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10e      	bne.n	8003eac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d009      	beq.n	8003eac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d004      	beq.n	8003eac <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	4798      	blx	r3
    return;
 8003eaa:	e0ce      	b.n	800404a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <HAL_SPI_IRQHandler+0x5e>
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d004      	beq.n	8003eca <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	4798      	blx	r3
    return;
 8003ec8:	e0bf      	b.n	800404a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <HAL_SPI_IRQHandler+0x7e>
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d105      	bne.n	8003eea <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80b0 	beq.w	800404a <HAL_SPI_IRQHandler+0x1de>
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80aa 	beq.w	800404a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d023      	beq.n	8003f48 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d011      	beq.n	8003f30 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f10:	f043 0204 	orr.w	r2, r3, #4
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f18:	2300      	movs	r3, #0
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	e00b      	b.n	8003f48 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f30:	2300      	movs	r3, #0
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	693b      	ldr	r3, [r7, #16]
        return;
 8003f46:	e080      	b.n	800404a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d014      	beq.n	8003f7c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f56:	f043 0201 	orr.w	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00c      	beq.n	8003fa0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f8a:	f043 0208 	orr.w	r2, r3, #8
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003f92:	2300      	movs	r3, #0
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d04f      	beq.n	8004048 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003fb6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d104      	bne.n	8003fd4 <HAL_SPI_IRQHandler+0x168>
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d034      	beq.n	800403e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0203 	bic.w	r2, r2, #3
 8003fe2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d011      	beq.n	8004010 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff0:	4a17      	ldr	r2, [pc, #92]	@ (8004050 <HAL_SPI_IRQHandler+0x1e4>)
 8003ff2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fd ff04 	bl	8001e06 <HAL_DMA_Abort_IT>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004008:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004014:	2b00      	cmp	r3, #0
 8004016:	d016      	beq.n	8004046 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401c:	4a0c      	ldr	r2, [pc, #48]	@ (8004050 <HAL_SPI_IRQHandler+0x1e4>)
 800401e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004024:	4618      	mov	r0, r3
 8004026:	f7fd feee 	bl	8001e06 <HAL_DMA_Abort_IT>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004034:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800403c:	e003      	b.n	8004046 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f812 	bl	8004068 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004044:	e000      	b.n	8004048 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004046:	bf00      	nop
    return;
 8004048:	bf00      	nop
  }
}
 800404a:	3720      	adds	r7, #32
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	0800407d 	.word	0x0800407d

08004054 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004088:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f7ff ffe5 	bl	8004068 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d923      	bls.n	8004102 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c4:	b292      	uxth	r2, r2
 80040c6:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040cc:	1c9a      	adds	r2, r3, #2
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b02      	subs	r3, #2
 80040dc:	b29a      	uxth	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d11f      	bne.n	8004130 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80040fe:	605a      	str	r2, [r3, #4]
 8004100:	e016      	b.n	8004130 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f103 020c 	add.w	r2, r3, #12
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	7812      	ldrb	r2, [r2, #0]
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10f      	bne.n	800415c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800414a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d102      	bne.n	800415c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fa14 	bl	8004584 <SPI_CloseRxTx_ISR>
    }
  }
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b01      	cmp	r3, #1
 8004174:	d912      	bls.n	800419c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417a:	881a      	ldrh	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004186:	1c9a      	adds	r2, r3, #2
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b02      	subs	r3, #2
 8004194:	b29a      	uxth	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800419a:	e012      	b.n	80041c2 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	330c      	adds	r3, #12
 80041a6:	7812      	ldrb	r2, [r2, #0]
 80041a8:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d110      	bne.n	80041ee <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041da:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d102      	bne.n	80041ee <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f9cb 	bl	8004584 <SPI_CloseRxTx_ISR>
    }
  }
}
 80041ee:	bf00      	nop
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004208:	b292      	uxth	r2, r2
 800420a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004210:	1c9a      	adds	r2, r3, #2
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10f      	bne.n	8004254 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004242:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f998 	bl	8004584 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004254:	bf00      	nop
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004268:	881a      	ldrh	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004274:	1c9a      	adds	r2, r3, #2
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d110      	bne.n	80042b4 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042a0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f968 	bl	8004584 <SPI_CloseRxTx_ISR>
    }
  }
}
 80042b4:	bf00      	nop
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042cc:	f7fd fc5a 	bl	8001b84 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	4413      	add	r3, r2
 80042da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042dc:	f7fd fc52 	bl	8001b84 <HAL_GetTick>
 80042e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042e2:	4b39      	ldr	r3, [pc, #228]	@ (80043c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	015b      	lsls	r3, r3, #5
 80042e8:	0d1b      	lsrs	r3, r3, #20
 80042ea:	69fa      	ldr	r2, [r7, #28]
 80042ec:	fb02 f303 	mul.w	r3, r2, r3
 80042f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042f2:	e054      	b.n	800439e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fa:	d050      	beq.n	800439e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042fc:	f7fd fc42 	bl	8001b84 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	429a      	cmp	r2, r3
 800430a:	d902      	bls.n	8004312 <SPI_WaitFlagStateUntilTimeout+0x56>
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d13d      	bne.n	800438e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004320:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800432a:	d111      	bne.n	8004350 <SPI_WaitFlagStateUntilTimeout+0x94>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004334:	d004      	beq.n	8004340 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800433e:	d107      	bne.n	8004350 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800434e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004354:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004358:	d10f      	bne.n	800437a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004378:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e017      	b.n	80043be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	3b01      	subs	r3, #1
 800439c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4013      	ands	r3, r2
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	bf0c      	ite	eq
 80043ae:	2301      	moveq	r3, #1
 80043b0:	2300      	movne	r3, #0
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	461a      	mov	r2, r3
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d19b      	bne.n	80042f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3720      	adds	r7, #32
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000000 	.word	0x20000000

080043cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08a      	sub	sp, #40	@ 0x28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80043de:	f7fd fbd1 	bl	8001b84 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	4413      	add	r3, r2
 80043ec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80043ee:	f7fd fbc9 	bl	8001b84 <HAL_GetTick>
 80043f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	330c      	adds	r3, #12
 80043fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043fc:	4b3d      	ldr	r3, [pc, #244]	@ (80044f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	00da      	lsls	r2, r3, #3
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	0d1b      	lsrs	r3, r3, #20
 800440c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004414:	e060      	b.n	80044d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800441c:	d107      	bne.n	800442e <SPI_WaitFifoStateUntilTimeout+0x62>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d104      	bne.n	800442e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	b2db      	uxtb	r3, r3
 800442a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800442c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004434:	d050      	beq.n	80044d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004436:	f7fd fba5 	bl	8001b84 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004442:	429a      	cmp	r2, r3
 8004444:	d902      	bls.n	800444c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004448:	2b00      	cmp	r3, #0
 800444a:	d13d      	bne.n	80044c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800445a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004464:	d111      	bne.n	800448a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800446e:	d004      	beq.n	800447a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004478:	d107      	bne.n	800448a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004488:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004492:	d10f      	bne.n	80044b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e010      	b.n	80044ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	4013      	ands	r3, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d196      	bne.n	8004416 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3728      	adds	r7, #40	@ 0x28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000000 	.word	0x20000000

080044f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2200      	movs	r2, #0
 800450c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f7ff ff5b 	bl	80043cc <SPI_WaitFifoStateUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d007      	beq.n	800452c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004520:	f043 0220 	orr.w	r2, r3, #32
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e027      	b.n	800457c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2200      	movs	r2, #0
 8004534:	2180      	movs	r1, #128	@ 0x80
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f7ff fec0 	bl	80042bc <SPI_WaitFlagStateUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d007      	beq.n	8004552 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004546:	f043 0220 	orr.w	r2, r3, #32
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e014      	b.n	800457c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2200      	movs	r2, #0
 800455a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f7ff ff34 	bl	80043cc <SPI_WaitFifoStateUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d007      	beq.n	800457a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456e:	f043 0220 	orr.w	r2, r3, #32
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e000      	b.n	800457c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800458c:	f7fd fafa 	bl	8001b84 <HAL_GetTick>
 8004590:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0220 	bic.w	r2, r2, #32
 80045a0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	2164      	movs	r1, #100	@ 0x64
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7ff ffa6 	bl	80044f8 <SPI_EndRxTxTransaction>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b6:	f043 0220 	orr.w	r2, r3, #32
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d115      	bne.n	80045f2 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d107      	bne.n	80045e2 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7ff fd3a 	bl	8004054 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80045e0:	e00e      	b.n	8004600 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc fea4 	bl	8001338 <HAL_SPI_TxRxCpltCallback>
}
 80045f0:	e006      	b.n	8004600 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff fd34 	bl	8004068 <HAL_SPI_ErrorCallback>
}
 8004600:	bf00      	nop
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e040      	b.n	800469c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fd f94e 	bl	80018cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2224      	movs	r2, #36	@ 0x24
 8004634:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0201 	bic.w	r2, r2, #1
 8004644:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fb6a 	bl	8004d28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f8af 	bl	80047b8 <UART_SetConfig>
 800465a:	4603      	mov	r3, r0
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e01b      	b.n	800469c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004672:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004682:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fbe9 	bl	8004e6c <UART_CheckIdleState>
 800469a:	4603      	mov	r3, r0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08a      	sub	sp, #40	@ 0x28
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	4613      	mov	r3, r2
 80046b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d177      	bne.n	80047ac <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_UART_Transmit+0x24>
 80046c2:	88fb      	ldrh	r3, [r7, #6]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e070      	b.n	80047ae <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2221      	movs	r2, #33	@ 0x21
 80046d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046da:	f7fd fa53 	bl	8001b84 <HAL_GetTick>
 80046de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	88fa      	ldrh	r2, [r7, #6]
 80046e4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	88fa      	ldrh	r2, [r7, #6]
 80046ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046f8:	d108      	bne.n	800470c <HAL_UART_Transmit+0x68>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d104      	bne.n	800470c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004702:	2300      	movs	r3, #0
 8004704:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	e003      	b.n	8004714 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004710:	2300      	movs	r3, #0
 8004712:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004714:	e02f      	b.n	8004776 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2200      	movs	r2, #0
 800471e:	2180      	movs	r1, #128	@ 0x80
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 fc4b 	bl	8004fbc <UART_WaitOnFlagUntilTimeout>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d004      	beq.n	8004736 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e03b      	b.n	80047ae <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10b      	bne.n	8004754 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	881a      	ldrh	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004748:	b292      	uxth	r2, r2
 800474a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	3302      	adds	r3, #2
 8004750:	61bb      	str	r3, [r7, #24]
 8004752:	e007      	b.n	8004764 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	781a      	ldrb	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	3301      	adds	r3, #1
 8004762:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800476a:	b29b      	uxth	r3, r3
 800476c:	3b01      	subs	r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1c9      	bne.n	8004716 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2200      	movs	r2, #0
 800478a:	2140      	movs	r1, #64	@ 0x40
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 fc15 	bl	8004fbc <UART_WaitOnFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d004      	beq.n	80047a2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e005      	b.n	80047ae <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2220      	movs	r2, #32
 80047a6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	e000      	b.n	80047ae <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80047ac:	2302      	movs	r3, #2
  }
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3720      	adds	r7, #32
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047bc:	b08a      	sub	sp, #40	@ 0x28
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	431a      	orrs	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	4313      	orrs	r3, r2
 80047de:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	4ba4      	ldr	r3, [pc, #656]	@ (8004a78 <UART_SetConfig+0x2c0>)
 80047e8:	4013      	ands	r3, r2
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047f0:	430b      	orrs	r3, r1
 80047f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a99      	ldr	r2, [pc, #612]	@ (8004a7c <UART_SetConfig+0x2c4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d004      	beq.n	8004824 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004820:	4313      	orrs	r3, r2
 8004822:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004834:	430a      	orrs	r2, r1
 8004836:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a90      	ldr	r2, [pc, #576]	@ (8004a80 <UART_SetConfig+0x2c8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d126      	bne.n	8004890 <UART_SetConfig+0xd8>
 8004842:	4b90      	ldr	r3, [pc, #576]	@ (8004a84 <UART_SetConfig+0x2cc>)
 8004844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	2b03      	cmp	r3, #3
 800484e:	d81b      	bhi.n	8004888 <UART_SetConfig+0xd0>
 8004850:	a201      	add	r2, pc, #4	@ (adr r2, 8004858 <UART_SetConfig+0xa0>)
 8004852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004856:	bf00      	nop
 8004858:	08004869 	.word	0x08004869
 800485c:	08004879 	.word	0x08004879
 8004860:	08004871 	.word	0x08004871
 8004864:	08004881 	.word	0x08004881
 8004868:	2301      	movs	r3, #1
 800486a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800486e:	e116      	b.n	8004a9e <UART_SetConfig+0x2e6>
 8004870:	2302      	movs	r3, #2
 8004872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004876:	e112      	b.n	8004a9e <UART_SetConfig+0x2e6>
 8004878:	2304      	movs	r3, #4
 800487a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800487e:	e10e      	b.n	8004a9e <UART_SetConfig+0x2e6>
 8004880:	2308      	movs	r3, #8
 8004882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004886:	e10a      	b.n	8004a9e <UART_SetConfig+0x2e6>
 8004888:	2310      	movs	r3, #16
 800488a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800488e:	e106      	b.n	8004a9e <UART_SetConfig+0x2e6>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a7c      	ldr	r2, [pc, #496]	@ (8004a88 <UART_SetConfig+0x2d0>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d138      	bne.n	800490c <UART_SetConfig+0x154>
 800489a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a84 <UART_SetConfig+0x2cc>)
 800489c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a0:	f003 030c 	and.w	r3, r3, #12
 80048a4:	2b0c      	cmp	r3, #12
 80048a6:	d82d      	bhi.n	8004904 <UART_SetConfig+0x14c>
 80048a8:	a201      	add	r2, pc, #4	@ (adr r2, 80048b0 <UART_SetConfig+0xf8>)
 80048aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ae:	bf00      	nop
 80048b0:	080048e5 	.word	0x080048e5
 80048b4:	08004905 	.word	0x08004905
 80048b8:	08004905 	.word	0x08004905
 80048bc:	08004905 	.word	0x08004905
 80048c0:	080048f5 	.word	0x080048f5
 80048c4:	08004905 	.word	0x08004905
 80048c8:	08004905 	.word	0x08004905
 80048cc:	08004905 	.word	0x08004905
 80048d0:	080048ed 	.word	0x080048ed
 80048d4:	08004905 	.word	0x08004905
 80048d8:	08004905 	.word	0x08004905
 80048dc:	08004905 	.word	0x08004905
 80048e0:	080048fd 	.word	0x080048fd
 80048e4:	2300      	movs	r3, #0
 80048e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ea:	e0d8      	b.n	8004a9e <UART_SetConfig+0x2e6>
 80048ec:	2302      	movs	r3, #2
 80048ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048f2:	e0d4      	b.n	8004a9e <UART_SetConfig+0x2e6>
 80048f4:	2304      	movs	r3, #4
 80048f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048fa:	e0d0      	b.n	8004a9e <UART_SetConfig+0x2e6>
 80048fc:	2308      	movs	r3, #8
 80048fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004902:	e0cc      	b.n	8004a9e <UART_SetConfig+0x2e6>
 8004904:	2310      	movs	r3, #16
 8004906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800490a:	e0c8      	b.n	8004a9e <UART_SetConfig+0x2e6>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a5e      	ldr	r2, [pc, #376]	@ (8004a8c <UART_SetConfig+0x2d4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d125      	bne.n	8004962 <UART_SetConfig+0x1aa>
 8004916:	4b5b      	ldr	r3, [pc, #364]	@ (8004a84 <UART_SetConfig+0x2cc>)
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004920:	2b30      	cmp	r3, #48	@ 0x30
 8004922:	d016      	beq.n	8004952 <UART_SetConfig+0x19a>
 8004924:	2b30      	cmp	r3, #48	@ 0x30
 8004926:	d818      	bhi.n	800495a <UART_SetConfig+0x1a2>
 8004928:	2b20      	cmp	r3, #32
 800492a:	d00a      	beq.n	8004942 <UART_SetConfig+0x18a>
 800492c:	2b20      	cmp	r3, #32
 800492e:	d814      	bhi.n	800495a <UART_SetConfig+0x1a2>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <UART_SetConfig+0x182>
 8004934:	2b10      	cmp	r3, #16
 8004936:	d008      	beq.n	800494a <UART_SetConfig+0x192>
 8004938:	e00f      	b.n	800495a <UART_SetConfig+0x1a2>
 800493a:	2300      	movs	r3, #0
 800493c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004940:	e0ad      	b.n	8004a9e <UART_SetConfig+0x2e6>
 8004942:	2302      	movs	r3, #2
 8004944:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004948:	e0a9      	b.n	8004a9e <UART_SetConfig+0x2e6>
 800494a:	2304      	movs	r3, #4
 800494c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004950:	e0a5      	b.n	8004a9e <UART_SetConfig+0x2e6>
 8004952:	2308      	movs	r3, #8
 8004954:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004958:	e0a1      	b.n	8004a9e <UART_SetConfig+0x2e6>
 800495a:	2310      	movs	r3, #16
 800495c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004960:	e09d      	b.n	8004a9e <UART_SetConfig+0x2e6>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a4a      	ldr	r2, [pc, #296]	@ (8004a90 <UART_SetConfig+0x2d8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d125      	bne.n	80049b8 <UART_SetConfig+0x200>
 800496c:	4b45      	ldr	r3, [pc, #276]	@ (8004a84 <UART_SetConfig+0x2cc>)
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004972:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004976:	2bc0      	cmp	r3, #192	@ 0xc0
 8004978:	d016      	beq.n	80049a8 <UART_SetConfig+0x1f0>
 800497a:	2bc0      	cmp	r3, #192	@ 0xc0
 800497c:	d818      	bhi.n	80049b0 <UART_SetConfig+0x1f8>
 800497e:	2b80      	cmp	r3, #128	@ 0x80
 8004980:	d00a      	beq.n	8004998 <UART_SetConfig+0x1e0>
 8004982:	2b80      	cmp	r3, #128	@ 0x80
 8004984:	d814      	bhi.n	80049b0 <UART_SetConfig+0x1f8>
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <UART_SetConfig+0x1d8>
 800498a:	2b40      	cmp	r3, #64	@ 0x40
 800498c:	d008      	beq.n	80049a0 <UART_SetConfig+0x1e8>
 800498e:	e00f      	b.n	80049b0 <UART_SetConfig+0x1f8>
 8004990:	2300      	movs	r3, #0
 8004992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004996:	e082      	b.n	8004a9e <UART_SetConfig+0x2e6>
 8004998:	2302      	movs	r3, #2
 800499a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800499e:	e07e      	b.n	8004a9e <UART_SetConfig+0x2e6>
 80049a0:	2304      	movs	r3, #4
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049a6:	e07a      	b.n	8004a9e <UART_SetConfig+0x2e6>
 80049a8:	2308      	movs	r3, #8
 80049aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ae:	e076      	b.n	8004a9e <UART_SetConfig+0x2e6>
 80049b0:	2310      	movs	r3, #16
 80049b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b6:	e072      	b.n	8004a9e <UART_SetConfig+0x2e6>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a35      	ldr	r2, [pc, #212]	@ (8004a94 <UART_SetConfig+0x2dc>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d12a      	bne.n	8004a18 <UART_SetConfig+0x260>
 80049c2:	4b30      	ldr	r3, [pc, #192]	@ (8004a84 <UART_SetConfig+0x2cc>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049d0:	d01a      	beq.n	8004a08 <UART_SetConfig+0x250>
 80049d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049d6:	d81b      	bhi.n	8004a10 <UART_SetConfig+0x258>
 80049d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049dc:	d00c      	beq.n	80049f8 <UART_SetConfig+0x240>
 80049de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049e2:	d815      	bhi.n	8004a10 <UART_SetConfig+0x258>
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <UART_SetConfig+0x238>
 80049e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049ec:	d008      	beq.n	8004a00 <UART_SetConfig+0x248>
 80049ee:	e00f      	b.n	8004a10 <UART_SetConfig+0x258>
 80049f0:	2300      	movs	r3, #0
 80049f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049f6:	e052      	b.n	8004a9e <UART_SetConfig+0x2e6>
 80049f8:	2302      	movs	r3, #2
 80049fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049fe:	e04e      	b.n	8004a9e <UART_SetConfig+0x2e6>
 8004a00:	2304      	movs	r3, #4
 8004a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a06:	e04a      	b.n	8004a9e <UART_SetConfig+0x2e6>
 8004a08:	2308      	movs	r3, #8
 8004a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a0e:	e046      	b.n	8004a9e <UART_SetConfig+0x2e6>
 8004a10:	2310      	movs	r3, #16
 8004a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a16:	e042      	b.n	8004a9e <UART_SetConfig+0x2e6>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a17      	ldr	r2, [pc, #92]	@ (8004a7c <UART_SetConfig+0x2c4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d13a      	bne.n	8004a98 <UART_SetConfig+0x2e0>
 8004a22:	4b18      	ldr	r3, [pc, #96]	@ (8004a84 <UART_SetConfig+0x2cc>)
 8004a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a30:	d01a      	beq.n	8004a68 <UART_SetConfig+0x2b0>
 8004a32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a36:	d81b      	bhi.n	8004a70 <UART_SetConfig+0x2b8>
 8004a38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a3c:	d00c      	beq.n	8004a58 <UART_SetConfig+0x2a0>
 8004a3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a42:	d815      	bhi.n	8004a70 <UART_SetConfig+0x2b8>
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <UART_SetConfig+0x298>
 8004a48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a4c:	d008      	beq.n	8004a60 <UART_SetConfig+0x2a8>
 8004a4e:	e00f      	b.n	8004a70 <UART_SetConfig+0x2b8>
 8004a50:	2300      	movs	r3, #0
 8004a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a56:	e022      	b.n	8004a9e <UART_SetConfig+0x2e6>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a5e:	e01e      	b.n	8004a9e <UART_SetConfig+0x2e6>
 8004a60:	2304      	movs	r3, #4
 8004a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a66:	e01a      	b.n	8004a9e <UART_SetConfig+0x2e6>
 8004a68:	2308      	movs	r3, #8
 8004a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a6e:	e016      	b.n	8004a9e <UART_SetConfig+0x2e6>
 8004a70:	2310      	movs	r3, #16
 8004a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a76:	e012      	b.n	8004a9e <UART_SetConfig+0x2e6>
 8004a78:	efff69f3 	.word	0xefff69f3
 8004a7c:	40008000 	.word	0x40008000
 8004a80:	40013800 	.word	0x40013800
 8004a84:	40021000 	.word	0x40021000
 8004a88:	40004400 	.word	0x40004400
 8004a8c:	40004800 	.word	0x40004800
 8004a90:	40004c00 	.word	0x40004c00
 8004a94:	40005000 	.word	0x40005000
 8004a98:	2310      	movs	r3, #16
 8004a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a9f      	ldr	r2, [pc, #636]	@ (8004d20 <UART_SetConfig+0x568>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d17a      	bne.n	8004b9e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004aa8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d824      	bhi.n	8004afa <UART_SetConfig+0x342>
 8004ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab8 <UART_SetConfig+0x300>)
 8004ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab6:	bf00      	nop
 8004ab8:	08004add 	.word	0x08004add
 8004abc:	08004afb 	.word	0x08004afb
 8004ac0:	08004ae5 	.word	0x08004ae5
 8004ac4:	08004afb 	.word	0x08004afb
 8004ac8:	08004aeb 	.word	0x08004aeb
 8004acc:	08004afb 	.word	0x08004afb
 8004ad0:	08004afb 	.word	0x08004afb
 8004ad4:	08004afb 	.word	0x08004afb
 8004ad8:	08004af3 	.word	0x08004af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004adc:	f7fe f9ac 	bl	8002e38 <HAL_RCC_GetPCLK1Freq>
 8004ae0:	61f8      	str	r0, [r7, #28]
        break;
 8004ae2:	e010      	b.n	8004b06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ae4:	4b8f      	ldr	r3, [pc, #572]	@ (8004d24 <UART_SetConfig+0x56c>)
 8004ae6:	61fb      	str	r3, [r7, #28]
        break;
 8004ae8:	e00d      	b.n	8004b06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aea:	f7fe f90d 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8004aee:	61f8      	str	r0, [r7, #28]
        break;
 8004af0:	e009      	b.n	8004b06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004af2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004af6:	61fb      	str	r3, [r7, #28]
        break;
 8004af8:	e005      	b.n	8004b06 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80fb 	beq.w	8004d04 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	4613      	mov	r3, r2
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	4413      	add	r3, r2
 8004b18:	69fa      	ldr	r2, [r7, #28]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d305      	bcc.n	8004b2a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b24:	69fa      	ldr	r2, [r7, #28]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d903      	bls.n	8004b32 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b30:	e0e8      	b.n	8004d04 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	2200      	movs	r2, #0
 8004b36:	461c      	mov	r4, r3
 8004b38:	4615      	mov	r5, r2
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	022b      	lsls	r3, r5, #8
 8004b44:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b48:	0222      	lsls	r2, r4, #8
 8004b4a:	68f9      	ldr	r1, [r7, #12]
 8004b4c:	6849      	ldr	r1, [r1, #4]
 8004b4e:	0849      	lsrs	r1, r1, #1
 8004b50:	2000      	movs	r0, #0
 8004b52:	4688      	mov	r8, r1
 8004b54:	4681      	mov	r9, r0
 8004b56:	eb12 0a08 	adds.w	sl, r2, r8
 8004b5a:	eb43 0b09 	adc.w	fp, r3, r9
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	603b      	str	r3, [r7, #0]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b6c:	4650      	mov	r0, sl
 8004b6e:	4659      	mov	r1, fp
 8004b70:	f7fb ff5a 	bl	8000a28 <__aeabi_uldivmod>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4613      	mov	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b82:	d308      	bcc.n	8004b96 <UART_SetConfig+0x3de>
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b8a:	d204      	bcs.n	8004b96 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	60da      	str	r2, [r3, #12]
 8004b94:	e0b6      	b.n	8004d04 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b9c:	e0b2      	b.n	8004d04 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ba6:	d15e      	bne.n	8004c66 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d828      	bhi.n	8004c02 <UART_SetConfig+0x44a>
 8004bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb8 <UART_SetConfig+0x400>)
 8004bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb6:	bf00      	nop
 8004bb8:	08004bdd 	.word	0x08004bdd
 8004bbc:	08004be5 	.word	0x08004be5
 8004bc0:	08004bed 	.word	0x08004bed
 8004bc4:	08004c03 	.word	0x08004c03
 8004bc8:	08004bf3 	.word	0x08004bf3
 8004bcc:	08004c03 	.word	0x08004c03
 8004bd0:	08004c03 	.word	0x08004c03
 8004bd4:	08004c03 	.word	0x08004c03
 8004bd8:	08004bfb 	.word	0x08004bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bdc:	f7fe f92c 	bl	8002e38 <HAL_RCC_GetPCLK1Freq>
 8004be0:	61f8      	str	r0, [r7, #28]
        break;
 8004be2:	e014      	b.n	8004c0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004be4:	f7fe f93e 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8004be8:	61f8      	str	r0, [r7, #28]
        break;
 8004bea:	e010      	b.n	8004c0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bec:	4b4d      	ldr	r3, [pc, #308]	@ (8004d24 <UART_SetConfig+0x56c>)
 8004bee:	61fb      	str	r3, [r7, #28]
        break;
 8004bf0:	e00d      	b.n	8004c0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bf2:	f7fe f889 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8004bf6:	61f8      	str	r0, [r7, #28]
        break;
 8004bf8:	e009      	b.n	8004c0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bfe:	61fb      	str	r3, [r7, #28]
        break;
 8004c00:	e005      	b.n	8004c0e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d077      	beq.n	8004d04 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	005a      	lsls	r2, r3, #1
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	085b      	lsrs	r3, r3, #1
 8004c1e:	441a      	add	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	2b0f      	cmp	r3, #15
 8004c2e:	d916      	bls.n	8004c5e <UART_SetConfig+0x4a6>
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c36:	d212      	bcs.n	8004c5e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	f023 030f 	bic.w	r3, r3, #15
 8004c40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	085b      	lsrs	r3, r3, #1
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	8afb      	ldrh	r3, [r7, #22]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	8afa      	ldrh	r2, [r7, #22]
 8004c5a:	60da      	str	r2, [r3, #12]
 8004c5c:	e052      	b.n	8004d04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c64:	e04e      	b.n	8004d04 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d827      	bhi.n	8004cbe <UART_SetConfig+0x506>
 8004c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c74 <UART_SetConfig+0x4bc>)
 8004c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c74:	08004c99 	.word	0x08004c99
 8004c78:	08004ca1 	.word	0x08004ca1
 8004c7c:	08004ca9 	.word	0x08004ca9
 8004c80:	08004cbf 	.word	0x08004cbf
 8004c84:	08004caf 	.word	0x08004caf
 8004c88:	08004cbf 	.word	0x08004cbf
 8004c8c:	08004cbf 	.word	0x08004cbf
 8004c90:	08004cbf 	.word	0x08004cbf
 8004c94:	08004cb7 	.word	0x08004cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c98:	f7fe f8ce 	bl	8002e38 <HAL_RCC_GetPCLK1Freq>
 8004c9c:	61f8      	str	r0, [r7, #28]
        break;
 8004c9e:	e014      	b.n	8004cca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ca0:	f7fe f8e0 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8004ca4:	61f8      	str	r0, [r7, #28]
        break;
 8004ca6:	e010      	b.n	8004cca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8004d24 <UART_SetConfig+0x56c>)
 8004caa:	61fb      	str	r3, [r7, #28]
        break;
 8004cac:	e00d      	b.n	8004cca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cae:	f7fe f82b 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8004cb2:	61f8      	str	r0, [r7, #28]
        break;
 8004cb4:	e009      	b.n	8004cca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cba:	61fb      	str	r3, [r7, #28]
        break;
 8004cbc:	e005      	b.n	8004cca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004cc8:	bf00      	nop
    }

    if (pclk != 0U)
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d019      	beq.n	8004d04 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	085a      	lsrs	r2, r3, #1
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	441a      	add	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	2b0f      	cmp	r3, #15
 8004ce8:	d909      	bls.n	8004cfe <UART_SetConfig+0x546>
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf0:	d205      	bcs.n	8004cfe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60da      	str	r2, [r3, #12]
 8004cfc:	e002      	b.n	8004d04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d10:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3728      	adds	r7, #40	@ 0x28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d1e:	bf00      	nop
 8004d20:	40008000 	.word	0x40008000
 8004d24:	00f42400 	.word	0x00f42400

08004d28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01a      	beq.n	8004e3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e26:	d10a      	bne.n	8004e3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	605a      	str	r2, [r3, #4]
  }
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b098      	sub	sp, #96	@ 0x60
 8004e70:	af02      	add	r7, sp, #8
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e7c:	f7fc fe82 	bl	8001b84 <HAL_GetTick>
 8004e80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d12e      	bne.n	8004eee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f88c 	bl	8004fbc <UART_WaitOnFlagUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d021      	beq.n	8004eee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb2:	e853 3f00 	ldrex	r3, [r3]
 8004eb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ebe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ecc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ece:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ed0:	e841 2300 	strex	r3, r2, [r1]
 8004ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1e6      	bne.n	8004eaa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e062      	b.n	8004fb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d149      	bne.n	8004f90 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004efc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f04:	2200      	movs	r2, #0
 8004f06:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f856 	bl	8004fbc <UART_WaitOnFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d03c      	beq.n	8004f90 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1e:	e853 3f00 	ldrex	r3, [r3]
 8004f22:	623b      	str	r3, [r7, #32]
   return(result);
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f34:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f36:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e6      	bne.n	8004f16 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	e853 3f00 	ldrex	r3, [r3]
 8004f56:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0301 	bic.w	r3, r3, #1
 8004f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3308      	adds	r3, #8
 8004f66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f68:	61fa      	str	r2, [r7, #28]
 8004f6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6c:	69b9      	ldr	r1, [r7, #24]
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	e841 2300 	strex	r3, r2, [r1]
 8004f74:	617b      	str	r3, [r7, #20]
   return(result);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e5      	bne.n	8004f48 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e011      	b.n	8004fb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3758      	adds	r7, #88	@ 0x58
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	603b      	str	r3, [r7, #0]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fcc:	e04f      	b.n	800506e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd4:	d04b      	beq.n	800506e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd6:	f7fc fdd5 	bl	8001b84 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d302      	bcc.n	8004fec <UART_WaitOnFlagUntilTimeout+0x30>
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e04e      	b.n	800508e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d037      	beq.n	800506e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b80      	cmp	r3, #128	@ 0x80
 8005002:	d034      	beq.n	800506e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2b40      	cmp	r3, #64	@ 0x40
 8005008:	d031      	beq.n	800506e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b08      	cmp	r3, #8
 8005016:	d110      	bne.n	800503a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2208      	movs	r2, #8
 800501e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 f838 	bl	8005096 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2208      	movs	r2, #8
 800502a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e029      	b.n	800508e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005044:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005048:	d111      	bne.n	800506e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 f81e 	bl	8005096 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2220      	movs	r2, #32
 800505e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e00f      	b.n	800508e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4013      	ands	r3, r2
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	429a      	cmp	r2, r3
 800507c:	bf0c      	ite	eq
 800507e:	2301      	moveq	r3, #1
 8005080:	2300      	movne	r3, #0
 8005082:	b2db      	uxtb	r3, r3
 8005084:	461a      	mov	r2, r3
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	429a      	cmp	r2, r3
 800508a:	d0a0      	beq.n	8004fce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005096:	b480      	push	{r7}
 8005098:	b095      	sub	sp, #84	@ 0x54
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050a6:	e853 3f00 	ldrex	r3, [r3]
 80050aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80050be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050c4:	e841 2300 	strex	r3, r2, [r1]
 80050c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e6      	bne.n	800509e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3308      	adds	r3, #8
 80050d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	e853 3f00 	ldrex	r3, [r3]
 80050de:	61fb      	str	r3, [r7, #28]
   return(result);
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	f023 0301 	bic.w	r3, r3, #1
 80050e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3308      	adds	r3, #8
 80050ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050f8:	e841 2300 	strex	r3, r2, [r1]
 80050fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e5      	bne.n	80050d0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005108:	2b01      	cmp	r3, #1
 800510a:	d118      	bne.n	800513e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	60bb      	str	r3, [r7, #8]
   return(result);
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f023 0310 	bic.w	r3, r3, #16
 8005120:	647b      	str	r3, [r7, #68]	@ 0x44
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	6979      	ldr	r1, [r7, #20]
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	613b      	str	r3, [r7, #16]
   return(result);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e6      	bne.n	800510c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005152:	bf00      	nop
 8005154:	3754      	adds	r7, #84	@ 0x54
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
	...

08005160 <_fminf>:
 8005160:	f000 bd2b 	b.w	8005bba <fminf>

08005164 <neai_classification_init>:
 8005164:	b570      	push	{r4, r5, r6, lr}
 8005166:	4c6a      	ldr	r4, [pc, #424]	@ (8005310 <neai_classification_init+0x1ac>)
 8005168:	edd0 7a01 	vldr	s15, [r0, #4]
 800516c:	ed90 7a00 	vldr	s14, [r0]
 8005170:	4d68      	ldr	r5, [pc, #416]	@ (8005314 <neai_classification_init+0x1b0>)
 8005172:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005176:	ed2d 8b02 	vpush	{d8}
 800517a:	8021      	strh	r1, [r4, #0]
 800517c:	4c66      	ldr	r4, [pc, #408]	@ (8005318 <neai_classification_init+0x1b4>)
 800517e:	8021      	strh	r1, [r4, #0]
 8005180:	4966      	ldr	r1, [pc, #408]	@ (800531c <neai_classification_init+0x1b8>)
 8005182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005186:	f04f 7400 	mov.w	r4, #33554432	@ 0x2000000
 800518a:	600c      	str	r4, [r1, #0]
 800518c:	4964      	ldr	r1, [pc, #400]	@ (8005320 <neai_classification_init+0x1bc>)
 800518e:	ee17 2a90 	vmov	r2, s15
 8005192:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 8005196:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800519a:	600c      	str	r4, [r1, #0]
 800519c:	4961      	ldr	r1, [pc, #388]	@ (8005324 <neai_classification_init+0x1c0>)
 800519e:	ee17 3a90 	vmov	r3, s15
 80051a2:	600a      	str	r2, [r1, #0]
 80051a4:	1c91      	adds	r1, r2, #2
 80051a6:	eb01 0c43 	add.w	ip, r1, r3, lsl #1
 80051aa:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 80051ae:	441a      	add	r2, r3
 80051b0:	eb03 010c 	add.w	r1, r3, ip
 80051b4:	440b      	add	r3, r1
 80051b6:	3202      	adds	r2, #2
 80051b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80051bc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80051c0:	eb00 048c 	add.w	r4, r0, ip, lsl #2
 80051c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80051c8:	3008      	adds	r0, #8
 80051ca:	6028      	str	r0, [r5, #0]
 80051cc:	4856      	ldr	r0, [pc, #344]	@ (8005328 <neai_classification_init+0x1c4>)
 80051ce:	ed93 7a00 	vldr	s14, [r3]
 80051d2:	6006      	str	r6, [r0, #0]
 80051d4:	4855      	ldr	r0, [pc, #340]	@ (800532c <neai_classification_init+0x1c8>)
 80051d6:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 80051da:	6002      	str	r2, [r0, #0]
 80051dc:	eeb4 7a67 	vcmp.f32	s14, s15
 80051e0:	4853      	ldr	r0, [pc, #332]	@ (8005330 <neai_classification_init+0x1cc>)
 80051e2:	4a54      	ldr	r2, [pc, #336]	@ (8005334 <neai_classification_init+0x1d0>)
 80051e4:	6004      	str	r4, [r0, #0]
 80051e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ea:	6011      	str	r1, [r2, #0]
 80051ec:	d179      	bne.n	80052e2 <neai_classification_init+0x17e>
 80051ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80051f2:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 80051f6:	eeb4 7a67 	vcmp.f32	s14, s15
 80051fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051fe:	d170      	bne.n	80052e2 <neai_classification_init+0x17e>
 8005200:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8005338 <neai_classification_init+0x1d4>
 8005204:	ed93 7a02 	vldr	s14, [r3, #8]
 8005208:	eeb4 7a67 	vcmp.f32	s14, s15
 800520c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005210:	d167      	bne.n	80052e2 <neai_classification_init+0x17e>
 8005212:	ed93 7a03 	vldr	s14, [r3, #12]
 8005216:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800521a:	eeb4 7a67 	vcmp.f32	s14, s15
 800521e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005222:	d15e      	bne.n	80052e2 <neai_classification_init+0x17e>
 8005224:	ed93 7a04 	vldr	s14, [r3, #16]
 8005228:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800522c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005230:	d157      	bne.n	80052e2 <neai_classification_init+0x17e>
 8005232:	ed93 7a05 	vldr	s14, [r3, #20]
 8005236:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800523a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523e:	d150      	bne.n	80052e2 <neai_classification_init+0x17e>
 8005240:	edd3 6a06 	vldr	s13, [r3, #24]
 8005244:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8005248:	eef4 6a47 	vcmp.f32	s13, s14
 800524c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005250:	d147      	bne.n	80052e2 <neai_classification_init+0x17e>
 8005252:	ed93 7a07 	vldr	s14, [r3, #28]
 8005256:	eeb4 7a67 	vcmp.f32	s14, s15
 800525a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800525e:	d140      	bne.n	80052e2 <neai_classification_init+0x17e>
 8005260:	ed93 7a08 	vldr	s14, [r3, #32]
 8005264:	eef3 7a08 	vmov.f32	s15, #56	@ 0x41c00000  24.0
 8005268:	eeb4 7a67 	vcmp.f32	s14, s15
 800526c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005270:	d137      	bne.n	80052e2 <neai_classification_init+0x17e>
 8005272:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005276:	eef5 7a40 	vcmp.f32	s15, #0.0
 800527a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527e:	d130      	bne.n	80052e2 <neai_classification_init+0x17e>
 8005280:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005284:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528c:	d129      	bne.n	80052e2 <neai_classification_init+0x17e>
 800528e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8005292:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8005296:	eeb4 7a67 	vcmp.f32	s14, s15
 800529a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529e:	d120      	bne.n	80052e2 <neai_classification_init+0x17e>
 80052a0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80052a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80052a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ac:	d119      	bne.n	80052e2 <neai_classification_init+0x17e>
 80052ae:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80052b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80052b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ba:	d112      	bne.n	80052e2 <neai_classification_init+0x17e>
 80052bc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80052c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80052c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c8:	d10b      	bne.n	80052e2 <neai_classification_init+0x17e>
 80052ca:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80052ce:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 800533c <neai_classification_init+0x1d8>
 80052d2:	eeb4 7a67 	vcmp.f32	s14, s15
 80052d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052da:	bf14      	ite	ne
 80052dc:	237d      	movne	r3, #125	@ 0x7d
 80052de:	2300      	moveq	r3, #0
 80052e0:	e000      	b.n	80052e4 <neai_classification_init+0x180>
 80052e2:	237d      	movs	r3, #125	@ 0x7d
 80052e4:	ed9f 8a16 	vldr	s16, [pc, #88]	@ 8005340 <neai_classification_init+0x1dc>
 80052e8:	4c16      	ldr	r4, [pc, #88]	@ (8005344 <neai_classification_init+0x1e0>)
 80052ea:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8005348 <neai_classification_init+0x1e4>
 80052ee:	7023      	strb	r3, [r4, #0]
 80052f0:	eeb0 0a48 	vmov.f32	s0, s16
 80052f4:	f7ff ff34 	bl	8005160 <_fminf>
 80052f8:	eeb4 0a48 	vcmp.f32	s0, s16
 80052fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005300:	bf1c      	itt	ne
 8005302:	2081      	movne	r0, #129	@ 0x81
 8005304:	7020      	strbne	r0, [r4, #0]
 8005306:	ecbd 8b02 	vpop	{d8}
 800530a:	bf08      	it	eq
 800530c:	7820      	ldrbeq	r0, [r4, #0]
 800530e:	bd70      	pop	{r4, r5, r6, pc}
 8005310:	20004276 	.word	0x20004276
 8005314:	2000426c 	.word	0x2000426c
 8005318:	20004274 	.word	0x20004274
 800531c:	2000427c 	.word	0x2000427c
 8005320:	20004278 	.word	0x20004278
 8005324:	20004270 	.word	0x20004270
 8005328:	20004268 	.word	0x20004268
 800532c:	20004264 	.word	0x20004264
 8005330:	20004260 	.word	0x20004260
 8005334:	2000425c 	.word	0x2000425c
 8005338:	44800000 	.word	0x44800000
 800533c:	49742400 	.word	0x49742400
 8005340:	3f8ccccd 	.word	0x3f8ccccd
 8005344:	20000009 	.word	0x20000009
 8005348:	40066666 	.word	0x40066666

0800534c <neai_classification>:
 800534c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005350:	ed2d 8b0a 	vpush	{d8-d12}
 8005354:	4bbd      	ldr	r3, [pc, #756]	@ (800564c <neai_classification+0x300>)
 8005356:	b08f      	sub	sp, #60	@ 0x3c
 8005358:	781e      	ldrb	r6, [r3, #0]
 800535a:	9007      	str	r0, [sp, #28]
 800535c:	4688      	mov	r8, r1
 800535e:	4691      	mov	r9, r2
 8005360:	b116      	cbz	r6, 8005368 <neai_classification+0x1c>
 8005362:	2e81      	cmp	r6, #129	@ 0x81
 8005364:	f040 8306 	bne.w	8005974 <neai_classification+0x628>
 8005368:	4bb9      	ldr	r3, [pc, #740]	@ (8005650 <neai_classification+0x304>)
 800536a:	4cba      	ldr	r4, [pc, #744]	@ (8005654 <neai_classification+0x308>)
 800536c:	881a      	ldrh	r2, [r3, #0]
 800536e:	4bba      	ldr	r3, [pc, #744]	@ (8005658 <neai_classification+0x30c>)
 8005370:	f8df b30c 	ldr.w	fp, [pc, #780]	@ 8005680 <neai_classification+0x334>
 8005374:	f8b3 a000 	ldrh.w	sl, [r3]
 8005378:	ed9f 9ab8 	vldr	s18, [pc, #736]	@ 800565c <neai_classification+0x310>
 800537c:	eddf 9ab8 	vldr	s19, [pc, #736]	@ 8005660 <neai_classification+0x314>
 8005380:	ed9f aab8 	vldr	s20, [pc, #736]	@ 8005664 <neai_classification+0x318>
 8005384:	9202      	str	r2, [sp, #8]
 8005386:	1e53      	subs	r3, r2, #1
 8005388:	b29b      	uxth	r3, r3
 800538a:	3301      	adds	r3, #1
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	9305      	str	r3, [sp, #20]
 8005390:	ea4f 035a 	mov.w	r3, sl, lsr #1
 8005394:	9304      	str	r3, [sp, #16]
 8005396:	4bb4      	ldr	r3, [pc, #720]	@ (8005668 <neai_classification+0x31c>)
 8005398:	e9cd 4608 	strd	r4, r6, [sp, #32]
 800539c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80053a0:	9306      	str	r3, [sp, #24]
 80053a2:	2300      	movs	r3, #0
 80053a4:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 80053a8:	eb0b 078a 	add.w	r7, fp, sl, lsl #2
 80053ac:	9303      	str	r3, [sp, #12]
 80053ae:	46a1      	mov	r9, r4
 80053b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053b4:	48ac      	ldr	r0, [pc, #688]	@ (8005668 <neai_classification+0x31c>)
 80053b6:	2100      	movs	r1, #0
 80053b8:	f000 fb44 	bl	8005a44 <memset>
 80053bc:	48ab      	ldr	r0, [pc, #684]	@ (800566c <neai_classification+0x320>)
 80053be:	4aac      	ldr	r2, [pc, #688]	@ (8005670 <neai_classification+0x324>)
 80053c0:	f1ba 0f00 	cmp.w	sl, #0
 80053c4:	f000 82f0 	beq.w	80059a8 <neai_classification+0x65c>
 80053c8:	9b03      	ldr	r3, [sp, #12]
 80053ca:	8801      	ldrh	r1, [r0, #0]
 80053cc:	4ca9      	ldr	r4, [pc, #676]	@ (8005674 <neai_classification+0x328>)
 80053ce:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80053d2:	9b07      	ldr	r3, [sp, #28]
 80053d4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80053d8:	465b      	mov	r3, fp
 80053da:	f851 5b10 	ldr.w	r5, [r1], #16
 80053de:	f843 5b04 	str.w	r5, [r3], #4
 80053e2:	429f      	cmp	r7, r3
 80053e4:	eca4 9a01 	vstmia	r4!, {s18}
 80053e8:	d1f7      	bne.n	80053da <neai_classification+0x8e>
 80053ea:	f1ba 0f01 	cmp.w	sl, #1
 80053ee:	eddb 7a00 	vldr	s15, [fp]
 80053f2:	d906      	bls.n	8005402 <neai_classification+0xb6>
 80053f4:	4ba0      	ldr	r3, [pc, #640]	@ (8005678 <neai_classification+0x32c>)
 80053f6:	ecb3 7a01 	vldmia	r3!, {s14}
 80053fa:	429f      	cmp	r7, r3
 80053fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005400:	d1f9      	bne.n	80053f6 <neai_classification+0xaa>
 8005402:	ee07 aa10 	vmov	s14, sl
 8005406:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800540a:	46d6      	mov	lr, sl
 800540c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005410:	465b      	mov	r3, fp
 8005412:	edd3 7a00 	vldr	s15, [r3]
 8005416:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800541a:	ece3 7a01 	vstmia	r3!, {s15}
 800541e:	429f      	cmp	r7, r3
 8005420:	d1f7      	bne.n	8005412 <neai_classification+0xc6>
 8005422:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8005426:	f01a 0f01 	tst.w	sl, #1
 800542a:	eec7 8aa6 	vdiv.f32	s17, s15, s13
 800542e:	f040 82c2 	bne.w	80059b6 <neai_classification+0x66a>
 8005432:	9d04      	ldr	r5, [sp, #16]
 8005434:	2400      	movs	r4, #0
 8005436:	3401      	adds	r4, #1
 8005438:	b2a4      	uxth	r4, r4
 800543a:	fa4e f304 	asr.w	r3, lr, r4
 800543e:	07db      	lsls	r3, r3, #31
 8005440:	d5f9      	bpl.n	8005436 <neai_classification+0xea>
 8005442:	f1be 0f01 	cmp.w	lr, #1
 8005446:	dd21      	ble.n	800548c <neai_classification+0x140>
 8005448:	2600      	movs	r6, #0
 800544a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800544e:	46dc      	mov	ip, fp
 8005450:	4633      	mov	r3, r6
 8005452:	b2b1      	uxth	r1, r6
 8005454:	428b      	cmp	r3, r1
 8005456:	d909      	bls.n	800546c <neai_classification+0x120>
 8005458:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
 800545c:	edd1 7a00 	vldr	s15, [r1]
 8005460:	f8dc 8000 	ldr.w	r8, [ip]
 8005464:	edcc 7a00 	vstr	s15, [ip]
 8005468:	f8c1 8000 	str.w	r8, [r1]
 800546c:	42ab      	cmp	r3, r5
 800546e:	4629      	mov	r1, r5
 8005470:	d305      	bcc.n	800547e <neai_classification+0x132>
 8005472:	1a5b      	subs	r3, r3, r1
 8005474:	b29b      	uxth	r3, r3
 8005476:	f3c1 014f 	ubfx	r1, r1, #1, #16
 800547a:	428b      	cmp	r3, r1
 800547c:	d2f9      	bcs.n	8005472 <neai_classification+0x126>
 800547e:	3601      	adds	r6, #1
 8005480:	4419      	add	r1, r3
 8005482:	4576      	cmp	r6, lr
 8005484:	b28b      	uxth	r3, r1
 8005486:	f10c 0c04 	add.w	ip, ip, #4
 800548a:	dbe2      	blt.n	8005452 <neai_classification+0x106>
 800548c:	2c00      	cmp	r4, #0
 800548e:	f000 8093 	beq.w	80055b8 <neai_classification+0x26c>
 8005492:	4653      	mov	r3, sl
 8005494:	eef0 aa49 	vmov.f32	s21, s18
 8005498:	46aa      	mov	sl, r5
 800549a:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800549e:	4625      	mov	r5, r4
 80054a0:	eeb7 ba00 	vmov.f32	s22, #112	@ 0x3f800000  1.0
 80054a4:	f04f 0800 	mov.w	r8, #0
 80054a8:	2601      	movs	r6, #1
 80054aa:	eef0 ba68 	vmov.f32	s23, s17
 80054ae:	900c      	str	r0, [sp, #48]	@ 0x30
 80054b0:	920d      	str	r2, [sp, #52]	@ 0x34
 80054b2:	461c      	mov	r4, r3
 80054b4:	4630      	mov	r0, r6
 80054b6:	0076      	lsls	r6, r6, #1
 80054b8:	b2b6      	uxth	r6, r6
 80054ba:	2800      	cmp	r0, #0
 80054bc:	d056      	beq.n	800556c <neai_classification+0x220>
 80054be:	2c00      	cmp	r4, #0
 80054c0:	d054      	beq.n	800556c <neai_classification+0x220>
 80054c2:	2100      	movs	r1, #0
 80054c4:	42a0      	cmp	r0, r4
 80054c6:	4684      	mov	ip, r0
 80054c8:	eef0 6a49 	vmov.f32	s13, s18
 80054cc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80054d0:	bf28      	it	cs
 80054d2:	46a4      	movcs	ip, r4
 80054d4:	460b      	mov	r3, r1
 80054d6:	9100      	str	r1, [sp, #0]
 80054d8:	4966      	ldr	r1, [pc, #408]	@ (8005674 <neai_classification+0x328>)
 80054da:	18c2      	adds	r2, r0, r3
 80054dc:	b292      	uxth	r2, r2
 80054de:	eb0b 0e82 	add.w	lr, fp, r2, lsl #2
 80054e2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80054e6:	ed92 7a00 	vldr	s14, [r2]
 80054ea:	edde 5a00 	vldr	s11, [lr]
 80054ee:	9201      	str	r2, [sp, #4]
 80054f0:	ee25 6aa7 	vmul.f32	s12, s11, s15
 80054f4:	ee27 5a26 	vmul.f32	s10, s14, s13
 80054f8:	ee65 5aa6 	vmul.f32	s11, s11, s13
 80054fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005500:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
 8005504:	ee37 7a25 	vadd.f32	s14, s14, s11
 8005508:	ee36 6a45 	vsub.f32	s12, s12, s10
 800550c:	edd2 5a00 	vldr	s11, [r2]
 8005510:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8005514:	edce 5a00 	vstr	s11, [lr]
 8005518:	edd2 5a00 	vldr	s11, [r2]
 800551c:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005520:	ed82 6a00 	vstr	s12, [r2]
 8005524:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8005528:	ed92 6a00 	vldr	s12, [r2]
 800552c:	9901      	ldr	r1, [sp, #4]
 800552e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8005532:	4433      	add	r3, r6
 8005534:	ed81 6a00 	vstr	s12, [r1]
 8005538:	ed92 6a00 	vldr	s12, [r2]
 800553c:	b29b      	uxth	r3, r3
 800553e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8005542:	42a3      	cmp	r3, r4
 8005544:	ed82 7a00 	vstr	s14, [r2]
 8005548:	d3c6      	bcc.n	80054d8 <neai_classification+0x18c>
 800554a:	9900      	ldr	r1, [sp, #0]
 800554c:	3101      	adds	r1, #1
 800554e:	ee66 5aaa 	vmul.f32	s11, s13, s21
 8005552:	ee27 6aaa 	vmul.f32	s12, s15, s21
 8005556:	ee27 7a88 	vmul.f32	s14, s15, s16
 800555a:	ee66 6a88 	vmul.f32	s13, s13, s16
 800555e:	b28b      	uxth	r3, r1
 8005560:	4563      	cmp	r3, ip
 8005562:	ee77 7a65 	vsub.f32	s15, s14, s11
 8005566:	ee76 6a26 	vadd.f32	s13, s12, s13
 800556a:	d3b4      	bcc.n	80054d6 <neai_classification+0x18a>
 800556c:	ee3b 0a48 	vsub.f32	s0, s22, s16
 8005570:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 8005574:	ee20 0a28 	vmul.f32	s0, s0, s17
 8005578:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800557c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005580:	f100 8244 	bmi.w	8005a0c <neai_classification+0x6c0>
 8005584:	eef1 aac0 	vsqrt.f32	s21, s0
 8005588:	ee38 8a0b 	vadd.f32	s16, s16, s22
 800558c:	eef1 aa6a 	vneg.f32	s21, s21
 8005590:	ee28 0a28 	vmul.f32	s0, s16, s17
 8005594:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800559c:	f100 8217 	bmi.w	80059ce <neai_classification+0x682>
 80055a0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80055a4:	f108 0801 	add.w	r8, r8, #1
 80055a8:	4545      	cmp	r5, r8
 80055aa:	d183      	bne.n	80054b4 <neai_classification+0x168>
 80055ac:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80055ae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80055b0:	4655      	mov	r5, sl
 80055b2:	46a2      	mov	sl, r4
 80055b4:	eef0 8a6b 	vmov.f32	s17, s23
 80055b8:	f1ba 0f00 	cmp.w	sl, #0
 80055bc:	f000 81ee 	beq.w	800599c <neai_classification+0x650>
 80055c0:	492c      	ldr	r1, [pc, #176]	@ (8005674 <neai_classification+0x328>)
 80055c2:	465b      	mov	r3, fp
 80055c4:	460c      	mov	r4, r1
 80055c6:	ed93 7a00 	vldr	s14, [r3]
 80055ca:	edd4 7a00 	vldr	s15, [r4]
 80055ce:	ee27 7a28 	vmul.f32	s14, s14, s17
 80055d2:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80055d6:	eca3 7a01 	vstmia	r3!, {s14}
 80055da:	429f      	cmp	r7, r3
 80055dc:	ece4 7a01 	vstmia	r4!, {s15}
 80055e0:	d1f1      	bne.n	80055c6 <neai_classification+0x27a>
 80055e2:	b365      	cbz	r5, 800563e <neai_classification+0x2f2>
 80055e4:	4c24      	ldr	r4, [pc, #144]	@ (8005678 <neai_classification+0x32c>)
 80055e6:	4b23      	ldr	r3, [pc, #140]	@ (8005674 <neai_classification+0x328>)
 80055e8:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 80055ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80055f0:	ecf4 7a01 	vldmia	r4!, {s15}
 80055f4:	ee27 7a07 	vmul.f32	s14, s14, s14
 80055f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80055fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005600:	ece3 7a01 	vstmia	r3!, {s15}
 8005604:	429d      	cmp	r5, r3
 8005606:	d1f1      	bne.n	80055ec <neai_classification+0x2a0>
 8005608:	4b1a      	ldr	r3, [pc, #104]	@ (8005674 <neai_classification+0x328>)
 800560a:	ecf3 7a01 	vldmia	r3!, {s15}
 800560e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005616:	f280 81b3 	bge.w	8005980 <neai_classification+0x634>
 800561a:	429d      	cmp	r5, r3
 800561c:	ed03 9a01 	vstr	s18, [r3, #-4]
 8005620:	d1f3      	bne.n	800560a <neai_classification+0x2be>
 8005622:	8813      	ldrh	r3, [r2, #0]
 8005624:	4c10      	ldr	r4, [pc, #64]	@ (8005668 <neai_classification+0x31c>)
 8005626:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800562a:	edd3 7a00 	vldr	s15, [r3]
 800562e:	ecb1 7a01 	vldmia	r1!, {s14}
 8005632:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005636:	428d      	cmp	r5, r1
 8005638:	ece3 7a01 	vstmia	r3!, {s15}
 800563c:	d1f5      	bne.n	800562a <neai_classification+0x2de>
 800563e:	4b0f      	ldr	r3, [pc, #60]	@ (800567c <neai_classification+0x330>)
 8005640:	3002      	adds	r0, #2
 8005642:	4283      	cmp	r3, r0
 8005644:	d01e      	beq.n	8005684 <neai_classification+0x338>
 8005646:	3202      	adds	r2, #2
 8005648:	e6be      	b.n	80053c8 <neai_classification+0x7c>
 800564a:	bf00      	nop
 800564c:	20000009 	.word	0x20000009
 8005650:	20004274 	.word	0x20004274
 8005654:	20006a80 	.word	0x20006a80
 8005658:	20004276 	.word	0x20004276
 800565c:	00000000 	.word	0x00000000
 8005660:	3b03126f 	.word	0x3b03126f
 8005664:	42740000 	.word	0x42740000
 8005668:	20004280 	.word	0x20004280
 800566c:	2000427c 	.word	0x2000427c
 8005670:	20004278 	.word	0x20004278
 8005674:	20004a80 	.word	0x20004a80
 8005678:	20005a84 	.word	0x20005a84
 800567c:	20004280 	.word	0x20004280
 8005680:	20005a80 	.word	0x20005a80
 8005684:	9b02      	ldr	r3, [sp, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 8084 	beq.w	8005794 <neai_classification+0x448>
 800568c:	4ad2      	ldr	r2, [pc, #840]	@ (80059d8 <neai_classification+0x68c>)
 800568e:	4619      	mov	r1, r3
 8005690:	2300      	movs	r3, #0
 8005692:	ecf2 7a01 	vldmia	r2!, {s15}
 8005696:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800569a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800569e:	da07      	bge.n	80056b0 <neai_classification+0x364>
 80056a0:	ee07 3a90 	vmov	s15, r3
 80056a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056a8:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80056ac:	ed42 7a01 	vstr	s15, [r2, #-4]
 80056b0:	3301      	adds	r3, #1
 80056b2:	428b      	cmp	r3, r1
 80056b4:	d1ed      	bne.n	8005692 <neai_classification+0x346>
 80056b6:	4bc8      	ldr	r3, [pc, #800]	@ (80059d8 <neai_classification+0x68c>)
 80056b8:	ed93 ca00 	vldr	s24, [r3]
 80056bc:	9b02      	ldr	r3, [sp, #8]
 80056be:	2b3d      	cmp	r3, #61	@ 0x3d
 80056c0:	f240 8166 	bls.w	8005990 <neai_classification+0x644>
 80056c4:	ee07 3a90 	vmov	s15, r3
 80056c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056cc:	4bc3      	ldr	r3, [pc, #780]	@ (80059dc <neai_classification+0x690>)
 80056ce:	9a06      	ldr	r2, [sp, #24]
 80056d0:	eec7 ba8a 	vdiv.f32	s23, s15, s20
 80056d4:	eef0 8a4c 	vmov.f32	s17, s24
 80056d8:	ecf3 7a01 	vldmia	r3!, {s15}
 80056dc:	eef4 7a68 	vcmp.f32	s15, s17
 80056e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e4:	bf48      	it	mi
 80056e6:	eef0 8a67 	vmovmi.f32	s17, s15
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d1f4      	bne.n	80056d8 <neai_classification+0x38c>
 80056ee:	4cbc      	ldr	r4, [pc, #752]	@ (80059e0 <neai_classification+0x694>)
 80056f0:	eddf 7abc 	vldr	s15, [pc, #752]	@ 80059e4 <neai_classification+0x698>
 80056f4:	9700      	str	r7, [sp, #0]
 80056f6:	eef7 aa00 	vmov.f32	s21, #112	@ 0x3f800000  1.0
 80056fa:	2600      	movs	r6, #0
 80056fc:	ee78 aaea 	vsub.f32	s21, s17, s21
 8005700:	46c8      	mov	r8, r9
 8005702:	464f      	mov	r7, r9
 8005704:	eeb6 ba00 	vmov.f32	s22, #96	@ 0x3f000000  0.5
 8005708:	4635      	mov	r5, r6
 800570a:	46a1      	mov	r9, r4
 800570c:	4634      	mov	r4, r6
 800570e:	3601      	adds	r6, #1
 8005710:	ee07 6a10 	vmov	s14, r6
 8005714:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
 8005718:	ece8 aa01 	vstmia	r8!, {s21}
 800571c:	ee28 8a2b 	vmul.f32	s16, s16, s23
 8005720:	eef0 0a6a 	vmov.f32	s1, s21
 8005724:	ee38 8a4b 	vsub.f32	s16, s16, s22
 8005728:	eef4 7ac8 	vcmpe.f32	s15, s16
 800572c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005730:	d815      	bhi.n	800575e <neai_classification+0x412>
 8005732:	4ba9      	ldr	r3, [pc, #676]	@ (80059d8 <neai_classification+0x68c>)
 8005734:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8005738:	3501      	adds	r5, #1
 800573a:	ed93 0a00 	vldr	s0, [r3]
 800573e:	b2ad      	uxth	r5, r5
 8005740:	f000 fa1e 	bl	8005b80 <fmaxf>
 8005744:	ee07 5a90 	vmov	s15, r5
 8005748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574c:	eef0 0a40 	vmov.f32	s1, s0
 8005750:	eef4 7ac8 	vcmpe.f32	s15, s16
 8005754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005758:	d9eb      	bls.n	8005732 <neai_classification+0x3e6>
 800575a:	ed08 0a01 	vstr	s0, [r8, #-4]
 800575e:	ed97 7a00 	vldr	s14, [r7]
 8005762:	eef4 8ac7 	vcmpe.f32	s17, s14
 8005766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800576a:	bfc4      	itt	gt
 800576c:	ed87 ca00 	vstrgt	s24, [r7]
 8005770:	ed58 0a01 	vldrgt	s1, [r8, #-4]
 8005774:	eef4 8ae0 	vcmpe.f32	s17, s1
 8005778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800577c:	dd04      	ble.n	8005788 <neai_classification+0x43c>
 800577e:	b11c      	cbz	r4, 8005788 <neai_classification+0x43c>
 8005780:	f8d9 2000 	ldr.w	r2, [r9]
 8005784:	f848 2c04 	str.w	r2, [r8, #-4]
 8005788:	2e3d      	cmp	r6, #61	@ 0x3d
 800578a:	f109 0904 	add.w	r9, r9, #4
 800578e:	d1bd      	bne.n	800570c <neai_classification+0x3c0>
 8005790:	46b9      	mov	r9, r7
 8005792:	9f00      	ldr	r7, [sp, #0]
 8005794:	9b03      	ldr	r3, [sp, #12]
 8005796:	3301      	adds	r3, #1
 8005798:	2b04      	cmp	r3, #4
 800579a:	9303      	str	r3, [sp, #12]
 800579c:	f109 09f4 	add.w	r9, r9, #244	@ 0xf4
 80057a0:	f47f ae06 	bne.w	80053b0 <neai_classification+0x64>
 80057a4:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
 80057a8:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	@ 0x28
 80057ac:	4b8e      	ldr	r3, [pc, #568]	@ (80059e8 <neai_classification+0x69c>)
 80057ae:	ecf4 7a01 	vldmia	r4!, {s15}
 80057b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ba:	bf48      	it	mi
 80057bc:	eef1 7a67 	vnegmi.f32	s15, s15
 80057c0:	429c      	cmp	r4, r3
 80057c2:	ed44 7a01 	vstr	s15, [r4, #-4]
 80057c6:	d1f2      	bne.n	80057ae <neai_classification+0x462>
 80057c8:	4b88      	ldr	r3, [pc, #544]	@ (80059ec <neai_classification+0x6a0>)
 80057ca:	eddf 7a86 	vldr	s15, [pc, #536]	@ 80059e4 <neai_classification+0x698>
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	edc8 7a00 	vstr	s15, [r8]
 80057d4:	edc8 7a01 	vstr	s15, [r8, #4]
 80057d8:	edc8 7a02 	vstr	s15, [r8, #8]
 80057dc:	edc8 7a03 	vstr	s15, [r8, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 80f1 	beq.w	80059c8 <neai_classification+0x67c>
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80057f6:	4a7e      	ldr	r2, [pc, #504]	@ (80059f0 <neai_classification+0x6a4>)
 80057f8:	f8d2 e000 	ldr.w	lr, [r2]
 80057fc:	eb0e 0c83 	add.w	ip, lr, r3, lsl #2
 8005800:	4b7c      	ldr	r3, [pc, #496]	@ (80059f4 <neai_classification+0x6a8>)
 8005802:	681f      	ldr	r7, [r3, #0]
 8005804:	4b7c      	ldr	r3, [pc, #496]	@ (80059f8 <neai_classification+0x6ac>)
 8005806:	681d      	ldr	r5, [r3, #0]
 8005808:	4b7c      	ldr	r3, [pc, #496]	@ (80059fc <neai_classification+0x6b0>)
 800580a:	681c      	ldr	r4, [r3, #0]
 800580c:	4b7c      	ldr	r3, [pc, #496]	@ (8005a00 <neai_classification+0x6b4>)
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	f06f 4a40 	mvn.w	sl, #3221225472	@ 0xc0000000
 8005814:	ecfe 7a01 	vldmia	lr!, {s15}
 8005818:	9600      	str	r6, [sp, #0]
 800581a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800581e:	ee17 1a90 	vmov	r1, s15
 8005822:	460b      	mov	r3, r1
 8005824:	e00b      	b.n	800583e <neai_classification+0x4f2>
 8005826:	edd2 7a00 	vldr	s15, [r2]
 800582a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800582e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005832:	d425      	bmi.n	8005880 <neai_classification+0x534>
 8005834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005838:	ee17 3a90 	vmov	r3, s15
 800583c:	440b      	add	r3, r1
 800583e:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 8005842:	edd2 7a00 	vldr	s15, [r2]
 8005846:	4e6f      	ldr	r6, [pc, #444]	@ (8005a04 <neai_classification+0x6b8>)
 8005848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800584c:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 8005850:	ee17 2a90 	vmov	r2, s15
 8005854:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005858:	ed92 7a00 	vldr	s14, [r2]
 800585c:	eddb 7a00 	vldr	s15, [fp]
 8005860:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800586a:	eb00 0203 	add.w	r2, r0, r3
 800586e:	4423      	add	r3, r4
 8005870:	d4d9      	bmi.n	8005826 <neai_classification+0x4da>
 8005872:	edd3 7a00 	vldr	s15, [r3]
 8005876:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800587a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800587e:	d5d9      	bpl.n	8005834 <neai_classification+0x4e8>
 8005880:	eef1 7a67 	vneg.f32	s15, s15
 8005884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005888:	45e6      	cmp	lr, ip
 800588a:	ee17 3a90 	vmov	r3, s15
 800588e:	b29b      	uxth	r3, r3
 8005890:	4453      	add	r3, sl
 8005892:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8005896:	edd3 7a00 	vldr	s15, [r3]
 800589a:	9e00      	ldr	r6, [sp, #0]
 800589c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058a0:	edc3 7a00 	vstr	s15, [r3]
 80058a4:	d1b6      	bne.n	8005814 <neai_classification+0x4c8>
 80058a6:	ed98 7a01 	vldr	s14, [r8, #4]
 80058aa:	edd8 6a00 	vldr	s13, [r8]
 80058ae:	edd8 7a02 	vldr	s15, [r8, #8]
 80058b2:	edd8 8a03 	vldr	s17, [r8, #12]
 80058b6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80058ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058be:	bfd8      	it	le
 80058c0:	eeb0 7a66 	vmovle.f32	s14, s13
 80058c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058cc:	bf58      	it	pl
 80058ce:	eef0 7a47 	vmovpl.f32	s15, s14
 80058d2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80058d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058da:	d575      	bpl.n	80059c8 <neai_classification+0x67c>
 80058dc:	ed9f 8a41 	vldr	s16, [pc, #260]	@ 80059e4 <neai_classification+0x698>
 80058e0:	4644      	mov	r4, r8
 80058e2:	f108 0510 	add.w	r5, r8, #16
 80058e6:	eeb2 9a00 	vmov.f32	s18, #32	@ 0x41000000  8.0
 80058ea:	ed94 0a00 	vldr	s0, [r4]
 80058ee:	ee30 0a68 	vsub.f32	s0, s0, s17
 80058f2:	ee20 0a09 	vmul.f32	s0, s0, s18
 80058f6:	f000 f8e5 	bl	8005ac4 <expf>
 80058fa:	eca4 0a01 	vstmia	r4!, {s0}
 80058fe:	42ac      	cmp	r4, r5
 8005900:	ee38 8a00 	vadd.f32	s16, s16, s0
 8005904:	d1f1      	bne.n	80058ea <neai_classification+0x59e>
 8005906:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800590a:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800590e:	ed98 6a00 	vldr	s12, [r8]
 8005912:	ed98 7a01 	vldr	s14, [r8, #4]
 8005916:	edd8 6a02 	vldr	s13, [r8, #8]
 800591a:	edd8 5a03 	vldr	s11, [r8, #12]
 800591e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005922:	ee27 6a86 	vmul.f32	s12, s15, s12
 8005926:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800592a:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800592e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005932:	ed88 7a01 	vstr	s14, [r8, #4]
 8005936:	bf58      	it	pl
 8005938:	eeb0 7a46 	vmovpl.f32	s14, s12
 800593c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005940:	bf4c      	ite	mi
 8005942:	2302      	movmi	r3, #2
 8005944:	2301      	movpl	r3, #1
 8005946:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800594a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800594e:	edc8 6a02 	vstr	s13, [r8, #8]
 8005952:	bf58      	it	pl
 8005954:	eef0 6a47 	vmovpl.f32	s13, s14
 8005958:	eef4 6a67 	vcmp.f32	s13, s15
 800595c:	bf48      	it	mi
 800595e:	2303      	movmi	r3, #3
 8005960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005964:	bf48      	it	mi
 8005966:	2304      	movmi	r3, #4
 8005968:	ed88 6a00 	vstr	s12, [r8]
 800596c:	edc8 7a03 	vstr	s15, [r8, #12]
 8005970:	f8a9 3000 	strh.w	r3, [r9]
 8005974:	4630      	mov	r0, r6
 8005976:	b00f      	add	sp, #60	@ 0x3c
 8005978:	ecbd 8b0a 	vpop	{d8-d12}
 800597c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005980:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8005984:	429d      	cmp	r5, r3
 8005986:	ed03 7a01 	vstr	s14, [r3, #-4]
 800598a:	f47f ae3e 	bne.w	800560a <neai_classification+0x2be>
 800598e:	e648      	b.n	8005622 <neai_classification+0x2d6>
 8005990:	4911      	ldr	r1, [pc, #68]	@ (80059d8 <neai_classification+0x68c>)
 8005992:	9a05      	ldr	r2, [sp, #20]
 8005994:	4648      	mov	r0, r9
 8005996:	f000 f887 	bl	8005aa8 <memcpy>
 800599a:	e6fb      	b.n	8005794 <neai_classification+0x448>
 800599c:	4b1a      	ldr	r3, [pc, #104]	@ (8005a08 <neai_classification+0x6bc>)
 800599e:	3002      	adds	r0, #2
 80059a0:	4283      	cmp	r3, r0
 80059a2:	f43f ae6f 	beq.w	8005684 <neai_classification+0x338>
 80059a6:	3202      	adds	r2, #2
 80059a8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80059ac:	2500      	movs	r5, #0
 80059ae:	eec7 8a89 	vdiv.f32	s17, s15, s18
 80059b2:	46ae      	mov	lr, r5
 80059b4:	e53e      	b.n	8005434 <neai_classification+0xe8>
 80059b6:	f1ba 0f01 	cmp.w	sl, #1
 80059ba:	bf08      	it	eq
 80059bc:	2500      	moveq	r5, #0
 80059be:	f43f adff 	beq.w	80055c0 <neai_classification+0x274>
 80059c2:	9d04      	ldr	r5, [sp, #16]
 80059c4:	2400      	movs	r4, #0
 80059c6:	e53f      	b.n	8005448 <neai_classification+0xfc>
 80059c8:	eef0 8a67 	vmov.f32	s17, s15
 80059cc:	e786      	b.n	80058dc <neai_classification+0x590>
 80059ce:	f000 f8af 	bl	8005b30 <sqrtf>
 80059d2:	eeb0 8a40 	vmov.f32	s16, s0
 80059d6:	e5e5      	b.n	80055a4 <neai_classification+0x258>
 80059d8:	20004280 	.word	0x20004280
 80059dc:	20004284 	.word	0x20004284
 80059e0:	20006a7c 	.word	0x20006a7c
 80059e4:	00000000 	.word	0x00000000
 80059e8:	20006e50 	.word	0x20006e50
 80059ec:	20004270 	.word	0x20004270
 80059f0:	2000426c 	.word	0x2000426c
 80059f4:	20004268 	.word	0x20004268
 80059f8:	2000425c 	.word	0x2000425c
 80059fc:	20004260 	.word	0x20004260
 8005a00:	20004264 	.word	0x20004264
 8005a04:	20006a80 	.word	0x20006a80
 8005a08:	20004280 	.word	0x20004280
 8005a0c:	f000 f890 	bl	8005b30 <sqrtf>
 8005a10:	ee38 8a0b 	vadd.f32	s16, s16, s22
 8005a14:	eef1 aa40 	vneg.f32	s21, s0
 8005a18:	ee28 0a28 	vmul.f32	s0, s16, s17
 8005a1c:	e5c0      	b.n	80055a0 <neai_classification+0x254>
 8005a1e:	bf00      	nop

08005a20 <exit>:
 8005a20:	b508      	push	{r3, lr}
 8005a22:	4b06      	ldr	r3, [pc, #24]	@ (8005a3c <exit+0x1c>)
 8005a24:	4604      	mov	r4, r0
 8005a26:	b113      	cbz	r3, 8005a2e <exit+0xe>
 8005a28:	2100      	movs	r1, #0
 8005a2a:	f3af 8000 	nop.w
 8005a2e:	4b04      	ldr	r3, [pc, #16]	@ (8005a40 <exit+0x20>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	b103      	cbz	r3, 8005a36 <exit+0x16>
 8005a34:	4798      	blx	r3
 8005a36:	4620      	mov	r0, r4
 8005a38:	f7fb fff4 	bl	8001a24 <_exit>
 8005a3c:	00000000 	.word	0x00000000
 8005a40:	20006f88 	.word	0x20006f88

08005a44 <memset>:
 8005a44:	4402      	add	r2, r0
 8005a46:	4603      	mov	r3, r0
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d100      	bne.n	8005a4e <memset+0xa>
 8005a4c:	4770      	bx	lr
 8005a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a52:	e7f9      	b.n	8005a48 <memset+0x4>

08005a54 <__errno>:
 8005a54:	4b01      	ldr	r3, [pc, #4]	@ (8005a5c <__errno+0x8>)
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	2000000c 	.word	0x2000000c

08005a60 <__libc_init_array>:
 8005a60:	b570      	push	{r4, r5, r6, lr}
 8005a62:	4d0d      	ldr	r5, [pc, #52]	@ (8005a98 <__libc_init_array+0x38>)
 8005a64:	4c0d      	ldr	r4, [pc, #52]	@ (8005a9c <__libc_init_array+0x3c>)
 8005a66:	1b64      	subs	r4, r4, r5
 8005a68:	10a4      	asrs	r4, r4, #2
 8005a6a:	2600      	movs	r6, #0
 8005a6c:	42a6      	cmp	r6, r4
 8005a6e:	d109      	bne.n	8005a84 <__libc_init_array+0x24>
 8005a70:	4d0b      	ldr	r5, [pc, #44]	@ (8005aa0 <__libc_init_array+0x40>)
 8005a72:	4c0c      	ldr	r4, [pc, #48]	@ (8005aa4 <__libc_init_array+0x44>)
 8005a74:	f000 f9d2 	bl	8005e1c <_init>
 8005a78:	1b64      	subs	r4, r4, r5
 8005a7a:	10a4      	asrs	r4, r4, #2
 8005a7c:	2600      	movs	r6, #0
 8005a7e:	42a6      	cmp	r6, r4
 8005a80:	d105      	bne.n	8005a8e <__libc_init_array+0x2e>
 8005a82:	bd70      	pop	{r4, r5, r6, pc}
 8005a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a88:	4798      	blx	r3
 8005a8a:	3601      	adds	r6, #1
 8005a8c:	e7ee      	b.n	8005a6c <__libc_init_array+0xc>
 8005a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a92:	4798      	blx	r3
 8005a94:	3601      	adds	r6, #1
 8005a96:	e7f2      	b.n	8005a7e <__libc_init_array+0x1e>
 8005a98:	080329bc 	.word	0x080329bc
 8005a9c:	080329bc 	.word	0x080329bc
 8005aa0:	080329bc 	.word	0x080329bc
 8005aa4:	080329c0 	.word	0x080329c0

08005aa8 <memcpy>:
 8005aa8:	440a      	add	r2, r1
 8005aaa:	4291      	cmp	r1, r2
 8005aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ab0:	d100      	bne.n	8005ab4 <memcpy+0xc>
 8005ab2:	4770      	bx	lr
 8005ab4:	b510      	push	{r4, lr}
 8005ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005abe:	4291      	cmp	r1, r2
 8005ac0:	d1f9      	bne.n	8005ab6 <memcpy+0xe>
 8005ac2:	bd10      	pop	{r4, pc}

08005ac4 <expf>:
 8005ac4:	b508      	push	{r3, lr}
 8005ac6:	ed2d 8b02 	vpush	{d8}
 8005aca:	eef0 8a40 	vmov.f32	s17, s0
 8005ace:	f000 f8b1 	bl	8005c34 <__ieee754_expf>
 8005ad2:	eeb0 8a40 	vmov.f32	s16, s0
 8005ad6:	eeb0 0a68 	vmov.f32	s0, s17
 8005ada:	f000 f847 	bl	8005b6c <finitef>
 8005ade:	b160      	cbz	r0, 8005afa <expf+0x36>
 8005ae0:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8005b20 <expf+0x5c>
 8005ae4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8005ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aec:	dd0a      	ble.n	8005b04 <expf+0x40>
 8005aee:	f7ff ffb1 	bl	8005a54 <__errno>
 8005af2:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8005b24 <expf+0x60>
 8005af6:	2322      	movs	r3, #34	@ 0x22
 8005af8:	6003      	str	r3, [r0, #0]
 8005afa:	eeb0 0a48 	vmov.f32	s0, s16
 8005afe:	ecbd 8b02 	vpop	{d8}
 8005b02:	bd08      	pop	{r3, pc}
 8005b04:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8005b28 <expf+0x64>
 8005b08:	eef4 8ae7 	vcmpe.f32	s17, s15
 8005b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b10:	d5f3      	bpl.n	8005afa <expf+0x36>
 8005b12:	f7ff ff9f 	bl	8005a54 <__errno>
 8005b16:	2322      	movs	r3, #34	@ 0x22
 8005b18:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8005b2c <expf+0x68>
 8005b1c:	6003      	str	r3, [r0, #0]
 8005b1e:	e7ec      	b.n	8005afa <expf+0x36>
 8005b20:	42b17217 	.word	0x42b17217
 8005b24:	7f800000 	.word	0x7f800000
 8005b28:	c2cff1b5 	.word	0xc2cff1b5
 8005b2c:	00000000 	.word	0x00000000

08005b30 <sqrtf>:
 8005b30:	b508      	push	{r3, lr}
 8005b32:	ed2d 8b02 	vpush	{d8}
 8005b36:	eeb0 8a40 	vmov.f32	s16, s0
 8005b3a:	f000 f877 	bl	8005c2c <__ieee754_sqrtf>
 8005b3e:	eeb4 8a48 	vcmp.f32	s16, s16
 8005b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b46:	d60c      	bvs.n	8005b62 <sqrtf+0x32>
 8005b48:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8005b68 <sqrtf+0x38>
 8005b4c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b54:	d505      	bpl.n	8005b62 <sqrtf+0x32>
 8005b56:	f7ff ff7d 	bl	8005a54 <__errno>
 8005b5a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005b5e:	2321      	movs	r3, #33	@ 0x21
 8005b60:	6003      	str	r3, [r0, #0]
 8005b62:	ecbd 8b02 	vpop	{d8}
 8005b66:	bd08      	pop	{r3, pc}
 8005b68:	00000000 	.word	0x00000000

08005b6c <finitef>:
 8005b6c:	ee10 3a10 	vmov	r3, s0
 8005b70:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8005b74:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8005b78:	bfac      	ite	ge
 8005b7a:	2000      	movge	r0, #0
 8005b7c:	2001      	movlt	r0, #1
 8005b7e:	4770      	bx	lr

08005b80 <fmaxf>:
 8005b80:	b508      	push	{r3, lr}
 8005b82:	ed2d 8b02 	vpush	{d8}
 8005b86:	eeb0 8a40 	vmov.f32	s16, s0
 8005b8a:	eef0 8a60 	vmov.f32	s17, s1
 8005b8e:	f000 f831 	bl	8005bf4 <__fpclassifyf>
 8005b92:	b930      	cbnz	r0, 8005ba2 <fmaxf+0x22>
 8005b94:	eeb0 8a68 	vmov.f32	s16, s17
 8005b98:	eeb0 0a48 	vmov.f32	s0, s16
 8005b9c:	ecbd 8b02 	vpop	{d8}
 8005ba0:	bd08      	pop	{r3, pc}
 8005ba2:	eeb0 0a68 	vmov.f32	s0, s17
 8005ba6:	f000 f825 	bl	8005bf4 <__fpclassifyf>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	d0f4      	beq.n	8005b98 <fmaxf+0x18>
 8005bae:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb6:	dded      	ble.n	8005b94 <fmaxf+0x14>
 8005bb8:	e7ee      	b.n	8005b98 <fmaxf+0x18>

08005bba <fminf>:
 8005bba:	b508      	push	{r3, lr}
 8005bbc:	ed2d 8b02 	vpush	{d8}
 8005bc0:	eeb0 8a40 	vmov.f32	s16, s0
 8005bc4:	eef0 8a60 	vmov.f32	s17, s1
 8005bc8:	f000 f814 	bl	8005bf4 <__fpclassifyf>
 8005bcc:	b930      	cbnz	r0, 8005bdc <fminf+0x22>
 8005bce:	eeb0 8a68 	vmov.f32	s16, s17
 8005bd2:	eeb0 0a48 	vmov.f32	s0, s16
 8005bd6:	ecbd 8b02 	vpop	{d8}
 8005bda:	bd08      	pop	{r3, pc}
 8005bdc:	eeb0 0a68 	vmov.f32	s0, s17
 8005be0:	f000 f808 	bl	8005bf4 <__fpclassifyf>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d0f4      	beq.n	8005bd2 <fminf+0x18>
 8005be8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf0:	d5ed      	bpl.n	8005bce <fminf+0x14>
 8005bf2:	e7ee      	b.n	8005bd2 <fminf+0x18>

08005bf4 <__fpclassifyf>:
 8005bf4:	ee10 3a10 	vmov	r3, s0
 8005bf8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8005bfc:	d00d      	beq.n	8005c1a <__fpclassifyf+0x26>
 8005bfe:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8005c02:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8005c06:	d30a      	bcc.n	8005c1e <__fpclassifyf+0x2a>
 8005c08:	4b07      	ldr	r3, [pc, #28]	@ (8005c28 <__fpclassifyf+0x34>)
 8005c0a:	1e42      	subs	r2, r0, #1
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d908      	bls.n	8005c22 <__fpclassifyf+0x2e>
 8005c10:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8005c14:	4258      	negs	r0, r3
 8005c16:	4158      	adcs	r0, r3
 8005c18:	4770      	bx	lr
 8005c1a:	2002      	movs	r0, #2
 8005c1c:	4770      	bx	lr
 8005c1e:	2004      	movs	r0, #4
 8005c20:	4770      	bx	lr
 8005c22:	2003      	movs	r0, #3
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	007ffffe 	.word	0x007ffffe

08005c2c <__ieee754_sqrtf>:
 8005c2c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005c30:	4770      	bx	lr
	...

08005c34 <__ieee754_expf>:
 8005c34:	ee10 2a10 	vmov	r2, s0
 8005c38:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8005c3c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005c40:	d902      	bls.n	8005c48 <__ieee754_expf+0x14>
 8005c42:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005c46:	4770      	bx	lr
 8005c48:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8005c4c:	d106      	bne.n	8005c5c <__ieee754_expf+0x28>
 8005c4e:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8005d88 <__ieee754_expf+0x154>
 8005c52:	2900      	cmp	r1, #0
 8005c54:	bf18      	it	ne
 8005c56:	eeb0 0a67 	vmovne.f32	s0, s15
 8005c5a:	4770      	bx	lr
 8005c5c:	484b      	ldr	r0, [pc, #300]	@ (8005d8c <__ieee754_expf+0x158>)
 8005c5e:	4282      	cmp	r2, r0
 8005c60:	dd02      	ble.n	8005c68 <__ieee754_expf+0x34>
 8005c62:	2000      	movs	r0, #0
 8005c64:	f000 b8d4 	b.w	8005e10 <__math_oflowf>
 8005c68:	2a00      	cmp	r2, #0
 8005c6a:	da05      	bge.n	8005c78 <__ieee754_expf+0x44>
 8005c6c:	4a48      	ldr	r2, [pc, #288]	@ (8005d90 <__ieee754_expf+0x15c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d902      	bls.n	8005c78 <__ieee754_expf+0x44>
 8005c72:	2000      	movs	r0, #0
 8005c74:	f000 b8c6 	b.w	8005e04 <__math_uflowf>
 8005c78:	4a46      	ldr	r2, [pc, #280]	@ (8005d94 <__ieee754_expf+0x160>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005c80:	d952      	bls.n	8005d28 <__ieee754_expf+0xf4>
 8005c82:	4a45      	ldr	r2, [pc, #276]	@ (8005d98 <__ieee754_expf+0x164>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8005c8a:	d834      	bhi.n	8005cf6 <__ieee754_expf+0xc2>
 8005c8c:	4b43      	ldr	r3, [pc, #268]	@ (8005d9c <__ieee754_expf+0x168>)
 8005c8e:	4413      	add	r3, r2
 8005c90:	ed93 7a00 	vldr	s14, [r3]
 8005c94:	4b42      	ldr	r3, [pc, #264]	@ (8005da0 <__ieee754_expf+0x16c>)
 8005c96:	4413      	add	r3, r2
 8005c98:	ee30 7a47 	vsub.f32	s14, s0, s14
 8005c9c:	f1c1 0201 	rsb	r2, r1, #1
 8005ca0:	edd3 7a00 	vldr	s15, [r3]
 8005ca4:	1a52      	subs	r2, r2, r1
 8005ca6:	ee37 0a67 	vsub.f32	s0, s14, s15
 8005caa:	ee20 6a00 	vmul.f32	s12, s0, s0
 8005cae:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8005da4 <__ieee754_expf+0x170>
 8005cb2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005da8 <__ieee754_expf+0x174>
 8005cb6:	eee6 6a05 	vfma.f32	s13, s12, s10
 8005cba:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8005dac <__ieee754_expf+0x178>
 8005cbe:	eea6 5a86 	vfma.f32	s10, s13, s12
 8005cc2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8005db0 <__ieee754_expf+0x17c>
 8005cc6:	eee5 6a06 	vfma.f32	s13, s10, s12
 8005cca:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8005db4 <__ieee754_expf+0x180>
 8005cce:	eea6 5a86 	vfma.f32	s10, s13, s12
 8005cd2:	eef0 6a40 	vmov.f32	s13, s0
 8005cd6:	eee5 6a46 	vfms.f32	s13, s10, s12
 8005cda:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8005cde:	ee20 5a26 	vmul.f32	s10, s0, s13
 8005ce2:	bb92      	cbnz	r2, 8005d4a <__ieee754_expf+0x116>
 8005ce4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8005ce8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8005cec:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005cf0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8005cf4:	4770      	bx	lr
 8005cf6:	4b30      	ldr	r3, [pc, #192]	@ (8005db8 <__ieee754_expf+0x184>)
 8005cf8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8005dbc <__ieee754_expf+0x188>
 8005cfc:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8005dc0 <__ieee754_expf+0x18c>
 8005d00:	4413      	add	r3, r2
 8005d02:	edd3 7a00 	vldr	s15, [r3]
 8005d06:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005d0a:	eeb0 7a40 	vmov.f32	s14, s0
 8005d0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d12:	ee17 2a90 	vmov	r2, s15
 8005d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d1a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8005d1e:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8005dc4 <__ieee754_expf+0x190>
 8005d22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005d26:	e7be      	b.n	8005ca6 <__ieee754_expf+0x72>
 8005d28:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8005d2c:	d20b      	bcs.n	8005d46 <__ieee754_expf+0x112>
 8005d2e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005dc8 <__ieee754_expf+0x194>
 8005d32:	ee70 6a26 	vadd.f32	s13, s0, s13
 8005d36:	eef4 6ae5 	vcmpe.f32	s13, s11
 8005d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d3e:	dd02      	ble.n	8005d46 <__ieee754_expf+0x112>
 8005d40:	ee30 0a25 	vadd.f32	s0, s0, s11
 8005d44:	4770      	bx	lr
 8005d46:	2200      	movs	r2, #0
 8005d48:	e7af      	b.n	8005caa <__ieee754_expf+0x76>
 8005d4a:	ee36 6a66 	vsub.f32	s12, s12, s13
 8005d4e:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8005d52:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8005d56:	bfb8      	it	lt
 8005d58:	3264      	addlt	r2, #100	@ 0x64
 8005d5a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005d5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d62:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8005d66:	ee17 3a90 	vmov	r3, s15
 8005d6a:	bfab      	itete	ge
 8005d6c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8005d70:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8005d74:	ee00 3a10 	vmovge	s0, r3
 8005d78:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8005dcc <__ieee754_expf+0x198>
 8005d7c:	bfbc      	itt	lt
 8005d7e:	ee00 3a10 	vmovlt	s0, r3
 8005d82:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8005d86:	4770      	bx	lr
 8005d88:	00000000 	.word	0x00000000
 8005d8c:	42b17217 	.word	0x42b17217
 8005d90:	42cff1b5 	.word	0x42cff1b5
 8005d94:	3eb17218 	.word	0x3eb17218
 8005d98:	3f851591 	.word	0x3f851591
 8005d9c:	080329a4 	.word	0x080329a4
 8005da0:	0803299c 	.word	0x0803299c
 8005da4:	3331bb4c 	.word	0x3331bb4c
 8005da8:	b5ddea0e 	.word	0xb5ddea0e
 8005dac:	388ab355 	.word	0x388ab355
 8005db0:	bb360b61 	.word	0xbb360b61
 8005db4:	3e2aaaab 	.word	0x3e2aaaab
 8005db8:	080329ac 	.word	0x080329ac
 8005dbc:	3fb8aa3b 	.word	0x3fb8aa3b
 8005dc0:	3f317180 	.word	0x3f317180
 8005dc4:	3717f7d1 	.word	0x3717f7d1
 8005dc8:	7149f2ca 	.word	0x7149f2ca
 8005dcc:	0d800000 	.word	0x0d800000

08005dd0 <with_errnof>:
 8005dd0:	b510      	push	{r4, lr}
 8005dd2:	ed2d 8b02 	vpush	{d8}
 8005dd6:	eeb0 8a40 	vmov.f32	s16, s0
 8005dda:	4604      	mov	r4, r0
 8005ddc:	f7ff fe3a 	bl	8005a54 <__errno>
 8005de0:	eeb0 0a48 	vmov.f32	s0, s16
 8005de4:	ecbd 8b02 	vpop	{d8}
 8005de8:	6004      	str	r4, [r0, #0]
 8005dea:	bd10      	pop	{r4, pc}

08005dec <xflowf>:
 8005dec:	b130      	cbz	r0, 8005dfc <xflowf+0x10>
 8005dee:	eef1 7a40 	vneg.f32	s15, s0
 8005df2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005df6:	2022      	movs	r0, #34	@ 0x22
 8005df8:	f7ff bfea 	b.w	8005dd0 <with_errnof>
 8005dfc:	eef0 7a40 	vmov.f32	s15, s0
 8005e00:	e7f7      	b.n	8005df2 <xflowf+0x6>
	...

08005e04 <__math_uflowf>:
 8005e04:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005e0c <__math_uflowf+0x8>
 8005e08:	f7ff bff0 	b.w	8005dec <xflowf>
 8005e0c:	10000000 	.word	0x10000000

08005e10 <__math_oflowf>:
 8005e10:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005e18 <__math_oflowf+0x8>
 8005e14:	f7ff bfea 	b.w	8005dec <xflowf>
 8005e18:	70000000 	.word	0x70000000

08005e1c <_init>:
 8005e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1e:	bf00      	nop
 8005e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e22:	bc08      	pop	{r3}
 8005e24:	469e      	mov	lr, r3
 8005e26:	4770      	bx	lr

08005e28 <_fini>:
 8005e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2a:	bf00      	nop
 8005e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e2e:	bc08      	pop	{r3}
 8005e30:	469e      	mov	lr, r3
 8005e32:	4770      	bx	lr
